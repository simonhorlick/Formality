Fm.Parser.string.go(
  str: String,
  idx: Nat,
  code: String,
): Parser.Reply(String)
  case code {
    nil:
      Parser.Reply.error<String>(idx, code, "Non-terminating string.")
    cons:
      if U16.eql(code.head, '"') then
        Parser.Reply.value<String>(Nat.succ(idx), code.tail, String.reverse(str))
      else case Fm.Parser.char.single(idx, code) as parsed {
        error:
          Parser.Reply.error<String>(parsed.idx, parsed.code, parsed.err)
        value:
          Fm.Parser.string.go(String.cons(parsed.val,str), parsed.idx, parsed.code)
      }
  }

Fm.Parser.string: Parser(Fm.Term)
  do Parser {
    var init = Fm.Parser.init;
    Fm.Parser.text(String.cons('"', String.nil));
    var strx = Fm.Parser.string.go("");
    var orig = Fm.Parser.stop(init);
    return Fm.Term.ori(orig, Fm.Term.str(strx));
  }
