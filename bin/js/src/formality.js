module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var fm_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(1);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c2;
                return $2;
            } else {
                var $3 = c2;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c2;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c2($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'e':
                    var $9 = c0;
                    return $9;
                case 'o':
                    var $10 = self.slice(0, -1);
                    var $11 = c1($10);
                    return $11;
                case 'i':
                    var $12 = self.slice(0, -1);
                    var $13 = c2($12);
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c2;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c2($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
        };
        return run_io({
            rl,
            fs,
            pc
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var get_file = (lib, param) => {
        return lib.fs.readFileSync(param, 'utf8');
    }
    var set_file = (lib, param) => {
        var path = '';
        for (var i = 0; i < param.length && param[i] !== '='; ++i) {
            path += param[i];
        };
        var data = param.slice(i + 1);
        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {
            recursive: true
        });
        lib.fs.writeFileSync(path, data);
        return '';
    };
    var del_file = (lib, param) => {
        try {
            lib.fs.unlinkSync(param);
            return '';
        } catch (e) {
            if (e.message.indexOf('EPERM') !== -1) {
                lib.fs.rmdirSync(param);
                return '';
            } else {
                throw e;
            }
        }
    };
    var get_dir = (lib, param) => {
        return lib.fs.readdirSync(param).join(';');
    };
    var run_io = (lib, p) => {
        switch (p._) {
            case 'IO.end':
                return Promise.resolve(p.value);
            case 'IO.ask':
                return new Promise((res, err) => {
                    switch (p.query) {
                        case 'print':
                            console.log(p.param);
                            run_io(lib, p.then(1)).then(res).catch(err);
                            break;
                        case 'put_string':
                            process.stdout.write(p.param);
                            run_io(lib, p.then(1)).then(res).catch(err);
                            break;
                        case 'exit':
                            lib.pc.exit();
                            break;
                        case 'get_line':
                            lib.rl.question('', (line) => run_io(lib, p.then(line)).then(res).catch(err));
                            break;
                        case 'get_file':
                            try {
                                run_io(lib, p.then(get_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'set_file':
                            try {
                                run_io(lib, p.then(set_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'del_file':
                            try {
                                run_io(lib, p.then(del_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_dir':
                            try {
                                run_io(lib, p.then(get_dir(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_args':
                            run_io(lib, p.then(lib.pc.argv[2] || '')).then(res).catch(err);
                            break;
                    }
                });
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function Map$(_A$1) {
        var $36 = null;
        return $36;
    };
    const Map = x0 => Map$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });

    function Map$get$(_bits$2, _map$3) {
        var Map$get$ = (_bits$2, _map$3) => ({
            ctr: 'TCO',
            arg: [_bits$2, _map$3]
        });
        var Map$get = _bits$2 => _map$3 => Map$get$(_bits$2, _map$3);
        var arg = [_bits$2, _map$3];
        while (true) {
            let [_bits$2, _map$3] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $38 = Maybe$none;
                                var $37 = $38;
                                break;
                            case 'Map.tie':
                                var $39 = self.val;
                                var $40 = self.lft;
                                var $41 = self.rgt;
                                var $42 = $39;
                                var $37 = $42;
                                break;
                        };
                        return $37;
                    case 'o':
                        var $43 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $45 = Maybe$none;
                                var $44 = $45;
                                break;
                            case 'Map.tie':
                                var $46 = self.val;
                                var $47 = self.lft;
                                var $48 = self.rgt;
                                var $49 = Map$get$($43, $47);
                                var $44 = $49;
                                break;
                        };
                        return $44;
                    case 'i':
                        var $50 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $52 = Maybe$none;
                                var $51 = $52;
                                break;
                            case 'Map.tie':
                                var $53 = self.val;
                                var $54 = self.lft;
                                var $55 = self.rgt;
                                var $56 = Map$get$($50, $55);
                                var $51 = $56;
                                break;
                        };
                        return $51;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Map$get = x0 => x1 => Map$get$(x0, x1);
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $58 = Bool$true;
                var $57 = $58;
                break;
            case 'Cmp.eql':
                var $59 = Bool$true;
                var $57 = $59;
                break;
            case 'Cmp.gtn':
                var $60 = Bool$false;
                var $57 = $60;
                break;
        };
        return $57;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $62 = (_b$5 => {
                    var $63 = _c$4;
                    return $63;
                });
                var $61 = $62;
                break;
            case 'Word.o':
                var $64 = self.pred;
                var $65 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $67 = (_a$pred$8 => {
                                var $68 = _c$4;
                                return $68;
                            });
                            var $66 = $67;
                            break;
                        case 'Word.o':
                            var $69 = self.pred;
                            var $70 = (_a$pred$10 => {
                                var $71 = Word$cmp$go$(_a$pred$10, $69, _c$4);
                                return $71;
                            });
                            var $66 = $70;
                            break;
                        case 'Word.i':
                            var $72 = self.pred;
                            var $73 = (_a$pred$10 => {
                                var $74 = Word$cmp$go$(_a$pred$10, $72, Cmp$ltn);
                                return $74;
                            });
                            var $66 = $73;
                            break;
                    };
                    var $66 = $66($64);
                    return $66;
                });
                var $61 = $65;
                break;
            case 'Word.i':
                var $75 = self.pred;
                var $76 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $78 = (_a$pred$8 => {
                                var $79 = _c$4;
                                return $79;
                            });
                            var $77 = $78;
                            break;
                        case 'Word.o':
                            var $80 = self.pred;
                            var $81 = (_a$pred$10 => {
                                var $82 = Word$cmp$go$(_a$pred$10, $80, Cmp$gtn);
                                return $82;
                            });
                            var $77 = $81;
                            break;
                        case 'Word.i':
                            var $83 = self.pred;
                            var $84 = (_a$pred$10 => {
                                var $85 = Word$cmp$go$(_a$pred$10, $83, _c$4);
                                return $85;
                            });
                            var $77 = $84;
                            break;
                    };
                    var $77 = $77($75);
                    return $77;
                });
                var $61 = $76;
                break;
        };
        var $61 = $61(_b$3);
        return $61;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $86 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $86;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$lte$(_a$2, _b$3) {
        var $87 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $87;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $88 = 1n + _pred$1;
        return $88;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $89 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $89;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $90 = word_to_u16(_value$1);
        return $90;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $91 = null;
        return $91;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $92 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $92;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $93 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $93;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $95 = (_b$5 => {
                    var $96 = Word$e;
                    return $96;
                });
                var $94 = $95;
                break;
            case 'Word.o':
                var $97 = self.pred;
                var $98 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $100 = (_a$pred$8 => {
                                var $101 = Word$e;
                                return $101;
                            });
                            var $99 = $100;
                            break;
                        case 'Word.o':
                            var $102 = self.pred;
                            var $103 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $105 = Word$i$(Word$subber$(_a$pred$10, $102, Bool$true));
                                    var $104 = $105;
                                } else {
                                    var $106 = Word$o$(Word$subber$(_a$pred$10, $102, Bool$false));
                                    var $104 = $106;
                                };
                                return $104;
                            });
                            var $99 = $103;
                            break;
                        case 'Word.i':
                            var $107 = self.pred;
                            var $108 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $110 = Word$o$(Word$subber$(_a$pred$10, $107, Bool$true));
                                    var $109 = $110;
                                } else {
                                    var $111 = Word$i$(Word$subber$(_a$pred$10, $107, Bool$true));
                                    var $109 = $111;
                                };
                                return $109;
                            });
                            var $99 = $108;
                            break;
                    };
                    var $99 = $99($97);
                    return $99;
                });
                var $94 = $98;
                break;
            case 'Word.i':
                var $112 = self.pred;
                var $113 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $115 = (_a$pred$8 => {
                                var $116 = Word$e;
                                return $116;
                            });
                            var $114 = $115;
                            break;
                        case 'Word.o':
                            var $117 = self.pred;
                            var $118 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $120 = Word$o$(Word$subber$(_a$pred$10, $117, Bool$false));
                                    var $119 = $120;
                                } else {
                                    var $121 = Word$i$(Word$subber$(_a$pred$10, $117, Bool$false));
                                    var $119 = $121;
                                };
                                return $119;
                            });
                            var $114 = $118;
                            break;
                        case 'Word.i':
                            var $122 = self.pred;
                            var $123 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $125 = Word$i$(Word$subber$(_a$pred$10, $122, Bool$true));
                                    var $124 = $125;
                                } else {
                                    var $126 = Word$o$(Word$subber$(_a$pred$10, $122, Bool$false));
                                    var $124 = $126;
                                };
                                return $124;
                            });
                            var $114 = $123;
                            break;
                    };
                    var $114 = $114($112);
                    return $114;
                });
                var $94 = $113;
                break;
        };
        var $94 = $94(_b$3);
        return $94;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $127 = Word$subber$(_a$2, _b$3, Bool$false);
        return $127;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => (Math.max(a0 - a1, 0));

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $128 = _x$4;
                    return $128;
                } else {
                    var $129 = (self - 1n);
                    var $130 = Nat$apply$($129, _f$3, _f$3(_x$4));
                    return $130;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.e':
                var $132 = Word$e;
                var $131 = $132;
                break;
            case 'Word.o':
                var $133 = self.pred;
                var $134 = Word$i$($133);
                var $131 = $134;
                break;
            case 'Word.i':
                var $135 = self.pred;
                var $136 = Word$o$(Word$inc$($135));
                var $131 = $136;
                break;
        };
        return $131;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function U16$inc$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $138 = u16_to_word(self);
                var $139 = U16$new$(Word$inc$($138));
                var $137 = $139;
                break;
        };
        return $137;
    };
    const U16$inc = x0 => U16$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $141 = Word$e;
            var $140 = $141;
        } else {
            var $142 = (self - 1n);
            var $143 = Word$o$(Word$zero$($142));
            var $140 = $143;
        };
        return $140;
    };
    const Word$zero = x0 => Word$zero$(x0);
    const U16$zero = U16$new$(Word$zero$(16n));
    const Nat$to_u16 = a0 => (Number(a0));

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $145 = (_b$5 => {
                    var $146 = Word$e;
                    return $146;
                });
                var $144 = $145;
                break;
            case 'Word.o':
                var $147 = self.pred;
                var $148 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $150 = (_a$pred$8 => {
                                var $151 = Word$e;
                                return $151;
                            });
                            var $149 = $150;
                            break;
                        case 'Word.o':
                            var $152 = self.pred;
                            var $153 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $155 = Word$i$(Word$adder$(_a$pred$10, $152, Bool$false));
                                    var $154 = $155;
                                } else {
                                    var $156 = Word$o$(Word$adder$(_a$pred$10, $152, Bool$false));
                                    var $154 = $156;
                                };
                                return $154;
                            });
                            var $149 = $153;
                            break;
                        case 'Word.i':
                            var $157 = self.pred;
                            var $158 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $160 = Word$o$(Word$adder$(_a$pred$10, $157, Bool$true));
                                    var $159 = $160;
                                } else {
                                    var $161 = Word$i$(Word$adder$(_a$pred$10, $157, Bool$false));
                                    var $159 = $161;
                                };
                                return $159;
                            });
                            var $149 = $158;
                            break;
                    };
                    var $149 = $149($147);
                    return $149;
                });
                var $144 = $148;
                break;
            case 'Word.i':
                var $162 = self.pred;
                var $163 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $165 = (_a$pred$8 => {
                                var $166 = Word$e;
                                return $166;
                            });
                            var $164 = $165;
                            break;
                        case 'Word.o':
                            var $167 = self.pred;
                            var $168 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $170 = Word$o$(Word$adder$(_a$pred$10, $167, Bool$true));
                                    var $169 = $170;
                                } else {
                                    var $171 = Word$i$(Word$adder$(_a$pred$10, $167, Bool$false));
                                    var $169 = $171;
                                };
                                return $169;
                            });
                            var $164 = $168;
                            break;
                        case 'Word.i':
                            var $172 = self.pred;
                            var $173 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $175 = Word$i$(Word$adder$(_a$pred$10, $172, Bool$true));
                                    var $174 = $175;
                                } else {
                                    var $176 = Word$o$(Word$adder$(_a$pred$10, $172, Bool$true));
                                    var $174 = $176;
                                };
                                return $174;
                            });
                            var $164 = $173;
                            break;
                    };
                    var $164 = $164($162);
                    return $164;
                });
                var $144 = $163;
                break;
        };
        var $144 = $144(_b$3);
        return $144;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $177 = Word$adder$(_a$2, _b$3, Bool$false);
        return $177;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $179 = Bool$false;
                var $178 = $179;
                break;
            case 'Cmp.eql':
                var $180 = Bool$true;
                var $178 = $180;
                break;
            case 'Cmp.gtn':
                var $181 = Bool$false;
                var $178 = $181;
                break;
        };
        return $178;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $182 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $182;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $184 = Bits$e;
                var $183 = $184;
                break;
            case 'Word.o':
                var $185 = self.pred;
                var $186 = (Word$to_bits$($185) + '0');
                var $183 = $186;
                break;
            case 'Word.i':
                var $187 = self.pred;
                var $188 = (Word$to_bits$($187) + '1');
                var $183 = $188;
                break;
        };
        return $183;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $190 = Word$e;
            var $189 = $190;
        } else {
            var $191 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.e':
                    var $193 = Word$o$(Word$trim$($191, Word$e));
                    var $192 = $193;
                    break;
                case 'Word.o':
                    var $194 = self.pred;
                    var $195 = Word$o$(Word$trim$($191, $194));
                    var $192 = $195;
                    break;
                case 'Word.i':
                    var $196 = self.pred;
                    var $197 = Word$i$(Word$trim$($191, $196));
                    var $192 = $197;
                    break;
            };
            var $189 = $192;
        };
        return $189;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $198 = _r$2;
                        return $198;
                    case 'o':
                        var $199 = self.slice(0, -1);
                        var $200 = Bits$reverse$tco$($199, (_r$2 + '0'));
                        return $200;
                    case 'i':
                        var $201 = self.slice(0, -1);
                        var $202 = Bits$reverse$tco$($201, (_r$2 + '1'));
                        return $202;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $203 = Bits$reverse$tco$(_a$1, Bits$e);
        return $203;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Fm$Name$to_bits = a0 => (fm_name_to_bits(a0));

    function Fm$get$(_name$2, _map$3) {
        var $204 = Map$get$((fm_name_to_bits(_name$2)), _map$3);
        return $204;
    };
    const Fm$get = x0 => x1 => Fm$get$(x0, x1);

    function IO$get_file$(_name$1) {
        var $205 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $206 = IO$end$(_file$2);
            return $206;
        }));
        return $205;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function Parser$Reply$(_V$1) {
        var $207 = null;
        return $207;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $208 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $208;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $210 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $209 = $210;
        } else {
            var $211 = self.charCodeAt(0);
            var $212 = self.slice(1);
            var $213 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $209 = $213;
        };
        return $209;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $214 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $214;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$(_V$1) {
        var $215 = null;
        return $215;
    };
    const Parser = x0 => Parser$(x0);

    function Maybe$some$(_value$2) {
        var $216 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $216;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $217 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $217;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.none':
                var $219 = _b$2;
                var $218 = $219;
                break;
            case 'Maybe.some':
                var $220 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.none':
                        var $222 = _a$1;
                        var $221 = $222;
                        break;
                    case 'Maybe.some':
                        var $223 = self.value;
                        var self = $220;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $225 = self.idx;
                                var $226 = self.code;
                                var $227 = self.err;
                                var self = $223;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $229 = self.idx;
                                        var $230 = self.code;
                                        var $231 = self.err;
                                        var self = ($225 > $229);
                                        if (self) {
                                            var $233 = _a$1;
                                            var $232 = $233;
                                        } else {
                                            var $234 = _b$2;
                                            var $232 = $234;
                                        };
                                        var $228 = $232;
                                        break;
                                };
                                var $224 = $228;
                                break;
                        };
                        var $221 = $224;
                        break;
                };
                var $218 = $221;
                break;
        };
        return $218;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.none':
                                var $236 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $235 = $236;
                                break;
                            case 'Maybe.some':
                                var $237 = self.value;
                                var self = $237;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $239 = self.idx;
                                        var $240 = self.code;
                                        var $241 = self.err;
                                        var $242 = Parser$Reply$error$($239, $240, $241);
                                        var $238 = $242;
                                        break;
                                };
                                var $235 = $238;
                                break;
                        };
                        return $235;
                    case 'List.cons':
                        var $243 = self.head;
                        var $244 = self.tail;
                        var _parsed$8 = $243(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $246 = self.idx;
                                var $247 = self.code;
                                var $248 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($246, $247, $248));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $249 = Parser$first_of$go$($244, _err$13, _idx$4, _code$5);
                                var $245 = $249;
                                break;
                            case 'Parser.Reply.value':
                                var $250 = self.idx;
                                var $251 = self.code;
                                var $252 = self.val;
                                var $253 = Parser$Reply$value$($250, $251, $252);
                                var $245 = $253;
                                break;
                        };
                        return $245;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $254 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $254;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function List$cons$(_head$2, _tail$3) {
        var $255 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $255;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function List$(_A$1) {
        var $256 = null;
        return $256;
    };
    const List = x0 => List$(x0);
    const List$nil = ({
        _: 'List.nil'
    });

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $257 = self.idx;
                        var $258 = self.code;
                        var $259 = self.err;
                        var $260 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $260;
                    case 'Parser.Reply.value':
                        var $261 = self.idx;
                        var $262 = self.code;
                        var $263 = self.val;
                        var $264 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $265 = _values$3(List$cons$($263, _xs$9));
                            return $265;
                        }), $261, $262);
                        return $264;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $266 = Parser$many$go(_parser$2)((_x$3 => {
            var $267 = _x$3;
            return $267;
        }));
        return $266;
    };
    const Parser$many = x0 => Parser$many$(x0);
    const Unit$new = 1;

    function String$cons$(_head$1, _tail$2) {
        var $268 = (String.fromCharCode(_head$1) + _tail$2);
        return $268;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);
    const String$concat = a0 => a1 => (a0 + a1);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.nil':
                        var $269 = _res$2;
                        return $269;
                    case 'List.cons':
                        var $270 = self.head;
                        var $271 = self.tail;
                        var $272 = String$flatten$go$($271, (_res$2 + $270));
                        return $272;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $273 = String$flatten$go$(_xs$1, "");
        return $273;
    };
    const String$flatten = x0 => String$flatten$(x0);
    const String$nil = '';

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $275 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $274 = $275;
        } else {
            var $276 = self.charCodeAt(0);
            var $277 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $279 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $278 = $279;
            } else {
                var $280 = self.charCodeAt(0);
                var $281 = self.slice(1);
                var self = ($276 === $280);
                if (self) {
                    var $283 = Parser$text$($277, Nat$succ$(_idx$2), $281);
                    var $282 = $283;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($280, String$nil), List$cons$("\'.", List$nil))))));
                    var $284 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $282 = $284;
                };
                var $278 = $282;
            };
            var $274 = $278;
        };
        return $274;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $286 = self.idx;
                var $287 = self.code;
                var $288 = self.err;
                var $289 = Parser$Reply$error$(_idx$2, _code$3, $288);
                var $285 = $289;
                break;
            case 'Parser.Reply.value':
                var $290 = self.idx;
                var $291 = self.code;
                var $292 = self.val;
                var $293 = Parser$Reply$value$($290, $291, $292);
                var $285 = $293;
                break;
        };
        return $285;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.nil':
                        var $294 = _res$3;
                        return $294;
                    case 'List.cons':
                        var $295 = self.head;
                        var $296 = self.tail;
                        var $297 = List$reverse$go$($296, List$cons$($295, _res$3));
                        return $297;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $298 = List$reverse$go$(_xs$2, List$nil);
        return $298;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $300 = self.idx;
                        var $301 = self.code;
                        var $302 = self.err;
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $304 = self.idx;
                                var $305 = self.code;
                                var $306 = self.err;
                                var $307 = Parser$Reply$error$($304, $305, $306);
                                var $303 = $307;
                                break;
                            case 'Parser.Reply.value':
                                var $308 = self.idx;
                                var $309 = self.code;
                                var $310 = self.val;
                                var $311 = Parser$until$go$(_until$2, _parse$3, List$cons$($310, _values$4), $308, $309);
                                var $303 = $311;
                                break;
                        };
                        var $299 = $303;
                        break;
                    case 'Parser.Reply.value':
                        var $312 = self.idx;
                        var $313 = self.code;
                        var $314 = self.val;
                        var $315 = Parser$Reply$value$($312, $313, List$reverse$(_values$4));
                        var $299 = $315;
                        break;
                };
                return $299;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $316 = Parser$until$go(_until$2)(_parse$3)(List$nil);
        return $316;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $318 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $317 = $318;
        } else {
            var $319 = self.charCodeAt(0);
            var $320 = self.slice(1);
            var $321 = Parser$Reply$value$(Nat$succ$(_idx$1), $320, $319);
            var $317 = $321;
        };
        return $317;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Fm$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{9}"), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $323 = self.idx;
                var $324 = self.code;
                var $325 = self.err;
                var $326 = Parser$Reply$error$($323, $324, $325);
                var $322 = $326;
                break;
            case 'Parser.Reply.value':
                var $327 = self.idx;
                var $328 = self.code;
                var $329 = self.val;
                var self = Parser$until$(Parser$text("\u{a}"), Parser$one)($327)($328);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $331 = self.idx;
                        var $332 = self.code;
                        var $333 = self.err;
                        var $334 = Parser$Reply$error$($331, $332, $333);
                        var $330 = $334;
                        break;
                    case 'Parser.Reply.value':
                        var $335 = self.idx;
                        var $336 = self.code;
                        var $337 = self.val;
                        var $338 = Parser$Reply$value$($335, $336, Unit$new);
                        var $330 = $338;
                        break;
                };
                var $322 = $330;
                break;
        };
        return $322;
    }), List$nil))))));

    function Parser$get_index$(_idx$1, _code$2) {
        var $339 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $339;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Fm$Parser$init$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $341 = self.idx;
                var $342 = self.code;
                var $343 = self.err;
                var $344 = Parser$Reply$error$($341, $342, $343);
                var $340 = $344;
                break;
            case 'Parser.Reply.value':
                var $345 = self.idx;
                var $346 = self.code;
                var $347 = self.val;
                var self = Parser$get_index$($345, $346);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $349 = self.idx;
                        var $350 = self.code;
                        var $351 = self.err;
                        var $352 = Parser$Reply$error$($349, $350, $351);
                        var $348 = $352;
                        break;
                    case 'Parser.Reply.value':
                        var $353 = self.idx;
                        var $354 = self.code;
                        var $355 = self.val;
                        var $356 = Parser$Reply$value$($353, $354, $355);
                        var $348 = $356;
                        break;
                };
                var $340 = $348;
                break;
        };
        return $340;
    };
    const Fm$Parser$init = x0 => x1 => Fm$Parser$init$(x0, x1);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $358 = self.idx;
                var $359 = self.code;
                var $360 = self.err;
                var $361 = Parser$Reply$error$($358, $359, $360);
                var $357 = $361;
                break;
            case 'Parser.Reply.value':
                var $362 = self.idx;
                var $363 = self.code;
                var $364 = self.val;
                var self = Parser$many$(_parser$2)($362)($363);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $366 = self.idx;
                        var $367 = self.code;
                        var $368 = self.err;
                        var $369 = Parser$Reply$error$($366, $367, $368);
                        var $365 = $369;
                        break;
                    case 'Parser.Reply.value':
                        var $370 = self.idx;
                        var $371 = self.code;
                        var $372 = self.val;
                        var $373 = Parser$Reply$value$($370, $371, List$cons$($364, $372));
                        var $365 = $373;
                        break;
                };
                var $357 = $365;
                break;
        };
        return $357;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Fm$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $375 = Bool$true;
            var $374 = $375;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $377 = Bool$true;
                var $376 = $377;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $379 = Bool$true;
                    var $378 = $379;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $381 = Bool$true;
                        var $380 = $381;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $383 = Bool$true;
                            var $382 = $383;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $385 = Bool$true;
                                var $384 = $385;
                            } else {
                                var $386 = Bool$false;
                                var $384 = $386;
                            };
                            var $382 = $384;
                        };
                        var $380 = $382;
                    };
                    var $378 = $380;
                };
                var $376 = $378;
            };
            var $374 = $376;
        };
        return $374;
    };
    const Fm$Name$is_letter = x0 => Fm$Name$is_letter$(x0);

    function Fm$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $388 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $387 = $388;
        } else {
            var $389 = self.charCodeAt(0);
            var $390 = self.slice(1);
            var self = Fm$Name$is_letter$($389);
            if (self) {
                var $392 = Parser$Reply$value$(Nat$succ$(_idx$1), $390, $389);
                var $391 = $392;
            } else {
                var $393 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $391 = $393;
            };
            var $387 = $391;
        };
        return $387;
    };
    const Fm$Parser$letter = x0 => x1 => Fm$Parser$letter$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $395 = _nil$4;
                var $394 = $395;
                break;
            case 'List.cons':
                var $396 = self.head;
                var $397 = self.tail;
                var $398 = _cons$5($396)(List$fold$($397, _nil$4, _cons$5));
                var $394 = $398;
                break;
        };
        return $394;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Fm$Parser$name1$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $400 = self.idx;
                var $401 = self.code;
                var $402 = self.err;
                var $403 = Parser$Reply$error$($400, $401, $402);
                var $399 = $403;
                break;
            case 'Parser.Reply.value':
                var $404 = self.idx;
                var $405 = self.code;
                var $406 = self.val;
                var self = Parser$many1$(Fm$Parser$letter, $404, $405);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $408 = self.idx;
                        var $409 = self.code;
                        var $410 = self.err;
                        var $411 = Parser$Reply$error$($408, $409, $410);
                        var $407 = $411;
                        break;
                    case 'Parser.Reply.value':
                        var $412 = self.idx;
                        var $413 = self.code;
                        var $414 = self.val;
                        var $415 = Parser$Reply$value$($412, $413, List$fold$($414, String$nil, String$cons));
                        var $407 = $415;
                        break;
                };
                var $399 = $407;
                break;
        };
        return $399;
    };
    const Fm$Parser$name1 = x0 => x1 => Fm$Parser$name1$(x0, x1);

    function Fm$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Fm$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $417 = self.idx;
                var $418 = self.code;
                var $419 = self.err;
                var $420 = Parser$Reply$error$($417, $418, $419);
                var $416 = $420;
                break;
            case 'Parser.Reply.value':
                var $421 = self.idx;
                var $422 = self.code;
                var $423 = self.val;
                var $424 = Parser$text$(_text$1, $421, $422);
                var $416 = $424;
                break;
        };
        return $416;
    };
    const Fm$Parser$text = x0 => x1 => x2 => Fm$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $426 = self.idx;
                var $427 = self.code;
                var $428 = self.err;
                var $429 = Parser$Reply$error$($426, $427, $428);
                var $425 = $429;
                break;
            case 'Parser.Reply.value':
                var $430 = self.idx;
                var $431 = self.code;
                var $432 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($430)($431);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $434 = self.idx;
                        var $435 = self.code;
                        var $436 = self.err;
                        var $437 = Parser$Reply$error$($434, $435, $436);
                        var $433 = $437;
                        break;
                    case 'Parser.Reply.value':
                        var $438 = self.idx;
                        var $439 = self.code;
                        var $440 = self.val;
                        var $441 = Parser$Reply$value$($438, $439, List$cons$($432, $440));
                        var $433 = $441;
                        break;
                };
                var $425 = $433;
                break;
        };
        return $425;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Pair$(_A$1, _B$2) {
        var $442 = null;
        return $442;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $444 = self.idx;
                var $445 = self.code;
                var $446 = self.err;
                var $447 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $443 = $447;
                break;
            case 'Parser.Reply.value':
                var $448 = self.idx;
                var $449 = self.code;
                var $450 = self.val;
                var $451 = Parser$Reply$value$($448, $449, Maybe$some$($450));
                var $443 = $451;
                break;
        };
        return $443;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Fm$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Fm$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $453 = self.idx;
                var $454 = self.code;
                var $455 = self.err;
                var $456 = Parser$Reply$error$($453, $454, $455);
                var $452 = $456;
                break;
            case 'Parser.Reply.value':
                var $457 = self.idx;
                var $458 = self.code;
                var $459 = self.val;
                var self = _parser$2($457)($458);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $461 = self.idx;
                        var $462 = self.code;
                        var $463 = self.err;
                        var $464 = Parser$Reply$error$($461, $462, $463);
                        var $460 = $464;
                        break;
                    case 'Parser.Reply.value':
                        var $465 = self.idx;
                        var $466 = self.code;
                        var $467 = self.val;
                        var self = Parser$maybe$(Fm$Parser$text(","), $465, $466);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $469 = self.idx;
                                var $470 = self.code;
                                var $471 = self.err;
                                var $472 = Parser$Reply$error$($469, $470, $471);
                                var $468 = $472;
                                break;
                            case 'Parser.Reply.value':
                                var $473 = self.idx;
                                var $474 = self.code;
                                var $475 = self.val;
                                var $476 = Parser$Reply$value$($473, $474, $467);
                                var $468 = $476;
                                break;
                        };
                        var $460 = $468;
                        break;
                };
                var $452 = $460;
                break;
        };
        return $452;
    };
    const Fm$Parser$item = x0 => x1 => x2 => Fm$Parser$item$(x0, x1, x2);

    function Fm$Parser$name$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $478 = self.idx;
                var $479 = self.code;
                var $480 = self.err;
                var $481 = Parser$Reply$error$($478, $479, $480);
                var $477 = $481;
                break;
            case 'Parser.Reply.value':
                var $482 = self.idx;
                var $483 = self.code;
                var $484 = self.val;
                var self = Parser$many$(Fm$Parser$letter)($482)($483);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $486 = self.idx;
                        var $487 = self.code;
                        var $488 = self.err;
                        var $489 = Parser$Reply$error$($486, $487, $488);
                        var $485 = $489;
                        break;
                    case 'Parser.Reply.value':
                        var $490 = self.idx;
                        var $491 = self.code;
                        var $492 = self.val;
                        var $493 = Parser$Reply$value$($490, $491, List$fold$($492, String$nil, String$cons));
                        var $485 = $493;
                        break;
                };
                var $477 = $485;
                break;
        };
        return $477;
    };
    const Fm$Parser$name = x0 => x1 => Fm$Parser$name$(x0, x1);

    function Pair$new$(_fst$3, _snd$4) {
        var $494 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $494;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);

    function Fm$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $496 = self.idx;
                var $497 = self.code;
                var $498 = self.err;
                var $499 = Parser$Reply$error$($496, $497, $498);
                var $495 = $499;
                break;
            case 'Parser.Reply.value':
                var $500 = self.idx;
                var $501 = self.code;
                var $502 = self.val;
                var _orig$7 = Pair$new$(_from$1, $502);
                var $503 = Parser$Reply$value$($500, $501, _orig$7);
                var $495 = $503;
                break;
        };
        return $495;
    };
    const Fm$Parser$stop = x0 => x1 => x2 => Fm$Parser$stop$(x0, x1, x2);

    function Fm$Term$ori$(_orig$1, _expr$2) {
        var $504 = ({
            _: 'Fm.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $504;
    };
    const Fm$Term$ori = x0 => x1 => Fm$Term$ori$(x0, x1);
    const Fm$Term$typ = ({
        _: 'Fm.Term.typ'
    });

    function Fm$Parser$type$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $506 = self.idx;
                var $507 = self.code;
                var $508 = self.err;
                var $509 = Parser$Reply$error$($506, $507, $508);
                var $505 = $509;
                break;
            case 'Parser.Reply.value':
                var $510 = self.idx;
                var $511 = self.code;
                var $512 = self.val;
                var self = Fm$Parser$text$("Type", $510, $511);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $514 = self.idx;
                        var $515 = self.code;
                        var $516 = self.err;
                        var $517 = Parser$Reply$error$($514, $515, $516);
                        var $513 = $517;
                        break;
                    case 'Parser.Reply.value':
                        var $518 = self.idx;
                        var $519 = self.code;
                        var $520 = self.val;
                        var self = Fm$Parser$stop$($512, $518, $519);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $522 = self.idx;
                                var $523 = self.code;
                                var $524 = self.err;
                                var $525 = Parser$Reply$error$($522, $523, $524);
                                var $521 = $525;
                                break;
                            case 'Parser.Reply.value':
                                var $526 = self.idx;
                                var $527 = self.code;
                                var $528 = self.val;
                                var $529 = Parser$Reply$value$($526, $527, Fm$Term$ori$($528, Fm$Term$typ));
                                var $521 = $529;
                                break;
                        };
                        var $513 = $521;
                        break;
                };
                var $505 = $513;
                break;
        };
        return $505;
    };
    const Fm$Parser$type = x0 => x1 => Fm$Parser$type$(x0, x1);

    function Fm$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $530 = ({
            _: 'Fm.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $530;
    };
    const Fm$Term$all = x0 => x1 => x2 => x3 => x4 => Fm$Term$all$(x0, x1, x2, x3, x4);

    function Fm$Parser$forall$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $532 = self.idx;
                var $533 = self.code;
                var $534 = self.err;
                var $535 = Parser$Reply$error$($532, $533, $534);
                var $531 = $535;
                break;
            case 'Parser.Reply.value':
                var $536 = self.idx;
                var $537 = self.code;
                var $538 = self.val;
                var self = Fm$Parser$name$($536, $537);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $540 = self.idx;
                        var $541 = self.code;
                        var $542 = self.err;
                        var $543 = Parser$Reply$error$($540, $541, $542);
                        var $539 = $543;
                        break;
                    case 'Parser.Reply.value':
                        var $544 = self.idx;
                        var $545 = self.code;
                        var $546 = self.val;
                        var self = Fm$Parser$binder$($544, $545);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $548 = self.idx;
                                var $549 = self.code;
                                var $550 = self.err;
                                var $551 = Parser$Reply$error$($548, $549, $550);
                                var $547 = $551;
                                break;
                            case 'Parser.Reply.value':
                                var $552 = self.idx;
                                var $553 = self.code;
                                var $554 = self.val;
                                var self = Parser$maybe$(Fm$Parser$text("->"), $552, $553);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $556 = self.idx;
                                        var $557 = self.code;
                                        var $558 = self.err;
                                        var $559 = Parser$Reply$error$($556, $557, $558);
                                        var $555 = $559;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $560 = self.idx;
                                        var $561 = self.code;
                                        var $562 = self.val;
                                        var self = Fm$Parser$term$($560, $561);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $564 = self.idx;
                                                var $565 = self.code;
                                                var $566 = self.err;
                                                var $567 = Parser$Reply$error$($564, $565, $566);
                                                var $563 = $567;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $568 = self.idx;
                                                var $569 = self.code;
                                                var $570 = self.val;
                                                var _term$18 = List$fold$($554, $570, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $573 = self.eras;
                                                            var $574 = self.name;
                                                            var $575 = self.term;
                                                            var $576 = Fm$Term$all$($573, "", $574, $575, (_s$23 => _x$24 => {
                                                                var $577 = _t$19;
                                                                return $577;
                                                            }));
                                                            var $572 = $576;
                                                            break;
                                                    };
                                                    return $572;
                                                }));
                                                var self = Fm$Parser$stop$($538, $568, $569);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $578 = self.idx;
                                                        var $579 = self.code;
                                                        var $580 = self.err;
                                                        var $581 = Parser$Reply$error$($578, $579, $580);
                                                        var $571 = $581;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $582 = self.idx;
                                                        var $583 = self.code;
                                                        var $584 = self.val;
                                                        var $585 = Parser$Reply$value$($582, $583, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Fm.Term.var':
                                                                    var $586 = self.name;
                                                                    var $587 = self.indx;
                                                                    var $588 = _term$18;
                                                                    return $588;
                                                                case 'Fm.Term.ref':
                                                                    var $589 = self.name;
                                                                    var $590 = _term$18;
                                                                    return $590;
                                                                case 'Fm.Term.typ':
                                                                    var $591 = _term$18;
                                                                    return $591;
                                                                case 'Fm.Term.all':
                                                                    var $592 = self.eras;
                                                                    var $593 = self.self;
                                                                    var $594 = self.name;
                                                                    var $595 = self.xtyp;
                                                                    var $596 = self.body;
                                                                    var $597 = Fm$Term$ori$($584, Fm$Term$all$($592, $546, $594, $595, $596));
                                                                    return $597;
                                                                case 'Fm.Term.lam':
                                                                    var $598 = self.name;
                                                                    var $599 = self.body;
                                                                    var $600 = _term$18;
                                                                    return $600;
                                                                case 'Fm.Term.app':
                                                                    var $601 = self.func;
                                                                    var $602 = self.argm;
                                                                    var $603 = _term$18;
                                                                    return $603;
                                                                case 'Fm.Term.let':
                                                                    var $604 = self.name;
                                                                    var $605 = self.expr;
                                                                    var $606 = self.body;
                                                                    var $607 = _term$18;
                                                                    return $607;
                                                                case 'Fm.Term.def':
                                                                    var $608 = self.name;
                                                                    var $609 = self.expr;
                                                                    var $610 = self.body;
                                                                    var $611 = _term$18;
                                                                    return $611;
                                                                case 'Fm.Term.ann':
                                                                    var $612 = self.done;
                                                                    var $613 = self.term;
                                                                    var $614 = self.type;
                                                                    var $615 = _term$18;
                                                                    return $615;
                                                                case 'Fm.Term.gol':
                                                                    var $616 = self.name;
                                                                    var $617 = self.dref;
                                                                    var $618 = self.verb;
                                                                    var $619 = _term$18;
                                                                    return $619;
                                                                case 'Fm.Term.hol':
                                                                    var $620 = self.path;
                                                                    var $621 = _term$18;
                                                                    return $621;
                                                                case 'Fm.Term.nat':
                                                                    var $622 = self.natx;
                                                                    var $623 = _term$18;
                                                                    return $623;
                                                                case 'Fm.Term.chr':
                                                                    var $624 = self.chrx;
                                                                    var $625 = _term$18;
                                                                    return $625;
                                                                case 'Fm.Term.str':
                                                                    var $626 = self.strx;
                                                                    var $627 = _term$18;
                                                                    return $627;
                                                                case 'Fm.Term.cse':
                                                                    var $628 = self.path;
                                                                    var $629 = self.expr;
                                                                    var $630 = self.name;
                                                                    var $631 = self.with;
                                                                    var $632 = self.cses;
                                                                    var $633 = self.moti;
                                                                    var $634 = _term$18;
                                                                    return $634;
                                                                case 'Fm.Term.ori':
                                                                    var $635 = self.orig;
                                                                    var $636 = self.expr;
                                                                    var $637 = _term$18;
                                                                    return $637;
                                                            };
                                                        })());
                                                        var $571 = $585;
                                                        break;
                                                };
                                                var $563 = $571;
                                                break;
                                        };
                                        var $555 = $563;
                                        break;
                                };
                                var $547 = $555;
                                break;
                        };
                        var $539 = $547;
                        break;
                };
                var $531 = $539;
                break;
        };
        return $531;
    };
    const Fm$Parser$forall = x0 => x1 => Fm$Parser$forall$(x0, x1);

    function Fm$Term$lam$(_name$1, _body$2) {
        var $638 = ({
            _: 'Fm.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $638;
    };
    const Fm$Term$lam = x0 => x1 => Fm$Term$lam$(x0, x1);

    function Fm$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $640 = _body$2;
                var $639 = $640;
                break;
            case 'List.cons':
                var $641 = self.head;
                var $642 = self.tail;
                var $643 = Fm$Term$lam$($641, (_x$5 => {
                    var $644 = Fm$Parser$make_lambda$($642, _body$2);
                    return $644;
                }));
                var $639 = $643;
                break;
        };
        return $639;
    };
    const Fm$Parser$make_lambda = x0 => x1 => Fm$Parser$make_lambda$(x0, x1);

    function Fm$Parser$lambda$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $646 = self.idx;
                var $647 = self.code;
                var $648 = self.err;
                var $649 = Parser$Reply$error$($646, $647, $648);
                var $645 = $649;
                break;
            case 'Parser.Reply.value':
                var $650 = self.idx;
                var $651 = self.code;
                var $652 = self.val;
                var self = Fm$Parser$text$("(", $650, $651);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $654 = self.idx;
                        var $655 = self.code;
                        var $656 = self.err;
                        var $657 = Parser$Reply$error$($654, $655, $656);
                        var $653 = $657;
                        break;
                    case 'Parser.Reply.value':
                        var $658 = self.idx;
                        var $659 = self.code;
                        var $660 = self.val;
                        var self = Parser$until1$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$name1), $658, $659);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $662 = self.idx;
                                var $663 = self.code;
                                var $664 = self.err;
                                var $665 = Parser$Reply$error$($662, $663, $664);
                                var $661 = $665;
                                break;
                            case 'Parser.Reply.value':
                                var $666 = self.idx;
                                var $667 = self.code;
                                var $668 = self.val;
                                var self = Fm$Parser$term$($666, $667);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $670 = self.idx;
                                        var $671 = self.code;
                                        var $672 = self.err;
                                        var $673 = Parser$Reply$error$($670, $671, $672);
                                        var $669 = $673;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $674 = self.idx;
                                        var $675 = self.code;
                                        var $676 = self.val;
                                        var self = Fm$Parser$stop$($652, $674, $675);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $678 = self.idx;
                                                var $679 = self.code;
                                                var $680 = self.err;
                                                var $681 = Parser$Reply$error$($678, $679, $680);
                                                var $677 = $681;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $682 = self.idx;
                                                var $683 = self.code;
                                                var $684 = self.val;
                                                var _expr$18 = Fm$Parser$make_lambda$($668, $676);
                                                var $685 = Parser$Reply$value$($682, $683, Fm$Term$ori$($684, _expr$18));
                                                var $677 = $685;
                                                break;
                                        };
                                        var $669 = $677;
                                        break;
                                };
                                var $661 = $669;
                                break;
                        };
                        var $653 = $661;
                        break;
                };
                var $645 = $653;
                break;
        };
        return $645;
    };
    const Fm$Parser$lambda = x0 => x1 => Fm$Parser$lambda$(x0, x1);

    function Fm$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $687 = self.idx;
                var $688 = self.code;
                var $689 = self.err;
                var $690 = Parser$Reply$error$($687, $688, $689);
                var $686 = $690;
                break;
            case 'Parser.Reply.value':
                var $691 = self.idx;
                var $692 = self.code;
                var $693 = self.val;
                var self = Fm$Parser$text$("<", $691, $692);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $695 = self.idx;
                        var $696 = self.code;
                        var $697 = self.err;
                        var $698 = Parser$Reply$error$($695, $696, $697);
                        var $694 = $698;
                        break;
                    case 'Parser.Reply.value':
                        var $699 = self.idx;
                        var $700 = self.code;
                        var $701 = self.val;
                        var self = Parser$until1$(Fm$Parser$text(">"), Fm$Parser$item(Fm$Parser$name1), $699, $700);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $703 = self.idx;
                                var $704 = self.code;
                                var $705 = self.err;
                                var $706 = Parser$Reply$error$($703, $704, $705);
                                var $702 = $706;
                                break;
                            case 'Parser.Reply.value':
                                var $707 = self.idx;
                                var $708 = self.code;
                                var $709 = self.val;
                                var self = Fm$Parser$term$($707, $708);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $711 = self.idx;
                                        var $712 = self.code;
                                        var $713 = self.err;
                                        var $714 = Parser$Reply$error$($711, $712, $713);
                                        var $710 = $714;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $715 = self.idx;
                                        var $716 = self.code;
                                        var $717 = self.val;
                                        var self = Fm$Parser$stop$($693, $715, $716);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $719 = self.idx;
                                                var $720 = self.code;
                                                var $721 = self.err;
                                                var $722 = Parser$Reply$error$($719, $720, $721);
                                                var $718 = $722;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $723 = self.idx;
                                                var $724 = self.code;
                                                var $725 = self.val;
                                                var _expr$18 = Fm$Parser$make_lambda$($709, $717);
                                                var $726 = Parser$Reply$value$($723, $724, Fm$Term$ori$($725, _expr$18));
                                                var $718 = $726;
                                                break;
                                        };
                                        var $710 = $718;
                                        break;
                                };
                                var $702 = $710;
                                break;
                        };
                        var $694 = $702;
                        break;
                };
                var $686 = $694;
                break;
        };
        return $686;
    };
    const Fm$Parser$lambda$erased = x0 => x1 => Fm$Parser$lambda$erased$(x0, x1);

    function Fm$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $728 = self.idx;
                var $729 = self.code;
                var $730 = self.err;
                var $731 = Parser$Reply$error$($728, $729, $730);
                var $727 = $731;
                break;
            case 'Parser.Reply.value':
                var $732 = self.idx;
                var $733 = self.code;
                var $734 = self.val;
                var self = Fm$Parser$text$("()", $732, $733);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $736 = self.idx;
                        var $737 = self.code;
                        var $738 = self.err;
                        var $739 = Parser$Reply$error$($736, $737, $738);
                        var $735 = $739;
                        break;
                    case 'Parser.Reply.value':
                        var $740 = self.idx;
                        var $741 = self.code;
                        var $742 = self.val;
                        var self = Fm$Parser$term$($740, $741);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $744 = self.idx;
                                var $745 = self.code;
                                var $746 = self.err;
                                var $747 = Parser$Reply$error$($744, $745, $746);
                                var $743 = $747;
                                break;
                            case 'Parser.Reply.value':
                                var $748 = self.idx;
                                var $749 = self.code;
                                var $750 = self.val;
                                var self = Fm$Parser$stop$($734, $748, $749);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $752 = self.idx;
                                        var $753 = self.code;
                                        var $754 = self.err;
                                        var $755 = Parser$Reply$error$($752, $753, $754);
                                        var $751 = $755;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $756 = self.idx;
                                        var $757 = self.code;
                                        var $758 = self.val;
                                        var _expr$15 = Fm$Term$lam$("", (_x$15 => {
                                            var $760 = $750;
                                            return $760;
                                        }));
                                        var $759 = Parser$Reply$value$($756, $757, Fm$Term$ori$($758, _expr$15));
                                        var $751 = $759;
                                        break;
                                };
                                var $743 = $751;
                                break;
                        };
                        var $735 = $743;
                        break;
                };
                var $727 = $735;
                break;
        };
        return $727;
    };
    const Fm$Parser$lambda$nameless = x0 => x1 => Fm$Parser$lambda$nameless$(x0, x1);

    function Fm$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("(", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $762 = self.idx;
                var $763 = self.code;
                var $764 = self.err;
                var $765 = Parser$Reply$error$($762, $763, $764);
                var $761 = $765;
                break;
            case 'Parser.Reply.value':
                var $766 = self.idx;
                var $767 = self.code;
                var $768 = self.val;
                var self = Fm$Parser$term$($766, $767);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $770 = self.idx;
                        var $771 = self.code;
                        var $772 = self.err;
                        var $773 = Parser$Reply$error$($770, $771, $772);
                        var $769 = $773;
                        break;
                    case 'Parser.Reply.value':
                        var $774 = self.idx;
                        var $775 = self.code;
                        var $776 = self.val;
                        var self = Fm$Parser$text$(")", $774, $775);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $778 = self.idx;
                                var $779 = self.code;
                                var $780 = self.err;
                                var $781 = Parser$Reply$error$($778, $779, $780);
                                var $777 = $781;
                                break;
                            case 'Parser.Reply.value':
                                var $782 = self.idx;
                                var $783 = self.code;
                                var $784 = self.val;
                                var $785 = Parser$Reply$value$($782, $783, $776);
                                var $777 = $785;
                                break;
                        };
                        var $769 = $777;
                        break;
                };
                var $761 = $769;
                break;
        };
        return $761;
    };
    const Fm$Parser$parenthesis = x0 => x1 => Fm$Parser$parenthesis$(x0, x1);

    function Fm$Term$ref$(_name$1) {
        var $786 = ({
            _: 'Fm.Term.ref',
            'name': _name$1
        });
        return $786;
    };
    const Fm$Term$ref = x0 => Fm$Term$ref$(x0);

    function Fm$Term$app$(_func$1, _argm$2) {
        var $787 = ({
            _: 'Fm.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $787;
    };
    const Fm$Term$app = x0 => x1 => Fm$Term$app$(x0, x1);

    function Fm$Term$hol$(_path$1) {
        var $788 = ({
            _: 'Fm.Term.hol',
            'path': _path$1
        });
        return $788;
    };
    const Fm$Term$hol = x0 => Fm$Term$hol$(x0);

    function Fm$Term$let$(_name$1, _expr$2, _body$3) {
        var $789 = ({
            _: 'Fm.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $789;
    };
    const Fm$Term$let = x0 => x1 => x2 => Fm$Term$let$(x0, x1, x2);

    function Fm$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $791 = self.idx;
                var $792 = self.code;
                var $793 = self.err;
                var $794 = Parser$Reply$error$($791, $792, $793);
                var $790 = $794;
                break;
            case 'Parser.Reply.value':
                var $795 = self.idx;
                var $796 = self.code;
                var $797 = self.val;
                var self = Fm$Parser$text$("let ", $795, $796);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $799 = self.idx;
                        var $800 = self.code;
                        var $801 = self.err;
                        var $802 = Parser$Reply$error$($799, $800, $801);
                        var $798 = $802;
                        break;
                    case 'Parser.Reply.value':
                        var $803 = self.idx;
                        var $804 = self.code;
                        var $805 = self.val;
                        var self = Fm$Parser$name1$($803, $804);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $807 = self.idx;
                                var $808 = self.code;
                                var $809 = self.err;
                                var $810 = Parser$Reply$error$($807, $808, $809);
                                var $806 = $810;
                                break;
                            case 'Parser.Reply.value':
                                var $811 = self.idx;
                                var $812 = self.code;
                                var $813 = self.val;
                                var self = Fm$Parser$text$("=", $811, $812);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $815 = self.idx;
                                        var $816 = self.code;
                                        var $817 = self.err;
                                        var $818 = Parser$Reply$error$($815, $816, $817);
                                        var $814 = $818;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $819 = self.idx;
                                        var $820 = self.code;
                                        var $821 = self.val;
                                        var self = Fm$Parser$text$("for ", $819, $820);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $823 = self.idx;
                                                var $824 = self.code;
                                                var $825 = self.err;
                                                var $826 = Parser$Reply$error$($823, $824, $825);
                                                var $822 = $826;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $827 = self.idx;
                                                var $828 = self.code;
                                                var $829 = self.val;
                                                var self = Fm$Parser$name1$($827, $828);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $831 = self.idx;
                                                        var $832 = self.code;
                                                        var $833 = self.err;
                                                        var $834 = Parser$Reply$error$($831, $832, $833);
                                                        var $830 = $834;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $835 = self.idx;
                                                        var $836 = self.code;
                                                        var $837 = self.val;
                                                        var self = Fm$Parser$text$(":", $835, $836);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $839 = self.idx;
                                                                var $840 = self.code;
                                                                var $841 = self.err;
                                                                var $842 = Parser$Reply$error$($839, $840, $841);
                                                                var $838 = $842;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $843 = self.idx;
                                                                var $844 = self.code;
                                                                var $845 = self.val;
                                                                var self = Fm$Parser$text$("U32", $843, $844);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $847 = self.idx;
                                                                        var $848 = self.code;
                                                                        var $849 = self.err;
                                                                        var $850 = Parser$Reply$error$($847, $848, $849);
                                                                        var $846 = $850;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $851 = self.idx;
                                                                        var $852 = self.code;
                                                                        var $853 = self.val;
                                                                        var self = Fm$Parser$text$("=", $851, $852);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $855 = self.idx;
                                                                                var $856 = self.code;
                                                                                var $857 = self.err;
                                                                                var $858 = Parser$Reply$error$($855, $856, $857);
                                                                                var $854 = $858;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $859 = self.idx;
                                                                                var $860 = self.code;
                                                                                var $861 = self.val;
                                                                                var self = Fm$Parser$term$($859, $860);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $863 = self.idx;
                                                                                        var $864 = self.code;
                                                                                        var $865 = self.err;
                                                                                        var $866 = Parser$Reply$error$($863, $864, $865);
                                                                                        var $862 = $866;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $867 = self.idx;
                                                                                        var $868 = self.code;
                                                                                        var $869 = self.val;
                                                                                        var self = Fm$Parser$text$("..", $867, $868);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $871 = self.idx;
                                                                                                var $872 = self.code;
                                                                                                var $873 = self.err;
                                                                                                var $874 = Parser$Reply$error$($871, $872, $873);
                                                                                                var $870 = $874;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $875 = self.idx;
                                                                                                var $876 = self.code;
                                                                                                var $877 = self.val;
                                                                                                var self = Fm$Parser$term$($875, $876);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $879 = self.idx;
                                                                                                        var $880 = self.code;
                                                                                                        var $881 = self.err;
                                                                                                        var $882 = Parser$Reply$error$($879, $880, $881);
                                                                                                        var $878 = $882;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $883 = self.idx;
                                                                                                        var $884 = self.code;
                                                                                                        var $885 = self.val;
                                                                                                        var self = Fm$Parser$text$(":", $883, $884);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $887 = self.idx;
                                                                                                                var $888 = self.code;
                                                                                                                var $889 = self.err;
                                                                                                                var $890 = Parser$Reply$error$($887, $888, $889);
                                                                                                                var $886 = $890;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $891 = self.idx;
                                                                                                                var $892 = self.code;
                                                                                                                var $893 = self.val;
                                                                                                                var self = Fm$Parser$term$($891, $892);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $895 = self.idx;
                                                                                                                        var $896 = self.code;
                                                                                                                        var $897 = self.err;
                                                                                                                        var $898 = Parser$Reply$error$($895, $896, $897);
                                                                                                                        var $894 = $898;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $899 = self.idx;
                                                                                                                        var $900 = self.code;
                                                                                                                        var $901 = self.val;
                                                                                                                        var self = Parser$maybe$(Fm$Parser$text(";"), $899, $900);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $903 = self.idx;
                                                                                                                                var $904 = self.code;
                                                                                                                                var $905 = self.err;
                                                                                                                                var $906 = Parser$Reply$error$($903, $904, $905);
                                                                                                                                var $902 = $906;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $907 = self.idx;
                                                                                                                                var $908 = self.code;
                                                                                                                                var $909 = self.val;
                                                                                                                                var self = Fm$Parser$term$($907, $908);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $911 = self.idx;
                                                                                                                                        var $912 = self.code;
                                                                                                                                        var $913 = self.err;
                                                                                                                                        var $914 = Parser$Reply$error$($911, $912, $913);
                                                                                                                                        var $910 = $914;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $915 = self.idx;
                                                                                                                                        var $916 = self.code;
                                                                                                                                        var $917 = self.val;
                                                                                                                                        var self = Fm$Parser$stop$($797, $915, $916);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $919 = self.idx;
                                                                                                                                                var $920 = self.code;
                                                                                                                                                var $921 = self.err;
                                                                                                                                                var $922 = Parser$Reply$error$($919, $920, $921);
                                                                                                                                                var $918 = $922;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $923 = self.idx;
                                                                                                                                                var $924 = self.code;
                                                                                                                                                var $925 = self.val;
                                                                                                                                                var _term$54 = Fm$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Fm$Term$app$(_term$54, Fm$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Fm$Term$app$(_term$55, Fm$Term$ref$($813));
                                                                                                                                                var _term$57 = Fm$Term$app$(_term$56, $869);
                                                                                                                                                var _term$58 = Fm$Term$app$(_term$57, $885);
                                                                                                                                                var _lamb$59 = Fm$Term$lam$($837, (_e$59 => {
                                                                                                                                                    var $927 = Fm$Term$lam$($813, (_s$60 => {
                                                                                                                                                        var $928 = $901;
                                                                                                                                                        return $928;
                                                                                                                                                    }));
                                                                                                                                                    return $927;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Fm$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Fm$Term$let$($813, _term$60, (_x$61 => {
                                                                                                                                                    var $929 = $917;
                                                                                                                                                    return $929;
                                                                                                                                                }));
                                                                                                                                                var $926 = Parser$Reply$value$($923, $924, Fm$Term$ori$($925, _term$61));
                                                                                                                                                var $918 = $926;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $910 = $918;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $902 = $910;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $894 = $902;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $886 = $894;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $878 = $886;
                                                                                                        break;
                                                                                                };
                                                                                                var $870 = $878;
                                                                                                break;
                                                                                        };
                                                                                        var $862 = $870;
                                                                                        break;
                                                                                };
                                                                                var $854 = $862;
                                                                                break;
                                                                        };
                                                                        var $846 = $854;
                                                                        break;
                                                                };
                                                                var $838 = $846;
                                                                break;
                                                        };
                                                        var $830 = $838;
                                                        break;
                                                };
                                                var $822 = $830;
                                                break;
                                        };
                                        var $814 = $822;
                                        break;
                                };
                                var $806 = $814;
                                break;
                        };
                        var $798 = $806;
                        break;
                };
                var $790 = $798;
                break;
        };
        return $790;
    };
    const Fm$Parser$letforrange$u32 = x0 => x1 => Fm$Parser$letforrange$u32$(x0, x1);

    function Fm$Parser$letforin$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $931 = self.idx;
                var $932 = self.code;
                var $933 = self.err;
                var $934 = Parser$Reply$error$($931, $932, $933);
                var $930 = $934;
                break;
            case 'Parser.Reply.value':
                var $935 = self.idx;
                var $936 = self.code;
                var $937 = self.val;
                var self = Fm$Parser$text$("let ", $935, $936);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $939 = self.idx;
                        var $940 = self.code;
                        var $941 = self.err;
                        var $942 = Parser$Reply$error$($939, $940, $941);
                        var $938 = $942;
                        break;
                    case 'Parser.Reply.value':
                        var $943 = self.idx;
                        var $944 = self.code;
                        var $945 = self.val;
                        var self = Fm$Parser$name1$($943, $944);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $947 = self.idx;
                                var $948 = self.code;
                                var $949 = self.err;
                                var $950 = Parser$Reply$error$($947, $948, $949);
                                var $946 = $950;
                                break;
                            case 'Parser.Reply.value':
                                var $951 = self.idx;
                                var $952 = self.code;
                                var $953 = self.val;
                                var self = Fm$Parser$text$("=", $951, $952);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $955 = self.idx;
                                        var $956 = self.code;
                                        var $957 = self.err;
                                        var $958 = Parser$Reply$error$($955, $956, $957);
                                        var $954 = $958;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $959 = self.idx;
                                        var $960 = self.code;
                                        var $961 = self.val;
                                        var self = Fm$Parser$text$("for ", $959, $960);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $963 = self.idx;
                                                var $964 = self.code;
                                                var $965 = self.err;
                                                var $966 = Parser$Reply$error$($963, $964, $965);
                                                var $962 = $966;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $967 = self.idx;
                                                var $968 = self.code;
                                                var $969 = self.val;
                                                var self = Fm$Parser$name1$($967, $968);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $971 = self.idx;
                                                        var $972 = self.code;
                                                        var $973 = self.err;
                                                        var $974 = Parser$Reply$error$($971, $972, $973);
                                                        var $970 = $974;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $975 = self.idx;
                                                        var $976 = self.code;
                                                        var $977 = self.val;
                                                        var self = Fm$Parser$text$("in", $975, $976);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $979 = self.idx;
                                                                var $980 = self.code;
                                                                var $981 = self.err;
                                                                var $982 = Parser$Reply$error$($979, $980, $981);
                                                                var $978 = $982;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $983 = self.idx;
                                                                var $984 = self.code;
                                                                var $985 = self.val;
                                                                var self = Fm$Parser$term$($983, $984);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $987 = self.idx;
                                                                        var $988 = self.code;
                                                                        var $989 = self.err;
                                                                        var $990 = Parser$Reply$error$($987, $988, $989);
                                                                        var $986 = $990;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $991 = self.idx;
                                                                        var $992 = self.code;
                                                                        var $993 = self.val;
                                                                        var self = Fm$Parser$text$(":", $991, $992);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $995 = self.idx;
                                                                                var $996 = self.code;
                                                                                var $997 = self.err;
                                                                                var $998 = Parser$Reply$error$($995, $996, $997);
                                                                                var $994 = $998;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $999 = self.idx;
                                                                                var $1000 = self.code;
                                                                                var $1001 = self.val;
                                                                                var self = Fm$Parser$term$($999, $1000);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1003 = self.idx;
                                                                                        var $1004 = self.code;
                                                                                        var $1005 = self.err;
                                                                                        var $1006 = Parser$Reply$error$($1003, $1004, $1005);
                                                                                        var $1002 = $1006;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1007 = self.idx;
                                                                                        var $1008 = self.code;
                                                                                        var $1009 = self.val;
                                                                                        var self = Parser$maybe$(Fm$Parser$text(";"), $1007, $1008);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1011 = self.idx;
                                                                                                var $1012 = self.code;
                                                                                                var $1013 = self.err;
                                                                                                var $1014 = Parser$Reply$error$($1011, $1012, $1013);
                                                                                                var $1010 = $1014;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1015 = self.idx;
                                                                                                var $1016 = self.code;
                                                                                                var $1017 = self.val;
                                                                                                var self = Fm$Parser$term$($1015, $1016);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1019 = self.idx;
                                                                                                        var $1020 = self.code;
                                                                                                        var $1021 = self.err;
                                                                                                        var $1022 = Parser$Reply$error$($1019, $1020, $1021);
                                                                                                        var $1018 = $1022;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1023 = self.idx;
                                                                                                        var $1024 = self.code;
                                                                                                        var $1025 = self.val;
                                                                                                        var self = Fm$Parser$stop$($937, $1023, $1024);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1027 = self.idx;
                                                                                                                var $1028 = self.code;
                                                                                                                var $1029 = self.err;
                                                                                                                var $1030 = Parser$Reply$error$($1027, $1028, $1029);
                                                                                                                var $1026 = $1030;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1031 = self.idx;
                                                                                                                var $1032 = self.code;
                                                                                                                var $1033 = self.val;
                                                                                                                var _term$42 = Fm$Term$ref$("List.for");
                                                                                                                var _term$43 = Fm$Term$app$(_term$42, Fm$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Fm$Term$app$(_term$43, $993);
                                                                                                                var _term$45 = Fm$Term$app$(_term$44, Fm$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Fm$Term$app$(_term$45, Fm$Term$ref$($953));
                                                                                                                var _lamb$47 = Fm$Term$lam$($977, (_i$47 => {
                                                                                                                    var $1035 = Fm$Term$lam$($953, (_x$48 => {
                                                                                                                        var $1036 = $1009;
                                                                                                                        return $1036;
                                                                                                                    }));
                                                                                                                    return $1035;
                                                                                                                }));
                                                                                                                var _term$48 = Fm$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Fm$Term$let$($953, _term$48, (_x$49 => {
                                                                                                                    var $1037 = $1025;
                                                                                                                    return $1037;
                                                                                                                }));
                                                                                                                var $1034 = Parser$Reply$value$($1031, $1032, Fm$Term$ori$($1033, _term$49));
                                                                                                                var $1026 = $1034;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1018 = $1026;
                                                                                                        break;
                                                                                                };
                                                                                                var $1010 = $1018;
                                                                                                break;
                                                                                        };
                                                                                        var $1002 = $1010;
                                                                                        break;
                                                                                };
                                                                                var $994 = $1002;
                                                                                break;
                                                                        };
                                                                        var $986 = $994;
                                                                        break;
                                                                };
                                                                var $978 = $986;
                                                                break;
                                                        };
                                                        var $970 = $978;
                                                        break;
                                                };
                                                var $962 = $970;
                                                break;
                                        };
                                        var $954 = $962;
                                        break;
                                };
                                var $946 = $954;
                                break;
                        };
                        var $938 = $946;
                        break;
                };
                var $930 = $938;
                break;
        };
        return $930;
    };
    const Fm$Parser$letforin = x0 => x1 => Fm$Parser$letforin$(x0, x1);

    function Fm$Parser$let$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1039 = self.idx;
                var $1040 = self.code;
                var $1041 = self.err;
                var $1042 = Parser$Reply$error$($1039, $1040, $1041);
                var $1038 = $1042;
                break;
            case 'Parser.Reply.value':
                var $1043 = self.idx;
                var $1044 = self.code;
                var $1045 = self.val;
                var self = Fm$Parser$text$("let ", $1043, $1044);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1047 = self.idx;
                        var $1048 = self.code;
                        var $1049 = self.err;
                        var $1050 = Parser$Reply$error$($1047, $1048, $1049);
                        var $1046 = $1050;
                        break;
                    case 'Parser.Reply.value':
                        var $1051 = self.idx;
                        var $1052 = self.code;
                        var $1053 = self.val;
                        var self = Fm$Parser$name$($1051, $1052);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1055 = self.idx;
                                var $1056 = self.code;
                                var $1057 = self.err;
                                var $1058 = Parser$Reply$error$($1055, $1056, $1057);
                                var $1054 = $1058;
                                break;
                            case 'Parser.Reply.value':
                                var $1059 = self.idx;
                                var $1060 = self.code;
                                var $1061 = self.val;
                                var self = Fm$Parser$text$("=", $1059, $1060);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1063 = self.idx;
                                        var $1064 = self.code;
                                        var $1065 = self.err;
                                        var $1066 = Parser$Reply$error$($1063, $1064, $1065);
                                        var $1062 = $1066;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1067 = self.idx;
                                        var $1068 = self.code;
                                        var $1069 = self.val;
                                        var self = Fm$Parser$term$($1067, $1068);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1071 = self.idx;
                                                var $1072 = self.code;
                                                var $1073 = self.err;
                                                var $1074 = Parser$Reply$error$($1071, $1072, $1073);
                                                var $1070 = $1074;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1075 = self.idx;
                                                var $1076 = self.code;
                                                var $1077 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1075, $1076);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1079 = self.idx;
                                                        var $1080 = self.code;
                                                        var $1081 = self.err;
                                                        var $1082 = Parser$Reply$error$($1079, $1080, $1081);
                                                        var $1078 = $1082;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1083 = self.idx;
                                                        var $1084 = self.code;
                                                        var $1085 = self.val;
                                                        var self = Fm$Parser$term$($1083, $1084);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1087 = self.idx;
                                                                var $1088 = self.code;
                                                                var $1089 = self.err;
                                                                var $1090 = Parser$Reply$error$($1087, $1088, $1089);
                                                                var $1086 = $1090;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1091 = self.idx;
                                                                var $1092 = self.code;
                                                                var $1093 = self.val;
                                                                var self = Fm$Parser$stop$($1045, $1091, $1092);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1095 = self.idx;
                                                                        var $1096 = self.code;
                                                                        var $1097 = self.err;
                                                                        var $1098 = Parser$Reply$error$($1095, $1096, $1097);
                                                                        var $1094 = $1098;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1099 = self.idx;
                                                                        var $1100 = self.code;
                                                                        var $1101 = self.val;
                                                                        var $1102 = Parser$Reply$value$($1099, $1100, Fm$Term$ori$($1101, Fm$Term$let$($1061, $1077, (_x$27 => {
                                                                            var $1103 = $1093;
                                                                            return $1103;
                                                                        }))));
                                                                        var $1094 = $1102;
                                                                        break;
                                                                };
                                                                var $1086 = $1094;
                                                                break;
                                                        };
                                                        var $1078 = $1086;
                                                        break;
                                                };
                                                var $1070 = $1078;
                                                break;
                                        };
                                        var $1062 = $1070;
                                        break;
                                };
                                var $1054 = $1062;
                                break;
                        };
                        var $1046 = $1054;
                        break;
                };
                var $1038 = $1046;
                break;
        };
        return $1038;
    };
    const Fm$Parser$let = x0 => x1 => Fm$Parser$let$(x0, x1);

    function Fm$Parser$get$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1105 = self.idx;
                var $1106 = self.code;
                var $1107 = self.err;
                var $1108 = Parser$Reply$error$($1105, $1106, $1107);
                var $1104 = $1108;
                break;
            case 'Parser.Reply.value':
                var $1109 = self.idx;
                var $1110 = self.code;
                var $1111 = self.val;
                var self = Fm$Parser$text$("let ", $1109, $1110);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1113 = self.idx;
                        var $1114 = self.code;
                        var $1115 = self.err;
                        var $1116 = Parser$Reply$error$($1113, $1114, $1115);
                        var $1112 = $1116;
                        break;
                    case 'Parser.Reply.value':
                        var $1117 = self.idx;
                        var $1118 = self.code;
                        var $1119 = self.val;
                        var self = Fm$Parser$text$("{", $1117, $1118);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1121 = self.idx;
                                var $1122 = self.code;
                                var $1123 = self.err;
                                var $1124 = Parser$Reply$error$($1121, $1122, $1123);
                                var $1120 = $1124;
                                break;
                            case 'Parser.Reply.value':
                                var $1125 = self.idx;
                                var $1126 = self.code;
                                var $1127 = self.val;
                                var self = Fm$Parser$name$($1125, $1126);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1129 = self.idx;
                                        var $1130 = self.code;
                                        var $1131 = self.err;
                                        var $1132 = Parser$Reply$error$($1129, $1130, $1131);
                                        var $1128 = $1132;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1133 = self.idx;
                                        var $1134 = self.code;
                                        var $1135 = self.val;
                                        var self = Fm$Parser$text$(",", $1133, $1134);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1137 = self.idx;
                                                var $1138 = self.code;
                                                var $1139 = self.err;
                                                var $1140 = Parser$Reply$error$($1137, $1138, $1139);
                                                var $1136 = $1140;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1141 = self.idx;
                                                var $1142 = self.code;
                                                var $1143 = self.val;
                                                var self = Fm$Parser$name$($1141, $1142);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1145 = self.idx;
                                                        var $1146 = self.code;
                                                        var $1147 = self.err;
                                                        var $1148 = Parser$Reply$error$($1145, $1146, $1147);
                                                        var $1144 = $1148;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1149 = self.idx;
                                                        var $1150 = self.code;
                                                        var $1151 = self.val;
                                                        var self = Fm$Parser$text$("}", $1149, $1150);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1153 = self.idx;
                                                                var $1154 = self.code;
                                                                var $1155 = self.err;
                                                                var $1156 = Parser$Reply$error$($1153, $1154, $1155);
                                                                var $1152 = $1156;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1157 = self.idx;
                                                                var $1158 = self.code;
                                                                var $1159 = self.val;
                                                                var self = Fm$Parser$text$("=", $1157, $1158);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1161 = self.idx;
                                                                        var $1162 = self.code;
                                                                        var $1163 = self.err;
                                                                        var $1164 = Parser$Reply$error$($1161, $1162, $1163);
                                                                        var $1160 = $1164;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1165 = self.idx;
                                                                        var $1166 = self.code;
                                                                        var $1167 = self.val;
                                                                        var self = Fm$Parser$term$($1165, $1166);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1169 = self.idx;
                                                                                var $1170 = self.code;
                                                                                var $1171 = self.err;
                                                                                var $1172 = Parser$Reply$error$($1169, $1170, $1171);
                                                                                var $1168 = $1172;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1173 = self.idx;
                                                                                var $1174 = self.code;
                                                                                var $1175 = self.val;
                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1173, $1174);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1177 = self.idx;
                                                                                        var $1178 = self.code;
                                                                                        var $1179 = self.err;
                                                                                        var $1180 = Parser$Reply$error$($1177, $1178, $1179);
                                                                                        var $1176 = $1180;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1181 = self.idx;
                                                                                        var $1182 = self.code;
                                                                                        var $1183 = self.val;
                                                                                        var self = Fm$Parser$term$($1181, $1182);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1185 = self.idx;
                                                                                                var $1186 = self.code;
                                                                                                var $1187 = self.err;
                                                                                                var $1188 = Parser$Reply$error$($1185, $1186, $1187);
                                                                                                var $1184 = $1188;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1189 = self.idx;
                                                                                                var $1190 = self.code;
                                                                                                var $1191 = self.val;
                                                                                                var self = Fm$Parser$stop$($1111, $1189, $1190);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1193 = self.idx;
                                                                                                        var $1194 = self.code;
                                                                                                        var $1195 = self.err;
                                                                                                        var $1196 = Parser$Reply$error$($1193, $1194, $1195);
                                                                                                        var $1192 = $1196;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1197 = self.idx;
                                                                                                        var $1198 = self.code;
                                                                                                        var $1199 = self.val;
                                                                                                        var _term$39 = $1175;
                                                                                                        var _term$40 = Fm$Term$app$(_term$39, Fm$Term$lam$("x", (_x$40 => {
                                                                                                            var $1201 = Fm$Term$hol$(Bits$e);
                                                                                                            return $1201;
                                                                                                        })));
                                                                                                        var _term$41 = Fm$Term$app$(_term$40, Fm$Term$lam$($1135, (_x$41 => {
                                                                                                            var $1202 = Fm$Term$lam$($1151, (_y$42 => {
                                                                                                                var $1203 = $1191;
                                                                                                                return $1203;
                                                                                                            }));
                                                                                                            return $1202;
                                                                                                        })));
                                                                                                        var $1200 = Parser$Reply$value$($1197, $1198, Fm$Term$ori$($1199, _term$41));
                                                                                                        var $1192 = $1200;
                                                                                                        break;
                                                                                                };
                                                                                                var $1184 = $1192;
                                                                                                break;
                                                                                        };
                                                                                        var $1176 = $1184;
                                                                                        break;
                                                                                };
                                                                                var $1168 = $1176;
                                                                                break;
                                                                        };
                                                                        var $1160 = $1168;
                                                                        break;
                                                                };
                                                                var $1152 = $1160;
                                                                break;
                                                        };
                                                        var $1144 = $1152;
                                                        break;
                                                };
                                                var $1136 = $1144;
                                                break;
                                        };
                                        var $1128 = $1136;
                                        break;
                                };
                                var $1120 = $1128;
                                break;
                        };
                        var $1112 = $1120;
                        break;
                };
                var $1104 = $1112;
                break;
        };
        return $1104;
    };
    const Fm$Parser$get = x0 => x1 => Fm$Parser$get$(x0, x1);

    function Fm$Term$def$(_name$1, _expr$2, _body$3) {
        var $1204 = ({
            _: 'Fm.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $1204;
    };
    const Fm$Term$def = x0 => x1 => x2 => Fm$Term$def$(x0, x1, x2);

    function Fm$Parser$def$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1206 = self.idx;
                var $1207 = self.code;
                var $1208 = self.err;
                var $1209 = Parser$Reply$error$($1206, $1207, $1208);
                var $1205 = $1209;
                break;
            case 'Parser.Reply.value':
                var $1210 = self.idx;
                var $1211 = self.code;
                var $1212 = self.val;
                var self = Fm$Parser$text$("def ", $1210, $1211);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1214 = self.idx;
                        var $1215 = self.code;
                        var $1216 = self.err;
                        var $1217 = Parser$Reply$error$($1214, $1215, $1216);
                        var $1213 = $1217;
                        break;
                    case 'Parser.Reply.value':
                        var $1218 = self.idx;
                        var $1219 = self.code;
                        var $1220 = self.val;
                        var self = Fm$Parser$name$($1218, $1219);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1222 = self.idx;
                                var $1223 = self.code;
                                var $1224 = self.err;
                                var $1225 = Parser$Reply$error$($1222, $1223, $1224);
                                var $1221 = $1225;
                                break;
                            case 'Parser.Reply.value':
                                var $1226 = self.idx;
                                var $1227 = self.code;
                                var $1228 = self.val;
                                var self = Fm$Parser$text$("=", $1226, $1227);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1230 = self.idx;
                                        var $1231 = self.code;
                                        var $1232 = self.err;
                                        var $1233 = Parser$Reply$error$($1230, $1231, $1232);
                                        var $1229 = $1233;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1234 = self.idx;
                                        var $1235 = self.code;
                                        var $1236 = self.val;
                                        var self = Fm$Parser$term$($1234, $1235);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1238 = self.idx;
                                                var $1239 = self.code;
                                                var $1240 = self.err;
                                                var $1241 = Parser$Reply$error$($1238, $1239, $1240);
                                                var $1237 = $1241;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1242 = self.idx;
                                                var $1243 = self.code;
                                                var $1244 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1242, $1243);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1246 = self.idx;
                                                        var $1247 = self.code;
                                                        var $1248 = self.err;
                                                        var $1249 = Parser$Reply$error$($1246, $1247, $1248);
                                                        var $1245 = $1249;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1250 = self.idx;
                                                        var $1251 = self.code;
                                                        var $1252 = self.val;
                                                        var self = Fm$Parser$term$($1250, $1251);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1254 = self.idx;
                                                                var $1255 = self.code;
                                                                var $1256 = self.err;
                                                                var $1257 = Parser$Reply$error$($1254, $1255, $1256);
                                                                var $1253 = $1257;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1258 = self.idx;
                                                                var $1259 = self.code;
                                                                var $1260 = self.val;
                                                                var self = Fm$Parser$stop$($1212, $1258, $1259);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1262 = self.idx;
                                                                        var $1263 = self.code;
                                                                        var $1264 = self.err;
                                                                        var $1265 = Parser$Reply$error$($1262, $1263, $1264);
                                                                        var $1261 = $1265;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1266 = self.idx;
                                                                        var $1267 = self.code;
                                                                        var $1268 = self.val;
                                                                        var $1269 = Parser$Reply$value$($1266, $1267, Fm$Term$ori$($1268, Fm$Term$def$($1228, $1244, (_x$27 => {
                                                                            var $1270 = $1260;
                                                                            return $1270;
                                                                        }))));
                                                                        var $1261 = $1269;
                                                                        break;
                                                                };
                                                                var $1253 = $1261;
                                                                break;
                                                        };
                                                        var $1245 = $1253;
                                                        break;
                                                };
                                                var $1237 = $1245;
                                                break;
                                        };
                                        var $1229 = $1237;
                                        break;
                                };
                                var $1221 = $1229;
                                break;
                        };
                        var $1213 = $1221;
                        break;
                };
                var $1205 = $1213;
                break;
        };
        return $1205;
    };
    const Fm$Parser$def = x0 => x1 => Fm$Parser$def$(x0, x1);

    function Fm$Parser$if$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1272 = self.idx;
                var $1273 = self.code;
                var $1274 = self.err;
                var $1275 = Parser$Reply$error$($1272, $1273, $1274);
                var $1271 = $1275;
                break;
            case 'Parser.Reply.value':
                var $1276 = self.idx;
                var $1277 = self.code;
                var $1278 = self.val;
                var self = Fm$Parser$text$("if ", $1276, $1277);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1280 = self.idx;
                        var $1281 = self.code;
                        var $1282 = self.err;
                        var $1283 = Parser$Reply$error$($1280, $1281, $1282);
                        var $1279 = $1283;
                        break;
                    case 'Parser.Reply.value':
                        var $1284 = self.idx;
                        var $1285 = self.code;
                        var $1286 = self.val;
                        var self = Fm$Parser$term$($1284, $1285);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1288 = self.idx;
                                var $1289 = self.code;
                                var $1290 = self.err;
                                var $1291 = Parser$Reply$error$($1288, $1289, $1290);
                                var $1287 = $1291;
                                break;
                            case 'Parser.Reply.value':
                                var $1292 = self.idx;
                                var $1293 = self.code;
                                var $1294 = self.val;
                                var self = Fm$Parser$text$("then", $1292, $1293);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1296 = self.idx;
                                        var $1297 = self.code;
                                        var $1298 = self.err;
                                        var $1299 = Parser$Reply$error$($1296, $1297, $1298);
                                        var $1295 = $1299;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1300 = self.idx;
                                        var $1301 = self.code;
                                        var $1302 = self.val;
                                        var self = Fm$Parser$term$($1300, $1301);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1304 = self.idx;
                                                var $1305 = self.code;
                                                var $1306 = self.err;
                                                var $1307 = Parser$Reply$error$($1304, $1305, $1306);
                                                var $1303 = $1307;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1308 = self.idx;
                                                var $1309 = self.code;
                                                var $1310 = self.val;
                                                var self = Fm$Parser$text$("else", $1308, $1309);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1312 = self.idx;
                                                        var $1313 = self.code;
                                                        var $1314 = self.err;
                                                        var $1315 = Parser$Reply$error$($1312, $1313, $1314);
                                                        var $1311 = $1315;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1316 = self.idx;
                                                        var $1317 = self.code;
                                                        var $1318 = self.val;
                                                        var self = Fm$Parser$term$($1316, $1317);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1320 = self.idx;
                                                                var $1321 = self.code;
                                                                var $1322 = self.err;
                                                                var $1323 = Parser$Reply$error$($1320, $1321, $1322);
                                                                var $1319 = $1323;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1324 = self.idx;
                                                                var $1325 = self.code;
                                                                var $1326 = self.val;
                                                                var self = Fm$Parser$stop$($1278, $1324, $1325);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1328 = self.idx;
                                                                        var $1329 = self.code;
                                                                        var $1330 = self.err;
                                                                        var $1331 = Parser$Reply$error$($1328, $1329, $1330);
                                                                        var $1327 = $1331;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1332 = self.idx;
                                                                        var $1333 = self.code;
                                                                        var $1334 = self.val;
                                                                        var _term$27 = $1294;
                                                                        var _term$28 = Fm$Term$app$(_term$27, Fm$Term$lam$("", (_x$28 => {
                                                                            var $1336 = Fm$Term$hol$(Bits$e);
                                                                            return $1336;
                                                                        })));
                                                                        var _term$29 = Fm$Term$app$(_term$28, $1310);
                                                                        var _term$30 = Fm$Term$app$(_term$29, $1326);
                                                                        var $1335 = Parser$Reply$value$($1332, $1333, Fm$Term$ori$($1334, _term$30));
                                                                        var $1327 = $1335;
                                                                        break;
                                                                };
                                                                var $1319 = $1327;
                                                                break;
                                                        };
                                                        var $1311 = $1319;
                                                        break;
                                                };
                                                var $1303 = $1311;
                                                break;
                                        };
                                        var $1295 = $1303;
                                        break;
                                };
                                var $1287 = $1295;
                                break;
                        };
                        var $1279 = $1287;
                        break;
                };
                var $1271 = $1279;
                break;
        };
        return $1271;
    };
    const Fm$Parser$if = x0 => x1 => Fm$Parser$if$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.nil':
                var $1338 = List$nil;
                var $1337 = $1338;
                break;
            case 'List.cons':
                var $1339 = self.head;
                var $1340 = self.tail;
                var $1341 = List$cons$(_f$4($1339), List$mapped$($1340, _f$4));
                var $1337 = $1341;
                break;
        };
        return $1337;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);
    const Fm$backslash = 92;
    const Fm$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Fm$backslash, String$cons$(Fm$backslash, String$nil)), Fm$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Fm$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Fm$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $1343 = self.fst;
                var $1344 = self.snd;
                var $1345 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($1343, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $1347 = self.idx;
                            var $1348 = self.code;
                            var $1349 = self.err;
                            var $1350 = Parser$Reply$error$($1347, $1348, $1349);
                            var $1346 = $1350;
                            break;
                        case 'Parser.Reply.value':
                            var $1351 = self.idx;
                            var $1352 = self.code;
                            var $1353 = self.val;
                            var $1354 = Parser$Reply$value$($1351, $1352, $1344);
                            var $1346 = $1354;
                            break;
                    };
                    return $1346;
                });
                var $1342 = $1345;
                break;
        };
        return $1342;
    }))), List$cons$(Parser$one, List$nil)));

    function Fm$Term$chr$(_chrx$1) {
        var $1355 = ({
            _: 'Fm.Term.chr',
            'chrx': _chrx$1
        });
        return $1355;
    };
    const Fm$Term$chr = x0 => Fm$Term$chr$(x0);

    function Fm$Parser$char$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1357 = self.idx;
                var $1358 = self.code;
                var $1359 = self.err;
                var $1360 = Parser$Reply$error$($1357, $1358, $1359);
                var $1356 = $1360;
                break;
            case 'Parser.Reply.value':
                var $1361 = self.idx;
                var $1362 = self.code;
                var $1363 = self.val;
                var self = Fm$Parser$text$("\'", $1361, $1362);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1365 = self.idx;
                        var $1366 = self.code;
                        var $1367 = self.err;
                        var $1368 = Parser$Reply$error$($1365, $1366, $1367);
                        var $1364 = $1368;
                        break;
                    case 'Parser.Reply.value':
                        var $1369 = self.idx;
                        var $1370 = self.code;
                        var $1371 = self.val;
                        var self = Fm$Parser$char$single($1369)($1370);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1373 = self.idx;
                                var $1374 = self.code;
                                var $1375 = self.err;
                                var $1376 = Parser$Reply$error$($1373, $1374, $1375);
                                var $1372 = $1376;
                                break;
                            case 'Parser.Reply.value':
                                var $1377 = self.idx;
                                var $1378 = self.code;
                                var $1379 = self.val;
                                var self = Parser$text$("\'", $1377, $1378);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1381 = self.idx;
                                        var $1382 = self.code;
                                        var $1383 = self.err;
                                        var $1384 = Parser$Reply$error$($1381, $1382, $1383);
                                        var $1380 = $1384;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1385 = self.idx;
                                        var $1386 = self.code;
                                        var $1387 = self.val;
                                        var self = Fm$Parser$stop$($1363, $1385, $1386);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1389 = self.idx;
                                                var $1390 = self.code;
                                                var $1391 = self.err;
                                                var $1392 = Parser$Reply$error$($1389, $1390, $1391);
                                                var $1388 = $1392;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1393 = self.idx;
                                                var $1394 = self.code;
                                                var $1395 = self.val;
                                                var $1396 = Parser$Reply$value$($1393, $1394, Fm$Term$ori$($1395, Fm$Term$chr$($1379)));
                                                var $1388 = $1396;
                                                break;
                                        };
                                        var $1380 = $1388;
                                        break;
                                };
                                var $1372 = $1380;
                                break;
                        };
                        var $1364 = $1372;
                        break;
                };
                var $1356 = $1364;
                break;
        };
        return $1356;
    };
    const Fm$Parser$char = x0 => x1 => Fm$Parser$char$(x0, x1);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $1397 = _res$2;
                    return $1397;
                } else {
                    var $1398 = self.charCodeAt(0);
                    var $1399 = self.slice(1);
                    var $1400 = String$reverse$go$($1399, String$cons$($1398, _res$2));
                    return $1400;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $1401 = String$reverse$go$(_xs$1, String$nil);
        return $1401;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function Fm$Parser$string$go$(_str$1, _idx$2, _code$3) {
        var Fm$Parser$string$go$ = (_str$1, _idx$2, _code$3) => ({
            ctr: 'TCO',
            arg: [_str$1, _idx$2, _code$3]
        });
        var Fm$Parser$string$go = _str$1 => _idx$2 => _code$3 => Fm$Parser$string$go$(_str$1, _idx$2, _code$3);
        var arg = [_str$1, _idx$2, _code$3];
        while (true) {
            let [_str$1, _idx$2, _code$3] = arg;
            var R = (() => {
                var self = _code$3;
                if (self.length === 0) {
                    var $1402 = Parser$Reply$error$(_idx$2, _code$3, "Non-terminating string.");
                    return $1402;
                } else {
                    var $1403 = self.charCodeAt(0);
                    var $1404 = self.slice(1);
                    var self = ($1403 === 34);
                    if (self) {
                        var $1406 = Parser$Reply$value$(Nat$succ$(_idx$2), $1404, String$reverse$(_str$1));
                        var $1405 = $1406;
                    } else {
                        var self = Fm$Parser$char$single(_idx$2)(_code$3);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1408 = self.idx;
                                var $1409 = self.code;
                                var $1410 = self.err;
                                var $1411 = Parser$Reply$error$($1408, $1409, $1410);
                                var $1407 = $1411;
                                break;
                            case 'Parser.Reply.value':
                                var $1412 = self.idx;
                                var $1413 = self.code;
                                var $1414 = self.val;
                                var $1415 = Fm$Parser$string$go$(String$cons$($1414, _str$1), $1412, $1413);
                                var $1407 = $1415;
                                break;
                        };
                        var $1405 = $1407;
                    };
                    return $1405;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Parser$string$go = x0 => x1 => x2 => Fm$Parser$string$go$(x0, x1, x2);

    function Fm$Term$str$(_strx$1) {
        var $1416 = ({
            _: 'Fm.Term.str',
            'strx': _strx$1
        });
        return $1416;
    };
    const Fm$Term$str = x0 => Fm$Term$str$(x0);

    function Fm$Parser$string$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1418 = self.idx;
                var $1419 = self.code;
                var $1420 = self.err;
                var $1421 = Parser$Reply$error$($1418, $1419, $1420);
                var $1417 = $1421;
                break;
            case 'Parser.Reply.value':
                var $1422 = self.idx;
                var $1423 = self.code;
                var $1424 = self.val;
                var self = Fm$Parser$text$(String$cons$(34, String$nil), $1422, $1423);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1426 = self.idx;
                        var $1427 = self.code;
                        var $1428 = self.err;
                        var $1429 = Parser$Reply$error$($1426, $1427, $1428);
                        var $1425 = $1429;
                        break;
                    case 'Parser.Reply.value':
                        var $1430 = self.idx;
                        var $1431 = self.code;
                        var $1432 = self.val;
                        var self = Fm$Parser$string$go$("", $1430, $1431);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1434 = self.idx;
                                var $1435 = self.code;
                                var $1436 = self.err;
                                var $1437 = Parser$Reply$error$($1434, $1435, $1436);
                                var $1433 = $1437;
                                break;
                            case 'Parser.Reply.value':
                                var $1438 = self.idx;
                                var $1439 = self.code;
                                var $1440 = self.val;
                                var self = Fm$Parser$stop$($1424, $1438, $1439);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1442 = self.idx;
                                        var $1443 = self.code;
                                        var $1444 = self.err;
                                        var $1445 = Parser$Reply$error$($1442, $1443, $1444);
                                        var $1441 = $1445;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1446 = self.idx;
                                        var $1447 = self.code;
                                        var $1448 = self.val;
                                        var $1449 = Parser$Reply$value$($1446, $1447, Fm$Term$ori$($1448, Fm$Term$str$($1440)));
                                        var $1441 = $1449;
                                        break;
                                };
                                var $1433 = $1441;
                                break;
                        };
                        var $1425 = $1433;
                        break;
                };
                var $1417 = $1425;
                break;
        };
        return $1417;
    };
    const Fm$Parser$string = x0 => x1 => Fm$Parser$string$(x0, x1);

    function Fm$Parser$pair$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1451 = self.idx;
                var $1452 = self.code;
                var $1453 = self.err;
                var $1454 = Parser$Reply$error$($1451, $1452, $1453);
                var $1450 = $1454;
                break;
            case 'Parser.Reply.value':
                var $1455 = self.idx;
                var $1456 = self.code;
                var $1457 = self.val;
                var self = Fm$Parser$text$("{", $1455, $1456);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1459 = self.idx;
                        var $1460 = self.code;
                        var $1461 = self.err;
                        var $1462 = Parser$Reply$error$($1459, $1460, $1461);
                        var $1458 = $1462;
                        break;
                    case 'Parser.Reply.value':
                        var $1463 = self.idx;
                        var $1464 = self.code;
                        var $1465 = self.val;
                        var self = Fm$Parser$term$($1463, $1464);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1467 = self.idx;
                                var $1468 = self.code;
                                var $1469 = self.err;
                                var $1470 = Parser$Reply$error$($1467, $1468, $1469);
                                var $1466 = $1470;
                                break;
                            case 'Parser.Reply.value':
                                var $1471 = self.idx;
                                var $1472 = self.code;
                                var $1473 = self.val;
                                var self = Fm$Parser$text$(",", $1471, $1472);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1475 = self.idx;
                                        var $1476 = self.code;
                                        var $1477 = self.err;
                                        var $1478 = Parser$Reply$error$($1475, $1476, $1477);
                                        var $1474 = $1478;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1479 = self.idx;
                                        var $1480 = self.code;
                                        var $1481 = self.val;
                                        var self = Fm$Parser$term$($1479, $1480);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1483 = self.idx;
                                                var $1484 = self.code;
                                                var $1485 = self.err;
                                                var $1486 = Parser$Reply$error$($1483, $1484, $1485);
                                                var $1482 = $1486;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1487 = self.idx;
                                                var $1488 = self.code;
                                                var $1489 = self.val;
                                                var self = Fm$Parser$text$("}", $1487, $1488);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1491 = self.idx;
                                                        var $1492 = self.code;
                                                        var $1493 = self.err;
                                                        var $1494 = Parser$Reply$error$($1491, $1492, $1493);
                                                        var $1490 = $1494;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1495 = self.idx;
                                                        var $1496 = self.code;
                                                        var $1497 = self.val;
                                                        var self = Fm$Parser$stop$($1457, $1495, $1496);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1499 = self.idx;
                                                                var $1500 = self.code;
                                                                var $1501 = self.err;
                                                                var $1502 = Parser$Reply$error$($1499, $1500, $1501);
                                                                var $1498 = $1502;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1503 = self.idx;
                                                                var $1504 = self.code;
                                                                var $1505 = self.val;
                                                                var _term$24 = Fm$Term$ref$("Pair.new");
                                                                var _term$25 = Fm$Term$app$(_term$24, Fm$Term$hol$(Bits$e));
                                                                var _term$26 = Fm$Term$app$(_term$25, Fm$Term$hol$(Bits$e));
                                                                var _term$27 = Fm$Term$app$(_term$26, $1473);
                                                                var _term$28 = Fm$Term$app$(_term$27, $1489);
                                                                var $1506 = Parser$Reply$value$($1503, $1504, Fm$Term$ori$($1505, _term$28));
                                                                var $1498 = $1506;
                                                                break;
                                                        };
                                                        var $1490 = $1498;
                                                        break;
                                                };
                                                var $1482 = $1490;
                                                break;
                                        };
                                        var $1474 = $1482;
                                        break;
                                };
                                var $1466 = $1474;
                                break;
                        };
                        var $1458 = $1466;
                        break;
                };
                var $1450 = $1458;
                break;
        };
        return $1450;
    };
    const Fm$Parser$pair = x0 => x1 => Fm$Parser$pair$(x0, x1);

    function Fm$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1508 = self.idx;
                var $1509 = self.code;
                var $1510 = self.err;
                var $1511 = Parser$Reply$error$($1508, $1509, $1510);
                var $1507 = $1511;
                break;
            case 'Parser.Reply.value':
                var $1512 = self.idx;
                var $1513 = self.code;
                var $1514 = self.val;
                var self = Fm$Parser$text$("{", $1512, $1513);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1516 = self.idx;
                        var $1517 = self.code;
                        var $1518 = self.err;
                        var $1519 = Parser$Reply$error$($1516, $1517, $1518);
                        var $1515 = $1519;
                        break;
                    case 'Parser.Reply.value':
                        var $1520 = self.idx;
                        var $1521 = self.code;
                        var $1522 = self.val;
                        var self = Fm$Parser$name1$($1520, $1521);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1524 = self.idx;
                                var $1525 = self.code;
                                var $1526 = self.err;
                                var $1527 = Parser$Reply$error$($1524, $1525, $1526);
                                var $1523 = $1527;
                                break;
                            case 'Parser.Reply.value':
                                var $1528 = self.idx;
                                var $1529 = self.code;
                                var $1530 = self.val;
                                var self = Fm$Parser$text$(":", $1528, $1529);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1532 = self.idx;
                                        var $1533 = self.code;
                                        var $1534 = self.err;
                                        var $1535 = Parser$Reply$error$($1532, $1533, $1534);
                                        var $1531 = $1535;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1536 = self.idx;
                                        var $1537 = self.code;
                                        var $1538 = self.val;
                                        var self = Fm$Parser$term$($1536, $1537);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1540 = self.idx;
                                                var $1541 = self.code;
                                                var $1542 = self.err;
                                                var $1543 = Parser$Reply$error$($1540, $1541, $1542);
                                                var $1539 = $1543;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1544 = self.idx;
                                                var $1545 = self.code;
                                                var $1546 = self.val;
                                                var self = Fm$Parser$text$("}", $1544, $1545);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1548 = self.idx;
                                                        var $1549 = self.code;
                                                        var $1550 = self.err;
                                                        var $1551 = Parser$Reply$error$($1548, $1549, $1550);
                                                        var $1547 = $1551;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1552 = self.idx;
                                                        var $1553 = self.code;
                                                        var $1554 = self.val;
                                                        var self = Fm$Parser$term$($1552, $1553);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1556 = self.idx;
                                                                var $1557 = self.code;
                                                                var $1558 = self.err;
                                                                var $1559 = Parser$Reply$error$($1556, $1557, $1558);
                                                                var $1555 = $1559;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1560 = self.idx;
                                                                var $1561 = self.code;
                                                                var $1562 = self.val;
                                                                var self = Fm$Parser$stop$($1514, $1560, $1561);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1564 = self.idx;
                                                                        var $1565 = self.code;
                                                                        var $1566 = self.err;
                                                                        var $1567 = Parser$Reply$error$($1564, $1565, $1566);
                                                                        var $1563 = $1567;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1568 = self.idx;
                                                                        var $1569 = self.code;
                                                                        var $1570 = self.val;
                                                                        var _term$27 = Fm$Term$ref$("Sigma");
                                                                        var _term$28 = Fm$Term$app$(_term$27, $1546);
                                                                        var _term$29 = Fm$Term$app$(_term$28, Fm$Term$lam$($1530, (_x$29 => {
                                                                            var $1572 = $1562;
                                                                            return $1572;
                                                                        })));
                                                                        var $1571 = Parser$Reply$value$($1568, $1569, Fm$Term$ori$($1570, _term$29));
                                                                        var $1563 = $1571;
                                                                        break;
                                                                };
                                                                var $1555 = $1563;
                                                                break;
                                                        };
                                                        var $1547 = $1555;
                                                        break;
                                                };
                                                var $1539 = $1547;
                                                break;
                                        };
                                        var $1531 = $1539;
                                        break;
                                };
                                var $1523 = $1531;
                                break;
                        };
                        var $1515 = $1523;
                        break;
                };
                var $1507 = $1515;
                break;
        };
        return $1507;
    };
    const Fm$Parser$sigma$type = x0 => x1 => Fm$Parser$sigma$type$(x0, x1);

    function Fm$Parser$some$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1574 = self.idx;
                var $1575 = self.code;
                var $1576 = self.err;
                var $1577 = Parser$Reply$error$($1574, $1575, $1576);
                var $1573 = $1577;
                break;
            case 'Parser.Reply.value':
                var $1578 = self.idx;
                var $1579 = self.code;
                var $1580 = self.val;
                var self = Fm$Parser$text$("some(", $1578, $1579);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1582 = self.idx;
                        var $1583 = self.code;
                        var $1584 = self.err;
                        var $1585 = Parser$Reply$error$($1582, $1583, $1584);
                        var $1581 = $1585;
                        break;
                    case 'Parser.Reply.value':
                        var $1586 = self.idx;
                        var $1587 = self.code;
                        var $1588 = self.val;
                        var self = Fm$Parser$term$($1586, $1587);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1590 = self.idx;
                                var $1591 = self.code;
                                var $1592 = self.err;
                                var $1593 = Parser$Reply$error$($1590, $1591, $1592);
                                var $1589 = $1593;
                                break;
                            case 'Parser.Reply.value':
                                var $1594 = self.idx;
                                var $1595 = self.code;
                                var $1596 = self.val;
                                var self = Fm$Parser$text$(")", $1594, $1595);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1598 = self.idx;
                                        var $1599 = self.code;
                                        var $1600 = self.err;
                                        var $1601 = Parser$Reply$error$($1598, $1599, $1600);
                                        var $1597 = $1601;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1602 = self.idx;
                                        var $1603 = self.code;
                                        var $1604 = self.val;
                                        var self = Fm$Parser$stop$($1580, $1602, $1603);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1606 = self.idx;
                                                var $1607 = self.code;
                                                var $1608 = self.err;
                                                var $1609 = Parser$Reply$error$($1606, $1607, $1608);
                                                var $1605 = $1609;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1610 = self.idx;
                                                var $1611 = self.code;
                                                var $1612 = self.val;
                                                var _term$18 = Fm$Term$ref$("Maybe.some");
                                                var _term$19 = Fm$Term$app$(_term$18, Fm$Term$hol$(Bits$e));
                                                var _term$20 = Fm$Term$app$(_term$19, $1596);
                                                var $1613 = Parser$Reply$value$($1610, $1611, Fm$Term$ori$($1612, _term$20));
                                                var $1605 = $1613;
                                                break;
                                        };
                                        var $1597 = $1605;
                                        break;
                                };
                                var $1589 = $1597;
                                break;
                        };
                        var $1581 = $1589;
                        break;
                };
                var $1573 = $1581;
                break;
        };
        return $1573;
    };
    const Fm$Parser$some = x0 => x1 => Fm$Parser$some$(x0, x1);

    function Fm$Parser$apply$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1615 = self.idx;
                var $1616 = self.code;
                var $1617 = self.err;
                var $1618 = Parser$Reply$error$($1615, $1616, $1617);
                var $1614 = $1618;
                break;
            case 'Parser.Reply.value':
                var $1619 = self.idx;
                var $1620 = self.code;
                var $1621 = self.val;
                var self = Fm$Parser$text$("apply(", $1619, $1620);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1623 = self.idx;
                        var $1624 = self.code;
                        var $1625 = self.err;
                        var $1626 = Parser$Reply$error$($1623, $1624, $1625);
                        var $1622 = $1626;
                        break;
                    case 'Parser.Reply.value':
                        var $1627 = self.idx;
                        var $1628 = self.code;
                        var $1629 = self.val;
                        var self = Fm$Parser$term$($1627, $1628);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1631 = self.idx;
                                var $1632 = self.code;
                                var $1633 = self.err;
                                var $1634 = Parser$Reply$error$($1631, $1632, $1633);
                                var $1630 = $1634;
                                break;
                            case 'Parser.Reply.value':
                                var $1635 = self.idx;
                                var $1636 = self.code;
                                var $1637 = self.val;
                                var self = Fm$Parser$text$(",", $1635, $1636);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1639 = self.idx;
                                        var $1640 = self.code;
                                        var $1641 = self.err;
                                        var $1642 = Parser$Reply$error$($1639, $1640, $1641);
                                        var $1638 = $1642;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1643 = self.idx;
                                        var $1644 = self.code;
                                        var $1645 = self.val;
                                        var self = Fm$Parser$term$($1643, $1644);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1647 = self.idx;
                                                var $1648 = self.code;
                                                var $1649 = self.err;
                                                var $1650 = Parser$Reply$error$($1647, $1648, $1649);
                                                var $1646 = $1650;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1651 = self.idx;
                                                var $1652 = self.code;
                                                var $1653 = self.val;
                                                var self = Fm$Parser$text$(")", $1651, $1652);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1655 = self.idx;
                                                        var $1656 = self.code;
                                                        var $1657 = self.err;
                                                        var $1658 = Parser$Reply$error$($1655, $1656, $1657);
                                                        var $1654 = $1658;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1659 = self.idx;
                                                        var $1660 = self.code;
                                                        var $1661 = self.val;
                                                        var self = Fm$Parser$stop$($1621, $1659, $1660);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1663 = self.idx;
                                                                var $1664 = self.code;
                                                                var $1665 = self.err;
                                                                var $1666 = Parser$Reply$error$($1663, $1664, $1665);
                                                                var $1662 = $1666;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1667 = self.idx;
                                                                var $1668 = self.code;
                                                                var $1669 = self.val;
                                                                var _term$24 = Fm$Term$ref$("Equal.apply");
                                                                var _term$25 = Fm$Term$app$(_term$24, Fm$Term$hol$(Bits$e));
                                                                var _term$26 = Fm$Term$app$(_term$25, Fm$Term$hol$(Bits$e));
                                                                var _term$27 = Fm$Term$app$(_term$26, Fm$Term$hol$(Bits$e));
                                                                var _term$28 = Fm$Term$app$(_term$27, Fm$Term$hol$(Bits$e));
                                                                var _term$29 = Fm$Term$app$(_term$28, $1637);
                                                                var _term$30 = Fm$Term$app$(_term$29, $1653);
                                                                var $1670 = Parser$Reply$value$($1667, $1668, Fm$Term$ori$($1669, _term$30));
                                                                var $1662 = $1670;
                                                                break;
                                                        };
                                                        var $1654 = $1662;
                                                        break;
                                                };
                                                var $1646 = $1654;
                                                break;
                                        };
                                        var $1638 = $1646;
                                        break;
                                };
                                var $1630 = $1638;
                                break;
                        };
                        var $1622 = $1630;
                        break;
                };
                var $1614 = $1622;
                break;
        };
        return $1614;
    };
    const Fm$Parser$apply = x0 => x1 => Fm$Parser$apply$(x0, x1);

    function Fm$Parser$mirror$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1672 = self.idx;
                var $1673 = self.code;
                var $1674 = self.err;
                var $1675 = Parser$Reply$error$($1672, $1673, $1674);
                var $1671 = $1675;
                break;
            case 'Parser.Reply.value':
                var $1676 = self.idx;
                var $1677 = self.code;
                var $1678 = self.val;
                var self = Fm$Parser$text$("mirror(", $1676, $1677);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1680 = self.idx;
                        var $1681 = self.code;
                        var $1682 = self.err;
                        var $1683 = Parser$Reply$error$($1680, $1681, $1682);
                        var $1679 = $1683;
                        break;
                    case 'Parser.Reply.value':
                        var $1684 = self.idx;
                        var $1685 = self.code;
                        var $1686 = self.val;
                        var self = Fm$Parser$term$($1684, $1685);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1688 = self.idx;
                                var $1689 = self.code;
                                var $1690 = self.err;
                                var $1691 = Parser$Reply$error$($1688, $1689, $1690);
                                var $1687 = $1691;
                                break;
                            case 'Parser.Reply.value':
                                var $1692 = self.idx;
                                var $1693 = self.code;
                                var $1694 = self.val;
                                var self = Fm$Parser$text$(")", $1692, $1693);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1696 = self.idx;
                                        var $1697 = self.code;
                                        var $1698 = self.err;
                                        var $1699 = Parser$Reply$error$($1696, $1697, $1698);
                                        var $1695 = $1699;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1700 = self.idx;
                                        var $1701 = self.code;
                                        var $1702 = self.val;
                                        var self = Fm$Parser$stop$($1678, $1700, $1701);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1704 = self.idx;
                                                var $1705 = self.code;
                                                var $1706 = self.err;
                                                var $1707 = Parser$Reply$error$($1704, $1705, $1706);
                                                var $1703 = $1707;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1708 = self.idx;
                                                var $1709 = self.code;
                                                var $1710 = self.val;
                                                var _term$18 = Fm$Term$ref$("Equal.mirror");
                                                var _term$19 = Fm$Term$app$(_term$18, Fm$Term$hol$(Bits$e));
                                                var _term$20 = Fm$Term$app$(_term$19, Fm$Term$hol$(Bits$e));
                                                var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                var _term$22 = Fm$Term$app$(_term$21, $1694);
                                                var $1711 = Parser$Reply$value$($1708, $1709, Fm$Term$ori$($1710, _term$22));
                                                var $1703 = $1711;
                                                break;
                                        };
                                        var $1695 = $1703;
                                        break;
                                };
                                var $1687 = $1695;
                                break;
                        };
                        var $1679 = $1687;
                        break;
                };
                var $1671 = $1679;
                break;
        };
        return $1671;
    };
    const Fm$Parser$mirror = x0 => x1 => Fm$Parser$mirror$(x0, x1);

    function Fm$Name$read$(_str$1) {
        var $1712 = _str$1;
        return $1712;
    };
    const Fm$Name$read = x0 => Fm$Name$read$(x0);

    function Fm$Parser$list$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1714 = self.idx;
                var $1715 = self.code;
                var $1716 = self.err;
                var $1717 = Parser$Reply$error$($1714, $1715, $1716);
                var $1713 = $1717;
                break;
            case 'Parser.Reply.value':
                var $1718 = self.idx;
                var $1719 = self.code;
                var $1720 = self.val;
                var self = Fm$Parser$text$("[", $1718, $1719);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1722 = self.idx;
                        var $1723 = self.code;
                        var $1724 = self.err;
                        var $1725 = Parser$Reply$error$($1722, $1723, $1724);
                        var $1721 = $1725;
                        break;
                    case 'Parser.Reply.value':
                        var $1726 = self.idx;
                        var $1727 = self.code;
                        var $1728 = self.val;
                        var self = Parser$until$(Fm$Parser$text("]"), Fm$Parser$item(Fm$Parser$term))($1726)($1727);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1730 = self.idx;
                                var $1731 = self.code;
                                var $1732 = self.err;
                                var $1733 = Parser$Reply$error$($1730, $1731, $1732);
                                var $1729 = $1733;
                                break;
                            case 'Parser.Reply.value':
                                var $1734 = self.idx;
                                var $1735 = self.code;
                                var $1736 = self.val;
                                var self = Fm$Parser$stop$($1720, $1734, $1735);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1738 = self.idx;
                                        var $1739 = self.code;
                                        var $1740 = self.err;
                                        var $1741 = Parser$Reply$error$($1738, $1739, $1740);
                                        var $1737 = $1741;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1742 = self.idx;
                                        var $1743 = self.code;
                                        var $1744 = self.val;
                                        var $1745 = Parser$Reply$value$($1742, $1743, List$fold$($1736, Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("List.nil")), Fm$Term$hol$(Bits$e)), (_x$15 => _xs$16 => {
                                            var _term$17 = Fm$Term$ref$(Fm$Name$read$("List.cons"));
                                            var _term$18 = Fm$Term$app$(_term$17, Fm$Term$hol$(Bits$e));
                                            var _term$19 = Fm$Term$app$(_term$18, _x$15);
                                            var _term$20 = Fm$Term$app$(_term$19, _xs$16);
                                            var $1746 = Fm$Term$ori$($1744, _term$20);
                                            return $1746;
                                        })));
                                        var $1737 = $1745;
                                        break;
                                };
                                var $1729 = $1737;
                                break;
                        };
                        var $1721 = $1729;
                        break;
                };
                var $1713 = $1721;
                break;
        };
        return $1713;
    };
    const Fm$Parser$list = x0 => x1 => Fm$Parser$list$(x0, x1);

    function Fm$Parser$log$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1748 = self.idx;
                var $1749 = self.code;
                var $1750 = self.err;
                var $1751 = Parser$Reply$error$($1748, $1749, $1750);
                var $1747 = $1751;
                break;
            case 'Parser.Reply.value':
                var $1752 = self.idx;
                var $1753 = self.code;
                var $1754 = self.val;
                var self = Fm$Parser$text$("log(", $1752, $1753);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1756 = self.idx;
                        var $1757 = self.code;
                        var $1758 = self.err;
                        var $1759 = Parser$Reply$error$($1756, $1757, $1758);
                        var $1755 = $1759;
                        break;
                    case 'Parser.Reply.value':
                        var $1760 = self.idx;
                        var $1761 = self.code;
                        var $1762 = self.val;
                        var self = Parser$until$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$term))($1760)($1761);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1764 = self.idx;
                                var $1765 = self.code;
                                var $1766 = self.err;
                                var $1767 = Parser$Reply$error$($1764, $1765, $1766);
                                var $1763 = $1767;
                                break;
                            case 'Parser.Reply.value':
                                var $1768 = self.idx;
                                var $1769 = self.code;
                                var $1770 = self.val;
                                var self = Fm$Parser$term$($1768, $1769);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1772 = self.idx;
                                        var $1773 = self.code;
                                        var $1774 = self.err;
                                        var $1775 = Parser$Reply$error$($1772, $1773, $1774);
                                        var $1771 = $1775;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1776 = self.idx;
                                        var $1777 = self.code;
                                        var $1778 = self.val;
                                        var _term$15 = Fm$Term$ref$("Debug.log");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($1770, Fm$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Fm$Term$ref$("String.concat");
                                            var _arg$20 = Fm$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Fm$Term$app$(_arg$20, _xs$18);
                                            var $1780 = _arg$21;
                                            return $1780;
                                        }));
                                        var _term$18 = Fm$Term$app$(_term$16, _args$17);
                                        var _term$19 = Fm$Term$app$(_term$18, Fm$Term$lam$("x", (_x$19 => {
                                            var $1781 = $1778;
                                            return $1781;
                                        })));
                                        var self = Fm$Parser$stop$($1754, $1776, $1777);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1782 = self.idx;
                                                var $1783 = self.code;
                                                var $1784 = self.err;
                                                var $1785 = Parser$Reply$error$($1782, $1783, $1784);
                                                var $1779 = $1785;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1786 = self.idx;
                                                var $1787 = self.code;
                                                var $1788 = self.val;
                                                var $1789 = Parser$Reply$value$($1786, $1787, Fm$Term$ori$($1788, _term$19));
                                                var $1779 = $1789;
                                                break;
                                        };
                                        var $1771 = $1779;
                                        break;
                                };
                                var $1763 = $1771;
                                break;
                        };
                        var $1755 = $1763;
                        break;
                };
                var $1747 = $1755;
                break;
        };
        return $1747;
    };
    const Fm$Parser$log = x0 => x1 => Fm$Parser$log$(x0, x1);

    function Fm$Parser$forrange$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1791 = self.idx;
                var $1792 = self.code;
                var $1793 = self.err;
                var $1794 = Parser$Reply$error$($1791, $1792, $1793);
                var $1790 = $1794;
                break;
            case 'Parser.Reply.value':
                var $1795 = self.idx;
                var $1796 = self.code;
                var $1797 = self.val;
                var self = Fm$Parser$text$("for ", $1795, $1796);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1799 = self.idx;
                        var $1800 = self.code;
                        var $1801 = self.err;
                        var $1802 = Parser$Reply$error$($1799, $1800, $1801);
                        var $1798 = $1802;
                        break;
                    case 'Parser.Reply.value':
                        var $1803 = self.idx;
                        var $1804 = self.code;
                        var $1805 = self.val;
                        var self = Fm$Parser$name1$($1803, $1804);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1807 = self.idx;
                                var $1808 = self.code;
                                var $1809 = self.err;
                                var $1810 = Parser$Reply$error$($1807, $1808, $1809);
                                var $1806 = $1810;
                                break;
                            case 'Parser.Reply.value':
                                var $1811 = self.idx;
                                var $1812 = self.code;
                                var $1813 = self.val;
                                var self = Fm$Parser$text$(":", $1811, $1812);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1815 = self.idx;
                                        var $1816 = self.code;
                                        var $1817 = self.err;
                                        var $1818 = Parser$Reply$error$($1815, $1816, $1817);
                                        var $1814 = $1818;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1819 = self.idx;
                                        var $1820 = self.code;
                                        var $1821 = self.val;
                                        var self = Fm$Parser$text$("U32", $1819, $1820);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1823 = self.idx;
                                                var $1824 = self.code;
                                                var $1825 = self.err;
                                                var $1826 = Parser$Reply$error$($1823, $1824, $1825);
                                                var $1822 = $1826;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1827 = self.idx;
                                                var $1828 = self.code;
                                                var $1829 = self.val;
                                                var self = Fm$Parser$text$("=", $1827, $1828);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1831 = self.idx;
                                                        var $1832 = self.code;
                                                        var $1833 = self.err;
                                                        var $1834 = Parser$Reply$error$($1831, $1832, $1833);
                                                        var $1830 = $1834;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1835 = self.idx;
                                                        var $1836 = self.code;
                                                        var $1837 = self.val;
                                                        var self = Fm$Parser$term$($1835, $1836);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1839 = self.idx;
                                                                var $1840 = self.code;
                                                                var $1841 = self.err;
                                                                var $1842 = Parser$Reply$error$($1839, $1840, $1841);
                                                                var $1838 = $1842;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1843 = self.idx;
                                                                var $1844 = self.code;
                                                                var $1845 = self.val;
                                                                var self = Fm$Parser$text$("..", $1843, $1844);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1847 = self.idx;
                                                                        var $1848 = self.code;
                                                                        var $1849 = self.err;
                                                                        var $1850 = Parser$Reply$error$($1847, $1848, $1849);
                                                                        var $1846 = $1850;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1851 = self.idx;
                                                                        var $1852 = self.code;
                                                                        var $1853 = self.val;
                                                                        var self = Fm$Parser$term$($1851, $1852);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1855 = self.idx;
                                                                                var $1856 = self.code;
                                                                                var $1857 = self.err;
                                                                                var $1858 = Parser$Reply$error$($1855, $1856, $1857);
                                                                                var $1854 = $1858;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1859 = self.idx;
                                                                                var $1860 = self.code;
                                                                                var $1861 = self.val;
                                                                                var self = Fm$Parser$text$("with", $1859, $1860);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1863 = self.idx;
                                                                                        var $1864 = self.code;
                                                                                        var $1865 = self.err;
                                                                                        var $1866 = Parser$Reply$error$($1863, $1864, $1865);
                                                                                        var $1862 = $1866;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1867 = self.idx;
                                                                                        var $1868 = self.code;
                                                                                        var $1869 = self.val;
                                                                                        var self = Fm$Parser$name1$($1867, $1868);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1871 = self.idx;
                                                                                                var $1872 = self.code;
                                                                                                var $1873 = self.err;
                                                                                                var $1874 = Parser$Reply$error$($1871, $1872, $1873);
                                                                                                var $1870 = $1874;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1875 = self.idx;
                                                                                                var $1876 = self.code;
                                                                                                var $1877 = self.val;
                                                                                                var self = Fm$Parser$text$(":", $1875, $1876);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1879 = self.idx;
                                                                                                        var $1880 = self.code;
                                                                                                        var $1881 = self.err;
                                                                                                        var $1882 = Parser$Reply$error$($1879, $1880, $1881);
                                                                                                        var $1878 = $1882;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1883 = self.idx;
                                                                                                        var $1884 = self.code;
                                                                                                        var $1885 = self.val;
                                                                                                        var self = Fm$Parser$term$($1883, $1884);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1887 = self.idx;
                                                                                                                var $1888 = self.code;
                                                                                                                var $1889 = self.err;
                                                                                                                var $1890 = Parser$Reply$error$($1887, $1888, $1889);
                                                                                                                var $1886 = $1890;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1891 = self.idx;
                                                                                                                var $1892 = self.code;
                                                                                                                var $1893 = self.val;
                                                                                                                var self = Fm$Parser$stop$($1797, $1891, $1892);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1895 = self.idx;
                                                                                                                        var $1896 = self.code;
                                                                                                                        var $1897 = self.err;
                                                                                                                        var $1898 = Parser$Reply$error$($1895, $1896, $1897);
                                                                                                                        var $1894 = $1898;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1899 = self.idx;
                                                                                                                        var $1900 = self.code;
                                                                                                                        var $1901 = self.val;
                                                                                                                        var _term$45 = Fm$Term$ref$("U32.for");
                                                                                                                        var _term$46 = Fm$Term$app$(_term$45, Fm$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Fm$Term$app$(_term$46, Fm$Term$ref$($1877));
                                                                                                                        var _term$48 = Fm$Term$app$(_term$47, $1845);
                                                                                                                        var _term$49 = Fm$Term$app$(_term$48, $1861);
                                                                                                                        var _lamb$50 = Fm$Term$lam$($1813, (_e$50 => {
                                                                                                                            var $1903 = Fm$Term$lam$($1877, (_s$51 => {
                                                                                                                                var $1904 = $1893;
                                                                                                                                return $1904;
                                                                                                                            }));
                                                                                                                            return $1903;
                                                                                                                        }));
                                                                                                                        var _term$51 = Fm$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Fm$Term$let$($1877, _term$51, (_x$52 => {
                                                                                                                            var $1905 = Fm$Term$ref$($1877);
                                                                                                                            return $1905;
                                                                                                                        }));
                                                                                                                        var $1902 = Parser$Reply$value$($1899, $1900, Fm$Term$ori$($1901, _term$52));
                                                                                                                        var $1894 = $1902;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1886 = $1894;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1878 = $1886;
                                                                                                        break;
                                                                                                };
                                                                                                var $1870 = $1878;
                                                                                                break;
                                                                                        };
                                                                                        var $1862 = $1870;
                                                                                        break;
                                                                                };
                                                                                var $1854 = $1862;
                                                                                break;
                                                                        };
                                                                        var $1846 = $1854;
                                                                        break;
                                                                };
                                                                var $1838 = $1846;
                                                                break;
                                                        };
                                                        var $1830 = $1838;
                                                        break;
                                                };
                                                var $1822 = $1830;
                                                break;
                                        };
                                        var $1814 = $1822;
                                        break;
                                };
                                var $1806 = $1814;
                                break;
                        };
                        var $1798 = $1806;
                        break;
                };
                var $1790 = $1798;
                break;
        };
        return $1790;
    };
    const Fm$Parser$forrange$u32 = x0 => x1 => Fm$Parser$forrange$u32$(x0, x1);

    function Fm$Parser$forrange$u32$2$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1907 = self.idx;
                var $1908 = self.code;
                var $1909 = self.err;
                var $1910 = Parser$Reply$error$($1907, $1908, $1909);
                var $1906 = $1910;
                break;
            case 'Parser.Reply.value':
                var $1911 = self.idx;
                var $1912 = self.code;
                var $1913 = self.val;
                var self = Fm$Parser$text$("for ", $1911, $1912);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1915 = self.idx;
                        var $1916 = self.code;
                        var $1917 = self.err;
                        var $1918 = Parser$Reply$error$($1915, $1916, $1917);
                        var $1914 = $1918;
                        break;
                    case 'Parser.Reply.value':
                        var $1919 = self.idx;
                        var $1920 = self.code;
                        var $1921 = self.val;
                        var self = Fm$Parser$name1$($1919, $1920);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1923 = self.idx;
                                var $1924 = self.code;
                                var $1925 = self.err;
                                var $1926 = Parser$Reply$error$($1923, $1924, $1925);
                                var $1922 = $1926;
                                break;
                            case 'Parser.Reply.value':
                                var $1927 = self.idx;
                                var $1928 = self.code;
                                var $1929 = self.val;
                                var self = Fm$Parser$text$(":", $1927, $1928);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1931 = self.idx;
                                        var $1932 = self.code;
                                        var $1933 = self.err;
                                        var $1934 = Parser$Reply$error$($1931, $1932, $1933);
                                        var $1930 = $1934;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1935 = self.idx;
                                        var $1936 = self.code;
                                        var $1937 = self.val;
                                        var self = Fm$Parser$text$("U32", $1935, $1936);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1939 = self.idx;
                                                var $1940 = self.code;
                                                var $1941 = self.err;
                                                var $1942 = Parser$Reply$error$($1939, $1940, $1941);
                                                var $1938 = $1942;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1943 = self.idx;
                                                var $1944 = self.code;
                                                var $1945 = self.val;
                                                var self = Fm$Parser$text$("=", $1943, $1944);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1947 = self.idx;
                                                        var $1948 = self.code;
                                                        var $1949 = self.err;
                                                        var $1950 = Parser$Reply$error$($1947, $1948, $1949);
                                                        var $1946 = $1950;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1951 = self.idx;
                                                        var $1952 = self.code;
                                                        var $1953 = self.val;
                                                        var self = Fm$Parser$term$($1951, $1952);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1955 = self.idx;
                                                                var $1956 = self.code;
                                                                var $1957 = self.err;
                                                                var $1958 = Parser$Reply$error$($1955, $1956, $1957);
                                                                var $1954 = $1958;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1959 = self.idx;
                                                                var $1960 = self.code;
                                                                var $1961 = self.val;
                                                                var self = Fm$Parser$text$("..", $1959, $1960);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1963 = self.idx;
                                                                        var $1964 = self.code;
                                                                        var $1965 = self.err;
                                                                        var $1966 = Parser$Reply$error$($1963, $1964, $1965);
                                                                        var $1962 = $1966;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1967 = self.idx;
                                                                        var $1968 = self.code;
                                                                        var $1969 = self.val;
                                                                        var self = Fm$Parser$term$($1967, $1968);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1971 = self.idx;
                                                                                var $1972 = self.code;
                                                                                var $1973 = self.err;
                                                                                var $1974 = Parser$Reply$error$($1971, $1972, $1973);
                                                                                var $1970 = $1974;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1975 = self.idx;
                                                                                var $1976 = self.code;
                                                                                var $1977 = self.val;
                                                                                var self = Fm$Parser$text$(":", $1975, $1976);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1979 = self.idx;
                                                                                        var $1980 = self.code;
                                                                                        var $1981 = self.err;
                                                                                        var $1982 = Parser$Reply$error$($1979, $1980, $1981);
                                                                                        var $1978 = $1982;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1983 = self.idx;
                                                                                        var $1984 = self.code;
                                                                                        var $1985 = self.val;
                                                                                        var self = Fm$Parser$name1$($1983, $1984);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1987 = self.idx;
                                                                                                var $1988 = self.code;
                                                                                                var $1989 = self.err;
                                                                                                var $1990 = Parser$Reply$error$($1987, $1988, $1989);
                                                                                                var $1986 = $1990;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1991 = self.idx;
                                                                                                var $1992 = self.code;
                                                                                                var $1993 = self.val;
                                                                                                var self = Fm$Parser$text$("=", $1991, $1992);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1995 = self.idx;
                                                                                                        var $1996 = self.code;
                                                                                                        var $1997 = self.err;
                                                                                                        var $1998 = Parser$Reply$error$($1995, $1996, $1997);
                                                                                                        var $1994 = $1998;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1999 = self.idx;
                                                                                                        var $2000 = self.code;
                                                                                                        var $2001 = self.val;
                                                                                                        var self = Fm$Parser$term$($1999, $2000);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2003 = self.idx;
                                                                                                                var $2004 = self.code;
                                                                                                                var $2005 = self.err;
                                                                                                                var $2006 = Parser$Reply$error$($2003, $2004, $2005);
                                                                                                                var $2002 = $2006;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2007 = self.idx;
                                                                                                                var $2008 = self.code;
                                                                                                                var $2009 = self.val;
                                                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $2007, $2008);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $2011 = self.idx;
                                                                                                                        var $2012 = self.code;
                                                                                                                        var $2013 = self.err;
                                                                                                                        var $2014 = Parser$Reply$error$($2011, $2012, $2013);
                                                                                                                        var $2010 = $2014;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2015 = self.idx;
                                                                                                                        var $2016 = self.code;
                                                                                                                        var $2017 = self.val;
                                                                                                                        var self = Fm$Parser$term$($2015, $2016);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $2019 = self.idx;
                                                                                                                                var $2020 = self.code;
                                                                                                                                var $2021 = self.err;
                                                                                                                                var $2022 = Parser$Reply$error$($2019, $2020, $2021);
                                                                                                                                var $2018 = $2022;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $2023 = self.idx;
                                                                                                                                var $2024 = self.code;
                                                                                                                                var $2025 = self.val;
                                                                                                                                var self = Fm$Parser$stop$($1913, $2023, $2024);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $2027 = self.idx;
                                                                                                                                        var $2028 = self.code;
                                                                                                                                        var $2029 = self.err;
                                                                                                                                        var $2030 = Parser$Reply$error$($2027, $2028, $2029);
                                                                                                                                        var $2026 = $2030;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $2031 = self.idx;
                                                                                                                                        var $2032 = self.code;
                                                                                                                                        var $2033 = self.val;
                                                                                                                                        var _term$51 = Fm$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Fm$Term$app$(_term$51, Fm$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Fm$Term$app$(_term$52, Fm$Term$ref$($1993));
                                                                                                                                        var _term$54 = Fm$Term$app$(_term$53, $1961);
                                                                                                                                        var _term$55 = Fm$Term$app$(_term$54, $1977);
                                                                                                                                        var _lamb$56 = Fm$Term$lam$($1929, (_e$56 => {
                                                                                                                                            var $2035 = Fm$Term$lam$($1993, (_s$57 => {
                                                                                                                                                var $2036 = $2009;
                                                                                                                                                return $2036;
                                                                                                                                            }));
                                                                                                                                            return $2035;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Fm$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Fm$Term$let$($1993, _term$57, (_x$58 => {
                                                                                                                                            var $2037 = $2025;
                                                                                                                                            return $2037;
                                                                                                                                        }));
                                                                                                                                        var $2034 = Parser$Reply$value$($2031, $2032, Fm$Term$ori$($2033, _term$58));
                                                                                                                                        var $2026 = $2034;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $2018 = $2026;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $2010 = $2018;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $2002 = $2010;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1994 = $2002;
                                                                                                        break;
                                                                                                };
                                                                                                var $1986 = $1994;
                                                                                                break;
                                                                                        };
                                                                                        var $1978 = $1986;
                                                                                        break;
                                                                                };
                                                                                var $1970 = $1978;
                                                                                break;
                                                                        };
                                                                        var $1962 = $1970;
                                                                        break;
                                                                };
                                                                var $1954 = $1962;
                                                                break;
                                                        };
                                                        var $1946 = $1954;
                                                        break;
                                                };
                                                var $1938 = $1946;
                                                break;
                                        };
                                        var $1930 = $1938;
                                        break;
                                };
                                var $1922 = $1930;
                                break;
                        };
                        var $1914 = $1922;
                        break;
                };
                var $1906 = $1914;
                break;
        };
        return $1906;
    };
    const Fm$Parser$forrange$u32$2 = x0 => x1 => Fm$Parser$forrange$u32$2$(x0, x1);

    function Fm$Parser$forin$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2039 = self.idx;
                var $2040 = self.code;
                var $2041 = self.err;
                var $2042 = Parser$Reply$error$($2039, $2040, $2041);
                var $2038 = $2042;
                break;
            case 'Parser.Reply.value':
                var $2043 = self.idx;
                var $2044 = self.code;
                var $2045 = self.val;
                var self = Fm$Parser$text$("for ", $2043, $2044);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2047 = self.idx;
                        var $2048 = self.code;
                        var $2049 = self.err;
                        var $2050 = Parser$Reply$error$($2047, $2048, $2049);
                        var $2046 = $2050;
                        break;
                    case 'Parser.Reply.value':
                        var $2051 = self.idx;
                        var $2052 = self.code;
                        var $2053 = self.val;
                        var self = Fm$Parser$name1$($2051, $2052);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2055 = self.idx;
                                var $2056 = self.code;
                                var $2057 = self.err;
                                var $2058 = Parser$Reply$error$($2055, $2056, $2057);
                                var $2054 = $2058;
                                break;
                            case 'Parser.Reply.value':
                                var $2059 = self.idx;
                                var $2060 = self.code;
                                var $2061 = self.val;
                                var self = Fm$Parser$text$("in", $2059, $2060);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2063 = self.idx;
                                        var $2064 = self.code;
                                        var $2065 = self.err;
                                        var $2066 = Parser$Reply$error$($2063, $2064, $2065);
                                        var $2062 = $2066;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2067 = self.idx;
                                        var $2068 = self.code;
                                        var $2069 = self.val;
                                        var self = Fm$Parser$term$($2067, $2068);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2071 = self.idx;
                                                var $2072 = self.code;
                                                var $2073 = self.err;
                                                var $2074 = Parser$Reply$error$($2071, $2072, $2073);
                                                var $2070 = $2074;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2075 = self.idx;
                                                var $2076 = self.code;
                                                var $2077 = self.val;
                                                var self = Fm$Parser$text$("with", $2075, $2076);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2079 = self.idx;
                                                        var $2080 = self.code;
                                                        var $2081 = self.err;
                                                        var $2082 = Parser$Reply$error$($2079, $2080, $2081);
                                                        var $2078 = $2082;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2083 = self.idx;
                                                        var $2084 = self.code;
                                                        var $2085 = self.val;
                                                        var self = Fm$Parser$name1$($2083, $2084);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2087 = self.idx;
                                                                var $2088 = self.code;
                                                                var $2089 = self.err;
                                                                var $2090 = Parser$Reply$error$($2087, $2088, $2089);
                                                                var $2086 = $2090;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2091 = self.idx;
                                                                var $2092 = self.code;
                                                                var $2093 = self.val;
                                                                var self = Fm$Parser$text$(":", $2091, $2092);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2095 = self.idx;
                                                                        var $2096 = self.code;
                                                                        var $2097 = self.err;
                                                                        var $2098 = Parser$Reply$error$($2095, $2096, $2097);
                                                                        var $2094 = $2098;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2099 = self.idx;
                                                                        var $2100 = self.code;
                                                                        var $2101 = self.val;
                                                                        var self = Fm$Parser$term$($2099, $2100);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2103 = self.idx;
                                                                                var $2104 = self.code;
                                                                                var $2105 = self.err;
                                                                                var $2106 = Parser$Reply$error$($2103, $2104, $2105);
                                                                                var $2102 = $2106;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2107 = self.idx;
                                                                                var $2108 = self.code;
                                                                                var $2109 = self.val;
                                                                                var self = Fm$Parser$stop$($2045, $2107, $2108);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2111 = self.idx;
                                                                                        var $2112 = self.code;
                                                                                        var $2113 = self.err;
                                                                                        var $2114 = Parser$Reply$error$($2111, $2112, $2113);
                                                                                        var $2110 = $2114;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2115 = self.idx;
                                                                                        var $2116 = self.code;
                                                                                        var $2117 = self.val;
                                                                                        var _term$33 = Fm$Term$ref$("List.for");
                                                                                        var _term$34 = Fm$Term$app$(_term$33, Fm$Term$hol$(Bits$e));
                                                                                        var _term$35 = Fm$Term$app$(_term$34, $2077);
                                                                                        var _term$36 = Fm$Term$app$(_term$35, Fm$Term$hol$(Bits$e));
                                                                                        var _term$37 = Fm$Term$app$(_term$36, Fm$Term$ref$($2093));
                                                                                        var _lamb$38 = Fm$Term$lam$($2061, (_i$38 => {
                                                                                            var $2119 = Fm$Term$lam$($2093, (_x$39 => {
                                                                                                var $2120 = $2109;
                                                                                                return $2120;
                                                                                            }));
                                                                                            return $2119;
                                                                                        }));
                                                                                        var _term$39 = Fm$Term$app$(_term$37, _lamb$38);
                                                                                        var _term$40 = Fm$Term$let$($2093, _term$39, (_x$40 => {
                                                                                            var $2121 = Fm$Term$ref$($2093);
                                                                                            return $2121;
                                                                                        }));
                                                                                        var $2118 = Parser$Reply$value$($2115, $2116, Fm$Term$ori$($2117, _term$40));
                                                                                        var $2110 = $2118;
                                                                                        break;
                                                                                };
                                                                                var $2102 = $2110;
                                                                                break;
                                                                        };
                                                                        var $2094 = $2102;
                                                                        break;
                                                                };
                                                                var $2086 = $2094;
                                                                break;
                                                        };
                                                        var $2078 = $2086;
                                                        break;
                                                };
                                                var $2070 = $2078;
                                                break;
                                        };
                                        var $2062 = $2070;
                                        break;
                                };
                                var $2054 = $2062;
                                break;
                        };
                        var $2046 = $2054;
                        break;
                };
                var $2038 = $2046;
                break;
        };
        return $2038;
    };
    const Fm$Parser$forin = x0 => x1 => Fm$Parser$forin$(x0, x1);

    function Fm$Parser$forin$2$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2123 = self.idx;
                var $2124 = self.code;
                var $2125 = self.err;
                var $2126 = Parser$Reply$error$($2123, $2124, $2125);
                var $2122 = $2126;
                break;
            case 'Parser.Reply.value':
                var $2127 = self.idx;
                var $2128 = self.code;
                var $2129 = self.val;
                var self = Fm$Parser$text$("for ", $2127, $2128);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2131 = self.idx;
                        var $2132 = self.code;
                        var $2133 = self.err;
                        var $2134 = Parser$Reply$error$($2131, $2132, $2133);
                        var $2130 = $2134;
                        break;
                    case 'Parser.Reply.value':
                        var $2135 = self.idx;
                        var $2136 = self.code;
                        var $2137 = self.val;
                        var self = Fm$Parser$name1$($2135, $2136);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2139 = self.idx;
                                var $2140 = self.code;
                                var $2141 = self.err;
                                var $2142 = Parser$Reply$error$($2139, $2140, $2141);
                                var $2138 = $2142;
                                break;
                            case 'Parser.Reply.value':
                                var $2143 = self.idx;
                                var $2144 = self.code;
                                var $2145 = self.val;
                                var self = Fm$Parser$text$("in", $2143, $2144);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2147 = self.idx;
                                        var $2148 = self.code;
                                        var $2149 = self.err;
                                        var $2150 = Parser$Reply$error$($2147, $2148, $2149);
                                        var $2146 = $2150;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2151 = self.idx;
                                        var $2152 = self.code;
                                        var $2153 = self.val;
                                        var self = Fm$Parser$term$($2151, $2152);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2155 = self.idx;
                                                var $2156 = self.code;
                                                var $2157 = self.err;
                                                var $2158 = Parser$Reply$error$($2155, $2156, $2157);
                                                var $2154 = $2158;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2159 = self.idx;
                                                var $2160 = self.code;
                                                var $2161 = self.val;
                                                var self = Fm$Parser$text$(":", $2159, $2160);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2163 = self.idx;
                                                        var $2164 = self.code;
                                                        var $2165 = self.err;
                                                        var $2166 = Parser$Reply$error$($2163, $2164, $2165);
                                                        var $2162 = $2166;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2167 = self.idx;
                                                        var $2168 = self.code;
                                                        var $2169 = self.val;
                                                        var self = Fm$Parser$name1$($2167, $2168);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2171 = self.idx;
                                                                var $2172 = self.code;
                                                                var $2173 = self.err;
                                                                var $2174 = Parser$Reply$error$($2171, $2172, $2173);
                                                                var $2170 = $2174;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2175 = self.idx;
                                                                var $2176 = self.code;
                                                                var $2177 = self.val;
                                                                var self = Fm$Parser$text$("=", $2175, $2176);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2179 = self.idx;
                                                                        var $2180 = self.code;
                                                                        var $2181 = self.err;
                                                                        var $2182 = Parser$Reply$error$($2179, $2180, $2181);
                                                                        var $2178 = $2182;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2183 = self.idx;
                                                                        var $2184 = self.code;
                                                                        var $2185 = self.val;
                                                                        var self = Fm$Parser$term$($2183, $2184);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2187 = self.idx;
                                                                                var $2188 = self.code;
                                                                                var $2189 = self.err;
                                                                                var $2190 = Parser$Reply$error$($2187, $2188, $2189);
                                                                                var $2186 = $2190;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2191 = self.idx;
                                                                                var $2192 = self.code;
                                                                                var $2193 = self.val;
                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $2191, $2192);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2195 = self.idx;
                                                                                        var $2196 = self.code;
                                                                                        var $2197 = self.err;
                                                                                        var $2198 = Parser$Reply$error$($2195, $2196, $2197);
                                                                                        var $2194 = $2198;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2199 = self.idx;
                                                                                        var $2200 = self.code;
                                                                                        var $2201 = self.val;
                                                                                        var self = Fm$Parser$term$($2199, $2200);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2203 = self.idx;
                                                                                                var $2204 = self.code;
                                                                                                var $2205 = self.err;
                                                                                                var $2206 = Parser$Reply$error$($2203, $2204, $2205);
                                                                                                var $2202 = $2206;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2207 = self.idx;
                                                                                                var $2208 = self.code;
                                                                                                var $2209 = self.val;
                                                                                                var self = Fm$Parser$stop$($2129, $2207, $2208);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2211 = self.idx;
                                                                                                        var $2212 = self.code;
                                                                                                        var $2213 = self.err;
                                                                                                        var $2214 = Parser$Reply$error$($2211, $2212, $2213);
                                                                                                        var $2210 = $2214;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2215 = self.idx;
                                                                                                        var $2216 = self.code;
                                                                                                        var $2217 = self.val;
                                                                                                        var _term$39 = Fm$Term$ref$("List.for");
                                                                                                        var _term$40 = Fm$Term$app$(_term$39, Fm$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Fm$Term$app$(_term$40, $2161);
                                                                                                        var _term$42 = Fm$Term$app$(_term$41, Fm$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Fm$Term$app$(_term$42, Fm$Term$ref$($2177));
                                                                                                        var _lamb$44 = Fm$Term$lam$($2145, (_i$44 => {
                                                                                                            var $2219 = Fm$Term$lam$($2177, (_x$45 => {
                                                                                                                var $2220 = $2193;
                                                                                                                return $2220;
                                                                                                            }));
                                                                                                            return $2219;
                                                                                                        }));
                                                                                                        var _term$45 = Fm$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Fm$Term$let$($2177, _term$45, (_x$46 => {
                                                                                                            var $2221 = $2209;
                                                                                                            return $2221;
                                                                                                        }));
                                                                                                        var $2218 = Parser$Reply$value$($2215, $2216, Fm$Term$ori$($2217, _term$46));
                                                                                                        var $2210 = $2218;
                                                                                                        break;
                                                                                                };
                                                                                                var $2202 = $2210;
                                                                                                break;
                                                                                        };
                                                                                        var $2194 = $2202;
                                                                                        break;
                                                                                };
                                                                                var $2186 = $2194;
                                                                                break;
                                                                        };
                                                                        var $2178 = $2186;
                                                                        break;
                                                                };
                                                                var $2170 = $2178;
                                                                break;
                                                        };
                                                        var $2162 = $2170;
                                                        break;
                                                };
                                                var $2154 = $2162;
                                                break;
                                        };
                                        var $2146 = $2154;
                                        break;
                                };
                                var $2138 = $2146;
                                break;
                        };
                        var $2130 = $2138;
                        break;
                };
                var $2122 = $2130;
                break;
        };
        return $2122;
    };
    const Fm$Parser$forin$2 = x0 => x1 => Fm$Parser$forin$2$(x0, x1);

    function Fm$Parser$do$statements$(_monad_name$1) {
        var $2222 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2224 = self.idx;
                    var $2225 = self.code;
                    var $2226 = self.err;
                    var $2227 = Parser$Reply$error$($2224, $2225, $2226);
                    var $2223 = $2227;
                    break;
                case 'Parser.Reply.value':
                    var $2228 = self.idx;
                    var $2229 = self.code;
                    var $2230 = self.val;
                    var self = Fm$Parser$text$("var ", $2228, $2229);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2232 = self.idx;
                            var $2233 = self.code;
                            var $2234 = self.err;
                            var $2235 = Parser$Reply$error$($2232, $2233, $2234);
                            var $2231 = $2235;
                            break;
                        case 'Parser.Reply.value':
                            var $2236 = self.idx;
                            var $2237 = self.code;
                            var $2238 = self.val;
                            var self = Fm$Parser$name1$($2236, $2237);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2240 = self.idx;
                                    var $2241 = self.code;
                                    var $2242 = self.err;
                                    var $2243 = Parser$Reply$error$($2240, $2241, $2242);
                                    var $2239 = $2243;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2244 = self.idx;
                                    var $2245 = self.code;
                                    var $2246 = self.val;
                                    var self = Fm$Parser$text$("=", $2244, $2245);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2248 = self.idx;
                                            var $2249 = self.code;
                                            var $2250 = self.err;
                                            var $2251 = Parser$Reply$error$($2248, $2249, $2250);
                                            var $2247 = $2251;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2252 = self.idx;
                                            var $2253 = self.code;
                                            var $2254 = self.val;
                                            var self = Fm$Parser$term$($2252, $2253);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2256 = self.idx;
                                                    var $2257 = self.code;
                                                    var $2258 = self.err;
                                                    var $2259 = Parser$Reply$error$($2256, $2257, $2258);
                                                    var $2255 = $2259;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2260 = self.idx;
                                                    var $2261 = self.code;
                                                    var $2262 = self.val;
                                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2260, $2261);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2264 = self.idx;
                                                            var $2265 = self.code;
                                                            var $2266 = self.err;
                                                            var $2267 = Parser$Reply$error$($2264, $2265, $2266);
                                                            var $2263 = $2267;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2268 = self.idx;
                                                            var $2269 = self.code;
                                                            var $2270 = self.val;
                                                            var self = Fm$Parser$do$statements$(_monad_name$1)($2268)($2269);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2272 = self.idx;
                                                                    var $2273 = self.code;
                                                                    var $2274 = self.err;
                                                                    var $2275 = Parser$Reply$error$($2272, $2273, $2274);
                                                                    var $2271 = $2275;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2276 = self.idx;
                                                                    var $2277 = self.code;
                                                                    var $2278 = self.val;
                                                                    var self = Fm$Parser$stop$($2230, $2276, $2277);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2280 = self.idx;
                                                                            var $2281 = self.code;
                                                                            var $2282 = self.err;
                                                                            var $2283 = Parser$Reply$error$($2280, $2281, $2282);
                                                                            var $2279 = $2283;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2284 = self.idx;
                                                                            var $2285 = self.code;
                                                                            var $2286 = self.val;
                                                                            var _term$28 = Fm$Term$app$(Fm$Term$ref$("Monad.bind"), Fm$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Fm$Term$app$(_term$28, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Fm$Term$app$(_term$29, Fm$Term$hol$(Bits$e));
                                                                            var _term$31 = Fm$Term$app$(_term$30, Fm$Term$hol$(Bits$e));
                                                                            var _term$32 = Fm$Term$app$(_term$31, $2262);
                                                                            var _term$33 = Fm$Term$app$(_term$32, Fm$Term$lam$($2246, (_x$33 => {
                                                                                var $2288 = $2278;
                                                                                return $2288;
                                                                            })));
                                                                            var $2287 = Parser$Reply$value$($2284, $2285, Fm$Term$ori$($2286, _term$33));
                                                                            var $2279 = $2287;
                                                                            break;
                                                                    };
                                                                    var $2271 = $2279;
                                                                    break;
                                                            };
                                                            var $2263 = $2271;
                                                            break;
                                                    };
                                                    var $2255 = $2263;
                                                    break;
                                            };
                                            var $2247 = $2255;
                                            break;
                                    };
                                    var $2239 = $2247;
                                    break;
                            };
                            var $2231 = $2239;
                            break;
                    };
                    var $2223 = $2231;
                    break;
            };
            return $2223;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2290 = self.idx;
                    var $2291 = self.code;
                    var $2292 = self.err;
                    var $2293 = Parser$Reply$error$($2290, $2291, $2292);
                    var $2289 = $2293;
                    break;
                case 'Parser.Reply.value':
                    var $2294 = self.idx;
                    var $2295 = self.code;
                    var $2296 = self.val;
                    var self = Fm$Parser$text$("let ", $2294, $2295);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2298 = self.idx;
                            var $2299 = self.code;
                            var $2300 = self.err;
                            var $2301 = Parser$Reply$error$($2298, $2299, $2300);
                            var $2297 = $2301;
                            break;
                        case 'Parser.Reply.value':
                            var $2302 = self.idx;
                            var $2303 = self.code;
                            var $2304 = self.val;
                            var self = Fm$Parser$name1$($2302, $2303);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2306 = self.idx;
                                    var $2307 = self.code;
                                    var $2308 = self.err;
                                    var $2309 = Parser$Reply$error$($2306, $2307, $2308);
                                    var $2305 = $2309;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2310 = self.idx;
                                    var $2311 = self.code;
                                    var $2312 = self.val;
                                    var self = Fm$Parser$text$("=", $2310, $2311);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2314 = self.idx;
                                            var $2315 = self.code;
                                            var $2316 = self.err;
                                            var $2317 = Parser$Reply$error$($2314, $2315, $2316);
                                            var $2313 = $2317;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2318 = self.idx;
                                            var $2319 = self.code;
                                            var $2320 = self.val;
                                            var self = Fm$Parser$term$($2318, $2319);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2322 = self.idx;
                                                    var $2323 = self.code;
                                                    var $2324 = self.err;
                                                    var $2325 = Parser$Reply$error$($2322, $2323, $2324);
                                                    var $2321 = $2325;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2326 = self.idx;
                                                    var $2327 = self.code;
                                                    var $2328 = self.val;
                                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2326, $2327);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2330 = self.idx;
                                                            var $2331 = self.code;
                                                            var $2332 = self.err;
                                                            var $2333 = Parser$Reply$error$($2330, $2331, $2332);
                                                            var $2329 = $2333;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2334 = self.idx;
                                                            var $2335 = self.code;
                                                            var $2336 = self.val;
                                                            var self = Fm$Parser$do$statements$(_monad_name$1)($2334)($2335);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2338 = self.idx;
                                                                    var $2339 = self.code;
                                                                    var $2340 = self.err;
                                                                    var $2341 = Parser$Reply$error$($2338, $2339, $2340);
                                                                    var $2337 = $2341;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2342 = self.idx;
                                                                    var $2343 = self.code;
                                                                    var $2344 = self.val;
                                                                    var self = Fm$Parser$stop$($2296, $2342, $2343);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2346 = self.idx;
                                                                            var $2347 = self.code;
                                                                            var $2348 = self.err;
                                                                            var $2349 = Parser$Reply$error$($2346, $2347, $2348);
                                                                            var $2345 = $2349;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2350 = self.idx;
                                                                            var $2351 = self.code;
                                                                            var $2352 = self.val;
                                                                            var $2353 = Parser$Reply$value$($2350, $2351, Fm$Term$ori$($2352, Fm$Term$let$($2312, $2328, (_x$28 => {
                                                                                var $2354 = $2344;
                                                                                return $2354;
                                                                            }))));
                                                                            var $2345 = $2353;
                                                                            break;
                                                                    };
                                                                    var $2337 = $2345;
                                                                    break;
                                                            };
                                                            var $2329 = $2337;
                                                            break;
                                                    };
                                                    var $2321 = $2329;
                                                    break;
                                            };
                                            var $2313 = $2321;
                                            break;
                                    };
                                    var $2305 = $2313;
                                    break;
                            };
                            var $2297 = $2305;
                            break;
                    };
                    var $2289 = $2297;
                    break;
            };
            return $2289;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2356 = self.idx;
                    var $2357 = self.code;
                    var $2358 = self.err;
                    var $2359 = Parser$Reply$error$($2356, $2357, $2358);
                    var $2355 = $2359;
                    break;
                case 'Parser.Reply.value':
                    var $2360 = self.idx;
                    var $2361 = self.code;
                    var $2362 = self.val;
                    var self = Fm$Parser$text$("return ", $2360, $2361);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2364 = self.idx;
                            var $2365 = self.code;
                            var $2366 = self.err;
                            var $2367 = Parser$Reply$error$($2364, $2365, $2366);
                            var $2363 = $2367;
                            break;
                        case 'Parser.Reply.value':
                            var $2368 = self.idx;
                            var $2369 = self.code;
                            var $2370 = self.val;
                            var self = Fm$Parser$term$($2368, $2369);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2372 = self.idx;
                                    var $2373 = self.code;
                                    var $2374 = self.err;
                                    var $2375 = Parser$Reply$error$($2372, $2373, $2374);
                                    var $2371 = $2375;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2376 = self.idx;
                                    var $2377 = self.code;
                                    var $2378 = self.val;
                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2376, $2377);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2380 = self.idx;
                                            var $2381 = self.code;
                                            var $2382 = self.err;
                                            var $2383 = Parser$Reply$error$($2380, $2381, $2382);
                                            var $2379 = $2383;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2384 = self.idx;
                                            var $2385 = self.code;
                                            var $2386 = self.val;
                                            var self = Fm$Parser$stop$($2362, $2384, $2385);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2388 = self.idx;
                                                    var $2389 = self.code;
                                                    var $2390 = self.err;
                                                    var $2391 = Parser$Reply$error$($2388, $2389, $2390);
                                                    var $2387 = $2391;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2392 = self.idx;
                                                    var $2393 = self.code;
                                                    var $2394 = self.val;
                                                    var _term$19 = Fm$Term$app$(Fm$Term$ref$("Monad.pure"), Fm$Term$ref$(_monad_name$1));
                                                    var _term$20 = Fm$Term$app$(_term$19, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                    var _term$22 = Fm$Term$app$(_term$21, $2378);
                                                    var $2395 = Parser$Reply$value$($2392, $2393, Fm$Term$ori$($2394, _term$22));
                                                    var $2387 = $2395;
                                                    break;
                                            };
                                            var $2379 = $2387;
                                            break;
                                    };
                                    var $2371 = $2379;
                                    break;
                            };
                            var $2363 = $2371;
                            break;
                    };
                    var $2355 = $2363;
                    break;
            };
            return $2355;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2397 = self.idx;
                    var $2398 = self.code;
                    var $2399 = self.err;
                    var $2400 = Parser$Reply$error$($2397, $2398, $2399);
                    var $2396 = $2400;
                    break;
                case 'Parser.Reply.value':
                    var $2401 = self.idx;
                    var $2402 = self.code;
                    var $2403 = self.val;
                    var self = Fm$Parser$term$($2401, $2402);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2405 = self.idx;
                            var $2406 = self.code;
                            var $2407 = self.err;
                            var $2408 = Parser$Reply$error$($2405, $2406, $2407);
                            var $2404 = $2408;
                            break;
                        case 'Parser.Reply.value':
                            var $2409 = self.idx;
                            var $2410 = self.code;
                            var $2411 = self.val;
                            var self = Parser$maybe$(Fm$Parser$text(";"), $2409, $2410);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2413 = self.idx;
                                    var $2414 = self.code;
                                    var $2415 = self.err;
                                    var $2416 = Parser$Reply$error$($2413, $2414, $2415);
                                    var $2412 = $2416;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2417 = self.idx;
                                    var $2418 = self.code;
                                    var $2419 = self.val;
                                    var self = Fm$Parser$do$statements$(_monad_name$1)($2417)($2418);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2421 = self.idx;
                                            var $2422 = self.code;
                                            var $2423 = self.err;
                                            var $2424 = Parser$Reply$error$($2421, $2422, $2423);
                                            var $2420 = $2424;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2425 = self.idx;
                                            var $2426 = self.code;
                                            var $2427 = self.val;
                                            var self = Fm$Parser$stop$($2403, $2425, $2426);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2429 = self.idx;
                                                    var $2430 = self.code;
                                                    var $2431 = self.err;
                                                    var $2432 = Parser$Reply$error$($2429, $2430, $2431);
                                                    var $2428 = $2432;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2433 = self.idx;
                                                    var $2434 = self.code;
                                                    var $2435 = self.val;
                                                    var _term$19 = Fm$Term$app$(Fm$Term$ref$("Monad.bind"), Fm$Term$ref$(_monad_name$1));
                                                    var _term$20 = Fm$Term$app$(_term$19, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                    var _term$22 = Fm$Term$app$(_term$21, Fm$Term$hol$(Bits$e));
                                                    var _term$23 = Fm$Term$app$(_term$22, $2411);
                                                    var _term$24 = Fm$Term$app$(_term$23, Fm$Term$lam$("", (_x$24 => {
                                                        var $2437 = $2427;
                                                        return $2437;
                                                    })));
                                                    var $2436 = Parser$Reply$value$($2433, $2434, Fm$Term$ori$($2435, _term$24));
                                                    var $2428 = $2436;
                                                    break;
                                            };
                                            var $2420 = $2428;
                                            break;
                                    };
                                    var $2412 = $2420;
                                    break;
                            };
                            var $2404 = $2412;
                            break;
                    };
                    var $2396 = $2404;
                    break;
            };
            return $2396;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2439 = self.idx;
                    var $2440 = self.code;
                    var $2441 = self.err;
                    var $2442 = Parser$Reply$error$($2439, $2440, $2441);
                    var $2438 = $2442;
                    break;
                case 'Parser.Reply.value':
                    var $2443 = self.idx;
                    var $2444 = self.code;
                    var $2445 = self.val;
                    var self = Parser$maybe$(Fm$Parser$text(";"), $2443, $2444);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2447 = self.idx;
                            var $2448 = self.code;
                            var $2449 = self.err;
                            var $2450 = Parser$Reply$error$($2447, $2448, $2449);
                            var $2446 = $2450;
                            break;
                        case 'Parser.Reply.value':
                            var $2451 = self.idx;
                            var $2452 = self.code;
                            var $2453 = self.val;
                            var $2454 = Parser$Reply$value$($2451, $2452, $2445);
                            var $2446 = $2454;
                            break;
                    };
                    var $2438 = $2446;
                    break;
            };
            return $2438;
        }), List$nil))))));
        return $2222;
    };
    const Fm$Parser$do$statements = x0 => Fm$Parser$do$statements$(x0);

    function Fm$Parser$do$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("do ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2456 = self.idx;
                var $2457 = self.code;
                var $2458 = self.err;
                var $2459 = Parser$Reply$error$($2456, $2457, $2458);
                var $2455 = $2459;
                break;
            case 'Parser.Reply.value':
                var $2460 = self.idx;
                var $2461 = self.code;
                var $2462 = self.val;
                var self = Fm$Parser$name1$($2460, $2461);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2464 = self.idx;
                        var $2465 = self.code;
                        var $2466 = self.err;
                        var $2467 = Parser$Reply$error$($2464, $2465, $2466);
                        var $2463 = $2467;
                        break;
                    case 'Parser.Reply.value':
                        var $2468 = self.idx;
                        var $2469 = self.code;
                        var $2470 = self.val;
                        var self = Fm$Parser$text$("{", $2468, $2469);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2472 = self.idx;
                                var $2473 = self.code;
                                var $2474 = self.err;
                                var $2475 = Parser$Reply$error$($2472, $2473, $2474);
                                var $2471 = $2475;
                                break;
                            case 'Parser.Reply.value':
                                var $2476 = self.idx;
                                var $2477 = self.code;
                                var $2478 = self.val;
                                var self = Fm$Parser$do$statements$($2470)($2476)($2477);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2480 = self.idx;
                                        var $2481 = self.code;
                                        var $2482 = self.err;
                                        var $2483 = Parser$Reply$error$($2480, $2481, $2482);
                                        var $2479 = $2483;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2484 = self.idx;
                                        var $2485 = self.code;
                                        var $2486 = self.val;
                                        var self = Fm$Parser$text$("}", $2484, $2485);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2488 = self.idx;
                                                var $2489 = self.code;
                                                var $2490 = self.err;
                                                var $2491 = Parser$Reply$error$($2488, $2489, $2490);
                                                var $2487 = $2491;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2492 = self.idx;
                                                var $2493 = self.code;
                                                var $2494 = self.val;
                                                var $2495 = Parser$Reply$value$($2492, $2493, $2486);
                                                var $2487 = $2495;
                                                break;
                                        };
                                        var $2479 = $2487;
                                        break;
                                };
                                var $2471 = $2479;
                                break;
                        };
                        var $2463 = $2471;
                        break;
                };
                var $2455 = $2463;
                break;
        };
        return $2455;
    };
    const Fm$Parser$do = x0 => x1 => Fm$Parser$do$(x0, x1);

    function Fm$Term$nat$(_natx$1) {
        var $2496 = ({
            _: 'Fm.Term.nat',
            'natx': _natx$1
        });
        return $2496;
    };
    const Fm$Term$nat = x0 => Fm$Term$nat$(x0);

    function Fm$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $2498 = Fm$Term$ref$(Fm$Name$read$("Nat.zero"));
            var $2497 = $2498;
        } else {
            var $2499 = (self - 1n);
            var _func$3 = Fm$Term$ref$(Fm$Name$read$("Nat.succ"));
            var _argm$4 = Fm$Term$nat$($2499);
            var $2500 = Fm$Term$app$(_func$3, _argm$4);
            var $2497 = $2500;
        };
        return $2497;
    };
    const Fm$Term$unroll_nat = x0 => Fm$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Fm$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $2502 = Fm$Term$ref$(Fm$Name$read$("Bits.e"));
                var $2501 = $2502;
                break;
            case 'o':
                var $2503 = self.slice(0, -1);
                var $2504 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("Bits.o")), Fm$Term$unroll_chr$bits$($2503));
                var $2501 = $2504;
                break;
            case 'i':
                var $2505 = self.slice(0, -1);
                var $2506 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("Bits.i")), Fm$Term$unroll_chr$bits$($2505));
                var $2501 = $2506;
                break;
        };
        return $2501;
    };
    const Fm$Term$unroll_chr$bits = x0 => Fm$Term$unroll_chr$bits$(x0);

    function Fm$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Fm$Term$ref$(Fm$Name$read$("Word.from_bits"));
        var _term$4 = Fm$Term$app$(_term$3, Fm$Term$nat$(16n));
        var _term$5 = Fm$Term$app$(_term$4, Fm$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("U16.new")), _term$5);
        var $2507 = _term$6;
        return $2507;
    };
    const Fm$Term$unroll_chr = x0 => Fm$Term$unroll_chr$(x0);

    function Fm$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $2509 = Fm$Term$ref$(Fm$Name$read$("String.nil"));
            var $2508 = $2509;
        } else {
            var $2510 = self.charCodeAt(0);
            var $2511 = self.slice(1);
            var _char$4 = Fm$Term$chr$($2510);
            var _term$5 = Fm$Term$ref$(Fm$Name$read$("String.cons"));
            var _term$6 = Fm$Term$app$(_term$5, _char$4);
            var _term$7 = Fm$Term$app$(_term$6, Fm$Term$str$($2511));
            var $2512 = _term$7;
            var $2508 = $2512;
        };
        return $2508;
    };
    const Fm$Term$unroll_str = x0 => Fm$Term$unroll_str$(x0);

    function Fm$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $2514 = self.name;
                var $2515 = self.indx;
                var $2516 = _term$1;
                var $2513 = $2516;
                break;
            case 'Fm.Term.ref':
                var $2517 = self.name;
                var self = Fm$get$($2517, _defs$2);
                switch (self._) {
                    case 'Maybe.none':
                        var $2519 = Fm$Term$ref$($2517);
                        var $2518 = $2519;
                        break;
                    case 'Maybe.some':
                        var $2520 = self.value;
                        var self = $2520;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $2522 = self.file;
                                var $2523 = self.code;
                                var $2524 = self.orig;
                                var $2525 = self.name;
                                var $2526 = self.term;
                                var $2527 = self.type;
                                var $2528 = self.isct;
                                var $2529 = self.arit;
                                var $2530 = self.stat;
                                var $2531 = Fm$Term$reduce$($2526, _defs$2);
                                var $2521 = $2531;
                                break;
                        };
                        var $2518 = $2521;
                        break;
                };
                var $2513 = $2518;
                break;
            case 'Fm.Term.typ':
                var $2532 = _term$1;
                var $2513 = $2532;
                break;
            case 'Fm.Term.all':
                var $2533 = self.eras;
                var $2534 = self.self;
                var $2535 = self.name;
                var $2536 = self.xtyp;
                var $2537 = self.body;
                var $2538 = _term$1;
                var $2513 = $2538;
                break;
            case 'Fm.Term.lam':
                var $2539 = self.name;
                var $2540 = self.body;
                var $2541 = _term$1;
                var $2513 = $2541;
                break;
            case 'Fm.Term.app':
                var $2542 = self.func;
                var $2543 = self.argm;
                var _func$5 = Fm$Term$reduce$($2542, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $2545 = self.name;
                        var $2546 = self.indx;
                        var $2547 = _term$1;
                        var $2544 = $2547;
                        break;
                    case 'Fm.Term.ref':
                        var $2548 = self.name;
                        var $2549 = _term$1;
                        var $2544 = $2549;
                        break;
                    case 'Fm.Term.typ':
                        var $2550 = _term$1;
                        var $2544 = $2550;
                        break;
                    case 'Fm.Term.all':
                        var $2551 = self.eras;
                        var $2552 = self.self;
                        var $2553 = self.name;
                        var $2554 = self.xtyp;
                        var $2555 = self.body;
                        var $2556 = _term$1;
                        var $2544 = $2556;
                        break;
                    case 'Fm.Term.lam':
                        var $2557 = self.name;
                        var $2558 = self.body;
                        var $2559 = Fm$Term$reduce$($2558($2543), _defs$2);
                        var $2544 = $2559;
                        break;
                    case 'Fm.Term.app':
                        var $2560 = self.func;
                        var $2561 = self.argm;
                        var $2562 = _term$1;
                        var $2544 = $2562;
                        break;
                    case 'Fm.Term.let':
                        var $2563 = self.name;
                        var $2564 = self.expr;
                        var $2565 = self.body;
                        var $2566 = _term$1;
                        var $2544 = $2566;
                        break;
                    case 'Fm.Term.def':
                        var $2567 = self.name;
                        var $2568 = self.expr;
                        var $2569 = self.body;
                        var $2570 = _term$1;
                        var $2544 = $2570;
                        break;
                    case 'Fm.Term.ann':
                        var $2571 = self.done;
                        var $2572 = self.term;
                        var $2573 = self.type;
                        var $2574 = _term$1;
                        var $2544 = $2574;
                        break;
                    case 'Fm.Term.gol':
                        var $2575 = self.name;
                        var $2576 = self.dref;
                        var $2577 = self.verb;
                        var $2578 = _term$1;
                        var $2544 = $2578;
                        break;
                    case 'Fm.Term.hol':
                        var $2579 = self.path;
                        var $2580 = _term$1;
                        var $2544 = $2580;
                        break;
                    case 'Fm.Term.nat':
                        var $2581 = self.natx;
                        var $2582 = _term$1;
                        var $2544 = $2582;
                        break;
                    case 'Fm.Term.chr':
                        var $2583 = self.chrx;
                        var $2584 = _term$1;
                        var $2544 = $2584;
                        break;
                    case 'Fm.Term.str':
                        var $2585 = self.strx;
                        var $2586 = _term$1;
                        var $2544 = $2586;
                        break;
                    case 'Fm.Term.cse':
                        var $2587 = self.path;
                        var $2588 = self.expr;
                        var $2589 = self.name;
                        var $2590 = self.with;
                        var $2591 = self.cses;
                        var $2592 = self.moti;
                        var $2593 = _term$1;
                        var $2544 = $2593;
                        break;
                    case 'Fm.Term.ori':
                        var $2594 = self.orig;
                        var $2595 = self.expr;
                        var $2596 = _term$1;
                        var $2544 = $2596;
                        break;
                };
                var $2513 = $2544;
                break;
            case 'Fm.Term.let':
                var $2597 = self.name;
                var $2598 = self.expr;
                var $2599 = self.body;
                var $2600 = Fm$Term$reduce$($2599($2598), _defs$2);
                var $2513 = $2600;
                break;
            case 'Fm.Term.def':
                var $2601 = self.name;
                var $2602 = self.expr;
                var $2603 = self.body;
                var $2604 = Fm$Term$reduce$($2603($2602), _defs$2);
                var $2513 = $2604;
                break;
            case 'Fm.Term.ann':
                var $2605 = self.done;
                var $2606 = self.term;
                var $2607 = self.type;
                var $2608 = Fm$Term$reduce$($2606, _defs$2);
                var $2513 = $2608;
                break;
            case 'Fm.Term.gol':
                var $2609 = self.name;
                var $2610 = self.dref;
                var $2611 = self.verb;
                var $2612 = _term$1;
                var $2513 = $2612;
                break;
            case 'Fm.Term.hol':
                var $2613 = self.path;
                var $2614 = _term$1;
                var $2513 = $2614;
                break;
            case 'Fm.Term.nat':
                var $2615 = self.natx;
                var $2616 = Fm$Term$reduce$(Fm$Term$unroll_nat$($2615), _defs$2);
                var $2513 = $2616;
                break;
            case 'Fm.Term.chr':
                var $2617 = self.chrx;
                var $2618 = Fm$Term$reduce$(Fm$Term$unroll_chr$($2617), _defs$2);
                var $2513 = $2618;
                break;
            case 'Fm.Term.str':
                var $2619 = self.strx;
                var $2620 = Fm$Term$reduce$(Fm$Term$unroll_str$($2619), _defs$2);
                var $2513 = $2620;
                break;
            case 'Fm.Term.cse':
                var $2621 = self.path;
                var $2622 = self.expr;
                var $2623 = self.name;
                var $2624 = self.with;
                var $2625 = self.cses;
                var $2626 = self.moti;
                var $2627 = _term$1;
                var $2513 = $2627;
                break;
            case 'Fm.Term.ori':
                var $2628 = self.orig;
                var $2629 = self.expr;
                var $2630 = Fm$Term$reduce$($2629, _defs$2);
                var $2513 = $2630;
                break;
        };
        return $2513;
    };
    const Fm$Term$reduce = x0 => x1 => Fm$Term$reduce$(x0, x1);
    const Map$new = ({
        _: 'Map.new'
    });

    function Fm$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {
        var $2631 = ({
            _: 'Fm.Def.new',
            'file': _file$1,
            'code': _code$2,
            'orig': _orig$3,
            'name': _name$4,
            'term': _term$5,
            'type': _type$6,
            'isct': _isct$7,
            'arit': _arit$8,
            'stat': _stat$9
        });
        return $2631;
    };
    const Fm$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Fm$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);
    const Fm$Status$init = ({
        _: 'Fm.Status.init'
    });

    function Fm$Parser$case$with$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("with", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2633 = self.idx;
                var $2634 = self.code;
                var $2635 = self.err;
                var $2636 = Parser$Reply$error$($2633, $2634, $2635);
                var $2632 = $2636;
                break;
            case 'Parser.Reply.value':
                var $2637 = self.idx;
                var $2638 = self.code;
                var $2639 = self.val;
                var self = Fm$Parser$name1$($2637, $2638);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2641 = self.idx;
                        var $2642 = self.code;
                        var $2643 = self.err;
                        var $2644 = Parser$Reply$error$($2641, $2642, $2643);
                        var $2640 = $2644;
                        break;
                    case 'Parser.Reply.value':
                        var $2645 = self.idx;
                        var $2646 = self.code;
                        var $2647 = self.val;
                        var self = Fm$Parser$text$(":", $2645, $2646);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2649 = self.idx;
                                var $2650 = self.code;
                                var $2651 = self.err;
                                var $2652 = Parser$Reply$error$($2649, $2650, $2651);
                                var $2648 = $2652;
                                break;
                            case 'Parser.Reply.value':
                                var $2653 = self.idx;
                                var $2654 = self.code;
                                var $2655 = self.val;
                                var self = Fm$Parser$term$($2653, $2654);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2657 = self.idx;
                                        var $2658 = self.code;
                                        var $2659 = self.err;
                                        var $2660 = Parser$Reply$error$($2657, $2658, $2659);
                                        var $2656 = $2660;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2661 = self.idx;
                                        var $2662 = self.code;
                                        var $2663 = self.val;
                                        var self = Fm$Parser$text$("=", $2661, $2662);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2665 = self.idx;
                                                var $2666 = self.code;
                                                var $2667 = self.err;
                                                var $2668 = Parser$Reply$error$($2665, $2666, $2667);
                                                var $2664 = $2668;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2669 = self.idx;
                                                var $2670 = self.code;
                                                var $2671 = self.val;
                                                var self = Fm$Parser$term$($2669, $2670);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2673 = self.idx;
                                                        var $2674 = self.code;
                                                        var $2675 = self.err;
                                                        var $2676 = Parser$Reply$error$($2673, $2674, $2675);
                                                        var $2672 = $2676;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2677 = self.idx;
                                                        var $2678 = self.code;
                                                        var $2679 = self.val;
                                                        var $2680 = Parser$Reply$value$($2677, $2678, Fm$Def$new$("", "", Pair$new$(0n, 0n), $2647, $2679, $2663, Bool$false, 0n, Fm$Status$init));
                                                        var $2672 = $2680;
                                                        break;
                                                };
                                                var $2664 = $2672;
                                                break;
                                        };
                                        var $2656 = $2664;
                                        break;
                                };
                                var $2648 = $2656;
                                break;
                        };
                        var $2640 = $2648;
                        break;
                };
                var $2632 = $2640;
                break;
        };
        return $2632;
    };
    const Fm$Parser$case$with = x0 => x1 => Fm$Parser$case$with$(x0, x1);

    function Fm$Parser$case$case$(_idx$1, _code$2) {
        var self = Fm$Parser$name1$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2682 = self.idx;
                var $2683 = self.code;
                var $2684 = self.err;
                var $2685 = Parser$Reply$error$($2682, $2683, $2684);
                var $2681 = $2685;
                break;
            case 'Parser.Reply.value':
                var $2686 = self.idx;
                var $2687 = self.code;
                var $2688 = self.val;
                var self = Fm$Parser$text$(":", $2686, $2687);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2690 = self.idx;
                        var $2691 = self.code;
                        var $2692 = self.err;
                        var $2693 = Parser$Reply$error$($2690, $2691, $2692);
                        var $2689 = $2693;
                        break;
                    case 'Parser.Reply.value':
                        var $2694 = self.idx;
                        var $2695 = self.code;
                        var $2696 = self.val;
                        var self = Fm$Parser$term$($2694, $2695);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2698 = self.idx;
                                var $2699 = self.code;
                                var $2700 = self.err;
                                var $2701 = Parser$Reply$error$($2698, $2699, $2700);
                                var $2697 = $2701;
                                break;
                            case 'Parser.Reply.value':
                                var $2702 = self.idx;
                                var $2703 = self.code;
                                var $2704 = self.val;
                                var self = Parser$maybe$(Fm$Parser$text(","), $2702, $2703);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2706 = self.idx;
                                        var $2707 = self.code;
                                        var $2708 = self.err;
                                        var $2709 = Parser$Reply$error$($2706, $2707, $2708);
                                        var $2705 = $2709;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2710 = self.idx;
                                        var $2711 = self.code;
                                        var $2712 = self.val;
                                        var $2713 = Parser$Reply$value$($2710, $2711, Pair$new$($2688, $2704));
                                        var $2705 = $2713;
                                        break;
                                };
                                var $2697 = $2705;
                                break;
                        };
                        var $2689 = $2697;
                        break;
                };
                var $2681 = $2689;
                break;
        };
        return $2681;
    };
    const Fm$Parser$case$case = x0 => x1 => Fm$Parser$case$case$(x0, x1);

    function Map$tie$(_val$2, _lft$3, _rgt$4) {
        var $2714 = ({
            _: 'Map.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $2714;
    };
    const Map$tie = x0 => x1 => x2 => Map$tie$(x0, x1, x2);

    function Map$set$(_bits$2, _val$3, _map$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2717 = Map$tie$(Maybe$some$(_val$3), Map$new, Map$new);
                        var $2716 = $2717;
                        break;
                    case 'Map.tie':
                        var $2718 = self.val;
                        var $2719 = self.lft;
                        var $2720 = self.rgt;
                        var $2721 = Map$tie$(Maybe$some$(_val$3), $2719, $2720);
                        var $2716 = $2721;
                        break;
                };
                var $2715 = $2716;
                break;
            case 'o':
                var $2722 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2724 = Map$tie$(Maybe$none, Map$set$($2722, _val$3, Map$new), Map$new);
                        var $2723 = $2724;
                        break;
                    case 'Map.tie':
                        var $2725 = self.val;
                        var $2726 = self.lft;
                        var $2727 = self.rgt;
                        var $2728 = Map$tie$($2725, Map$set$($2722, _val$3, $2726), $2727);
                        var $2723 = $2728;
                        break;
                };
                var $2715 = $2723;
                break;
            case 'i':
                var $2729 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2731 = Map$tie$(Maybe$none, Map$new, Map$set$($2729, _val$3, Map$new));
                        var $2730 = $2731;
                        break;
                    case 'Map.tie':
                        var $2732 = self.val;
                        var $2733 = self.lft;
                        var $2734 = self.rgt;
                        var $2735 = Map$tie$($2732, $2733, Map$set$($2729, _val$3, $2734));
                        var $2730 = $2735;
                        break;
                };
                var $2715 = $2730;
                break;
        };
        return $2715;
    };
    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $2737 = Map$new;
                var $2736 = $2737;
                break;
            case 'List.cons':
                var $2738 = self.head;
                var $2739 = self.tail;
                var self = $2738;
                switch (self._) {
                    case 'Pair.new':
                        var $2741 = self.fst;
                        var $2742 = self.snd;
                        var $2743 = Map$set$($2741, $2742, Map$from_list$($2739));
                        var $2740 = $2743;
                        break;
                };
                var $2736 = $2740;
                break;
        };
        return $2736;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $2745 = self.fst;
                var $2746 = self.snd;
                var $2747 = $2745;
                var $2744 = $2747;
                break;
        };
        return $2744;
    };
    const Pair$fst = x0 => Pair$fst$(x0);

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $2749 = self.fst;
                var $2750 = self.snd;
                var $2751 = $2750;
                var $2748 = $2751;
                break;
        };
        return $2748;
    };
    const Pair$snd = x0 => Pair$snd$(x0);

    function Fm$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $2752 = ({
            _: 'Fm.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $2752;
    };
    const Fm$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Fm$Parser$case$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2754 = self.idx;
                var $2755 = self.code;
                var $2756 = self.err;
                var $2757 = Parser$Reply$error$($2754, $2755, $2756);
                var $2753 = $2757;
                break;
            case 'Parser.Reply.value':
                var $2758 = self.idx;
                var $2759 = self.code;
                var $2760 = self.val;
                var self = Fm$Parser$text$("case ", $2758, $2759);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2762 = self.idx;
                        var $2763 = self.code;
                        var $2764 = self.err;
                        var $2765 = Parser$Reply$error$($2762, $2763, $2764);
                        var $2761 = $2765;
                        break;
                    case 'Parser.Reply.value':
                        var $2766 = self.idx;
                        var $2767 = self.code;
                        var $2768 = self.val;
                        var self = Fm$Parser$spaces($2766)($2767);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2770 = self.idx;
                                var $2771 = self.code;
                                var $2772 = self.err;
                                var $2773 = Parser$Reply$error$($2770, $2771, $2772);
                                var $2769 = $2773;
                                break;
                            case 'Parser.Reply.value':
                                var $2774 = self.idx;
                                var $2775 = self.code;
                                var $2776 = self.val;
                                var self = Fm$Parser$term$($2774, $2775);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2778 = self.idx;
                                        var $2779 = self.code;
                                        var $2780 = self.err;
                                        var $2781 = Parser$Reply$error$($2778, $2779, $2780);
                                        var $2777 = $2781;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2782 = self.idx;
                                        var $2783 = self.code;
                                        var $2784 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Fm$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2787 = self.idx;
                                                    var $2788 = self.code;
                                                    var $2789 = self.err;
                                                    var $2790 = Parser$Reply$error$($2787, $2788, $2789);
                                                    var $2786 = $2790;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2791 = self.idx;
                                                    var $2792 = self.code;
                                                    var $2793 = self.val;
                                                    var $2794 = Fm$Parser$name1$($2791, $2792);
                                                    var $2786 = $2794;
                                                    break;
                                            };
                                            return $2786;
                                        }), $2782, $2783);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2795 = self.idx;
                                                var $2796 = self.code;
                                                var $2797 = self.err;
                                                var $2798 = Parser$Reply$error$($2795, $2796, $2797);
                                                var $2785 = $2798;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2799 = self.idx;
                                                var $2800 = self.code;
                                                var $2801 = self.val;
                                                var self = $2801;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var self = Fm$Term$reduce$($2784, Map$new);
                                                        switch (self._) {
                                                            case 'Fm.Term.var':
                                                                var $2804 = self.name;
                                                                var $2805 = self.indx;
                                                                var $2806 = $2804;
                                                                var $2803 = $2806;
                                                                break;
                                                            case 'Fm.Term.ref':
                                                                var $2807 = self.name;
                                                                var $2808 = $2807;
                                                                var $2803 = $2808;
                                                                break;
                                                            case 'Fm.Term.typ':
                                                                var $2809 = Fm$Name$read$("self");
                                                                var $2803 = $2809;
                                                                break;
                                                            case 'Fm.Term.all':
                                                                var $2810 = self.eras;
                                                                var $2811 = self.self;
                                                                var $2812 = self.name;
                                                                var $2813 = self.xtyp;
                                                                var $2814 = self.body;
                                                                var $2815 = Fm$Name$read$("self");
                                                                var $2803 = $2815;
                                                                break;
                                                            case 'Fm.Term.lam':
                                                                var $2816 = self.name;
                                                                var $2817 = self.body;
                                                                var $2818 = Fm$Name$read$("self");
                                                                var $2803 = $2818;
                                                                break;
                                                            case 'Fm.Term.app':
                                                                var $2819 = self.func;
                                                                var $2820 = self.argm;
                                                                var $2821 = Fm$Name$read$("self");
                                                                var $2803 = $2821;
                                                                break;
                                                            case 'Fm.Term.let':
                                                                var $2822 = self.name;
                                                                var $2823 = self.expr;
                                                                var $2824 = self.body;
                                                                var $2825 = Fm$Name$read$("self");
                                                                var $2803 = $2825;
                                                                break;
                                                            case 'Fm.Term.def':
                                                                var $2826 = self.name;
                                                                var $2827 = self.expr;
                                                                var $2828 = self.body;
                                                                var $2829 = Fm$Name$read$("self");
                                                                var $2803 = $2829;
                                                                break;
                                                            case 'Fm.Term.ann':
                                                                var $2830 = self.done;
                                                                var $2831 = self.term;
                                                                var $2832 = self.type;
                                                                var $2833 = Fm$Name$read$("self");
                                                                var $2803 = $2833;
                                                                break;
                                                            case 'Fm.Term.gol':
                                                                var $2834 = self.name;
                                                                var $2835 = self.dref;
                                                                var $2836 = self.verb;
                                                                var $2837 = Fm$Name$read$("self");
                                                                var $2803 = $2837;
                                                                break;
                                                            case 'Fm.Term.hol':
                                                                var $2838 = self.path;
                                                                var $2839 = Fm$Name$read$("self");
                                                                var $2803 = $2839;
                                                                break;
                                                            case 'Fm.Term.nat':
                                                                var $2840 = self.natx;
                                                                var $2841 = Fm$Name$read$("self");
                                                                var $2803 = $2841;
                                                                break;
                                                            case 'Fm.Term.chr':
                                                                var $2842 = self.chrx;
                                                                var $2843 = Fm$Name$read$("self");
                                                                var $2803 = $2843;
                                                                break;
                                                            case 'Fm.Term.str':
                                                                var $2844 = self.strx;
                                                                var $2845 = Fm$Name$read$("self");
                                                                var $2803 = $2845;
                                                                break;
                                                            case 'Fm.Term.cse':
                                                                var $2846 = self.path;
                                                                var $2847 = self.expr;
                                                                var $2848 = self.name;
                                                                var $2849 = self.with;
                                                                var $2850 = self.cses;
                                                                var $2851 = self.moti;
                                                                var $2852 = Fm$Name$read$("self");
                                                                var $2803 = $2852;
                                                                break;
                                                            case 'Fm.Term.ori':
                                                                var $2853 = self.orig;
                                                                var $2854 = self.expr;
                                                                var $2855 = Fm$Name$read$("self");
                                                                var $2803 = $2855;
                                                                break;
                                                        };
                                                        var _name$18 = $2803;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $2856 = self.value;
                                                        var $2857 = $2856;
                                                        var _name$18 = $2857;
                                                        break;
                                                };
                                                var self = Parser$many$(Fm$Parser$case$with)($2799)($2800);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2858 = self.idx;
                                                        var $2859 = self.code;
                                                        var $2860 = self.err;
                                                        var $2861 = Parser$Reply$error$($2858, $2859, $2860);
                                                        var $2802 = $2861;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2862 = self.idx;
                                                        var $2863 = self.code;
                                                        var $2864 = self.val;
                                                        var self = Fm$Parser$text$("{", $2862, $2863);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2866 = self.idx;
                                                                var $2867 = self.code;
                                                                var $2868 = self.err;
                                                                var $2869 = Parser$Reply$error$($2866, $2867, $2868);
                                                                var $2865 = $2869;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2870 = self.idx;
                                                                var $2871 = self.code;
                                                                var $2872 = self.val;
                                                                var self = Parser$until$(Fm$Parser$text("}"), Fm$Parser$case$case)($2870)($2871);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2874 = self.idx;
                                                                        var $2875 = self.code;
                                                                        var $2876 = self.err;
                                                                        var $2877 = Parser$Reply$error$($2874, $2875, $2876);
                                                                        var $2873 = $2877;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2878 = self.idx;
                                                                        var $2879 = self.code;
                                                                        var $2880 = self.val;
                                                                        var _cses$28 = Map$from_list$(List$mapped$($2880, (_x$28 => {
                                                                            var $2882 = Pair$new$((fm_name_to_bits(Pair$fst$(_x$28))), Pair$snd$(_x$28));
                                                                            return $2882;
                                                                        })));
                                                                        var self = Parser$first_of$(List$cons$((_idx$29 => _code$30 => {
                                                                            var self = Fm$Parser$text$(":", _idx$29, _code$30);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $2884 = self.idx;
                                                                                    var $2885 = self.code;
                                                                                    var $2886 = self.err;
                                                                                    var $2887 = Parser$Reply$error$($2884, $2885, $2886);
                                                                                    var $2883 = $2887;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $2888 = self.idx;
                                                                                    var $2889 = self.code;
                                                                                    var $2890 = self.val;
                                                                                    var self = Fm$Parser$term$($2888, $2889);
                                                                                    switch (self._) {
                                                                                        case 'Parser.Reply.error':
                                                                                            var $2892 = self.idx;
                                                                                            var $2893 = self.code;
                                                                                            var $2894 = self.err;
                                                                                            var $2895 = Parser$Reply$error$($2892, $2893, $2894);
                                                                                            var $2891 = $2895;
                                                                                            break;
                                                                                        case 'Parser.Reply.value':
                                                                                            var $2896 = self.idx;
                                                                                            var $2897 = self.code;
                                                                                            var $2898 = self.val;
                                                                                            var $2899 = Parser$Reply$value$($2896, $2897, Maybe$some$($2898));
                                                                                            var $2891 = $2899;
                                                                                            break;
                                                                                    };
                                                                                    var $2883 = $2891;
                                                                                    break;
                                                                            };
                                                                            return $2883;
                                                                        }), List$cons$((_idx$29 => _code$30 => {
                                                                            var self = Fm$Parser$text$("!", _idx$29, _code$30);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $2901 = self.idx;
                                                                                    var $2902 = self.code;
                                                                                    var $2903 = self.err;
                                                                                    var $2904 = Parser$Reply$error$($2901, $2902, $2903);
                                                                                    var $2900 = $2904;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $2905 = self.idx;
                                                                                    var $2906 = self.code;
                                                                                    var $2907 = self.val;
                                                                                    var $2908 = Parser$Reply$value$($2905, $2906, Maybe$none);
                                                                                    var $2900 = $2908;
                                                                                    break;
                                                                            };
                                                                            return $2900;
                                                                        }), List$cons$((_idx$29 => _code$30 => {
                                                                            var $2909 = Parser$Reply$value$(_idx$29, _code$30, Maybe$some$(Fm$Term$hol$(Bits$e)));
                                                                            return $2909;
                                                                        }), List$nil))))($2878)($2879);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2910 = self.idx;
                                                                                var $2911 = self.code;
                                                                                var $2912 = self.err;
                                                                                var $2913 = Parser$Reply$error$($2910, $2911, $2912);
                                                                                var $2881 = $2913;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2914 = self.idx;
                                                                                var $2915 = self.code;
                                                                                var $2916 = self.val;
                                                                                var self = Fm$Parser$stop$($2760, $2914, $2915);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2918 = self.idx;
                                                                                        var $2919 = self.code;
                                                                                        var $2920 = self.err;
                                                                                        var $2921 = Parser$Reply$error$($2918, $2919, $2920);
                                                                                        var $2917 = $2921;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2922 = self.idx;
                                                                                        var $2923 = self.code;
                                                                                        var $2924 = self.val;
                                                                                        var $2925 = Parser$Reply$value$($2922, $2923, Fm$Term$ori$($2924, Fm$Term$cse$(Bits$e, $2784, _name$18, $2864, _cses$28, $2916)));
                                                                                        var $2917 = $2925;
                                                                                        break;
                                                                                };
                                                                                var $2881 = $2917;
                                                                                break;
                                                                        };
                                                                        var $2873 = $2881;
                                                                        break;
                                                                };
                                                                var $2865 = $2873;
                                                                break;
                                                        };
                                                        var $2802 = $2865;
                                                        break;
                                                };
                                                var $2785 = $2802;
                                                break;
                                        };
                                        var $2777 = $2785;
                                        break;
                                };
                                var $2769 = $2777;
                                break;
                        };
                        var $2761 = $2769;
                        break;
                };
                var $2753 = $2761;
                break;
        };
        return $2753;
    };
    const Fm$Parser$case = x0 => x1 => Fm$Parser$case$(x0, x1);

    function Fm$set$(_name$2, _val$3, _map$4) {
        var $2926 = Map$set$((fm_name_to_bits(_name$2)), _val$3, _map$4);
        return $2926;
    };
    const Fm$set = x0 => x1 => x2 => Fm$set$(x0, x1, x2);

    function Fm$Parser$open$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2928 = self.idx;
                var $2929 = self.code;
                var $2930 = self.err;
                var $2931 = Parser$Reply$error$($2928, $2929, $2930);
                var $2927 = $2931;
                break;
            case 'Parser.Reply.value':
                var $2932 = self.idx;
                var $2933 = self.code;
                var $2934 = self.val;
                var self = Fm$Parser$text$("open ", $2932, $2933);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2936 = self.idx;
                        var $2937 = self.code;
                        var $2938 = self.err;
                        var $2939 = Parser$Reply$error$($2936, $2937, $2938);
                        var $2935 = $2939;
                        break;
                    case 'Parser.Reply.value':
                        var $2940 = self.idx;
                        var $2941 = self.code;
                        var $2942 = self.val;
                        var self = Fm$Parser$spaces($2940)($2941);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2944 = self.idx;
                                var $2945 = self.code;
                                var $2946 = self.err;
                                var $2947 = Parser$Reply$error$($2944, $2945, $2946);
                                var $2943 = $2947;
                                break;
                            case 'Parser.Reply.value':
                                var $2948 = self.idx;
                                var $2949 = self.code;
                                var $2950 = self.val;
                                var self = Fm$Parser$term$($2948, $2949);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2952 = self.idx;
                                        var $2953 = self.code;
                                        var $2954 = self.err;
                                        var $2955 = Parser$Reply$error$($2952, $2953, $2954);
                                        var $2951 = $2955;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2956 = self.idx;
                                        var $2957 = self.code;
                                        var $2958 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Fm$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2961 = self.idx;
                                                    var $2962 = self.code;
                                                    var $2963 = self.err;
                                                    var $2964 = Parser$Reply$error$($2961, $2962, $2963);
                                                    var $2960 = $2964;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2965 = self.idx;
                                                    var $2966 = self.code;
                                                    var $2967 = self.val;
                                                    var $2968 = Fm$Parser$name1$($2965, $2966);
                                                    var $2960 = $2968;
                                                    break;
                                            };
                                            return $2960;
                                        }), $2956, $2957);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2969 = self.idx;
                                                var $2970 = self.code;
                                                var $2971 = self.err;
                                                var $2972 = Parser$Reply$error$($2969, $2970, $2971);
                                                var $2959 = $2972;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2973 = self.idx;
                                                var $2974 = self.code;
                                                var $2975 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $2973, $2974);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2977 = self.idx;
                                                        var $2978 = self.code;
                                                        var $2979 = self.err;
                                                        var $2980 = Parser$Reply$error$($2977, $2978, $2979);
                                                        var $2976 = $2980;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2981 = self.idx;
                                                        var $2982 = self.code;
                                                        var $2983 = self.val;
                                                        var self = $2975;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var self = Fm$Term$reduce$($2958, Map$new);
                                                                switch (self._) {
                                                                    case 'Fm.Term.var':
                                                                        var $2986 = self.name;
                                                                        var $2987 = self.indx;
                                                                        var $2988 = $2986;
                                                                        var $2985 = $2988;
                                                                        break;
                                                                    case 'Fm.Term.ref':
                                                                        var $2989 = self.name;
                                                                        var $2990 = $2989;
                                                                        var $2985 = $2990;
                                                                        break;
                                                                    case 'Fm.Term.typ':
                                                                        var $2991 = Fm$Name$read$("self");
                                                                        var $2985 = $2991;
                                                                        break;
                                                                    case 'Fm.Term.all':
                                                                        var $2992 = self.eras;
                                                                        var $2993 = self.self;
                                                                        var $2994 = self.name;
                                                                        var $2995 = self.xtyp;
                                                                        var $2996 = self.body;
                                                                        var $2997 = Fm$Name$read$("self");
                                                                        var $2985 = $2997;
                                                                        break;
                                                                    case 'Fm.Term.lam':
                                                                        var $2998 = self.name;
                                                                        var $2999 = self.body;
                                                                        var $3000 = Fm$Name$read$("self");
                                                                        var $2985 = $3000;
                                                                        break;
                                                                    case 'Fm.Term.app':
                                                                        var $3001 = self.func;
                                                                        var $3002 = self.argm;
                                                                        var $3003 = Fm$Name$read$("self");
                                                                        var $2985 = $3003;
                                                                        break;
                                                                    case 'Fm.Term.let':
                                                                        var $3004 = self.name;
                                                                        var $3005 = self.expr;
                                                                        var $3006 = self.body;
                                                                        var $3007 = Fm$Name$read$("self");
                                                                        var $2985 = $3007;
                                                                        break;
                                                                    case 'Fm.Term.def':
                                                                        var $3008 = self.name;
                                                                        var $3009 = self.expr;
                                                                        var $3010 = self.body;
                                                                        var $3011 = Fm$Name$read$("self");
                                                                        var $2985 = $3011;
                                                                        break;
                                                                    case 'Fm.Term.ann':
                                                                        var $3012 = self.done;
                                                                        var $3013 = self.term;
                                                                        var $3014 = self.type;
                                                                        var $3015 = Fm$Name$read$("self");
                                                                        var $2985 = $3015;
                                                                        break;
                                                                    case 'Fm.Term.gol':
                                                                        var $3016 = self.name;
                                                                        var $3017 = self.dref;
                                                                        var $3018 = self.verb;
                                                                        var $3019 = Fm$Name$read$("self");
                                                                        var $2985 = $3019;
                                                                        break;
                                                                    case 'Fm.Term.hol':
                                                                        var $3020 = self.path;
                                                                        var $3021 = Fm$Name$read$("self");
                                                                        var $2985 = $3021;
                                                                        break;
                                                                    case 'Fm.Term.nat':
                                                                        var $3022 = self.natx;
                                                                        var $3023 = Fm$Name$read$("self");
                                                                        var $2985 = $3023;
                                                                        break;
                                                                    case 'Fm.Term.chr':
                                                                        var $3024 = self.chrx;
                                                                        var $3025 = Fm$Name$read$("self");
                                                                        var $2985 = $3025;
                                                                        break;
                                                                    case 'Fm.Term.str':
                                                                        var $3026 = self.strx;
                                                                        var $3027 = Fm$Name$read$("self");
                                                                        var $2985 = $3027;
                                                                        break;
                                                                    case 'Fm.Term.cse':
                                                                        var $3028 = self.path;
                                                                        var $3029 = self.expr;
                                                                        var $3030 = self.name;
                                                                        var $3031 = self.with;
                                                                        var $3032 = self.cses;
                                                                        var $3033 = self.moti;
                                                                        var $3034 = Fm$Name$read$("self");
                                                                        var $2985 = $3034;
                                                                        break;
                                                                    case 'Fm.Term.ori':
                                                                        var $3035 = self.orig;
                                                                        var $3036 = self.expr;
                                                                        var $3037 = Fm$Name$read$("self");
                                                                        var $2985 = $3037;
                                                                        break;
                                                                };
                                                                var _name$21 = $2985;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $3038 = self.value;
                                                                var $3039 = $3038;
                                                                var _name$21 = $3039;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Fm$Parser$term$($2981, $2982);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3040 = self.idx;
                                                                var $3041 = self.code;
                                                                var $3042 = self.err;
                                                                var $3043 = Parser$Reply$error$($3040, $3041, $3042);
                                                                var $2984 = $3043;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3044 = self.idx;
                                                                var $3045 = self.code;
                                                                var $3046 = self.val;
                                                                var _cses$26 = Fm$set$("_", $3046, Map$new);
                                                                var _moti$27 = Maybe$some$(Fm$Term$hol$(Bits$e));
                                                                var self = Fm$Parser$stop$($2934, $3044, $3045);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3048 = self.idx;
                                                                        var $3049 = self.code;
                                                                        var $3050 = self.err;
                                                                        var $3051 = Parser$Reply$error$($3048, $3049, $3050);
                                                                        var $3047 = $3051;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3052 = self.idx;
                                                                        var $3053 = self.code;
                                                                        var $3054 = self.val;
                                                                        var $3055 = Parser$Reply$value$($3052, $3053, Fm$Term$ori$($3054, Fm$Term$cse$(Bits$e, $2958, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $3047 = $3055;
                                                                        break;
                                                                };
                                                                var $2984 = $3047;
                                                                break;
                                                        };
                                                        var $2976 = $2984;
                                                        break;
                                                };
                                                var $2959 = $2976;
                                                break;
                                        };
                                        var $2951 = $2959;
                                        break;
                                };
                                var $2943 = $2951;
                                break;
                        };
                        var $2935 = $2943;
                        break;
                };
                var $2927 = $2935;
                break;
        };
        return $2927;
    };
    const Fm$Parser$open = x0 => x1 => Fm$Parser$open$(x0, x1);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $3057 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $3056 = $3057;
        } else {
            var $3058 = self.charCodeAt(0);
            var $3059 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($3058 === 48);
            if (self) {
                var $3061 = Parser$Reply$value$(_sidx$5, $3059, 0n);
                var $3060 = $3061;
            } else {
                var self = ($3058 === 49);
                if (self) {
                    var $3063 = Parser$Reply$value$(_sidx$5, $3059, 1n);
                    var $3062 = $3063;
                } else {
                    var self = ($3058 === 50);
                    if (self) {
                        var $3065 = Parser$Reply$value$(_sidx$5, $3059, 2n);
                        var $3064 = $3065;
                    } else {
                        var self = ($3058 === 51);
                        if (self) {
                            var $3067 = Parser$Reply$value$(_sidx$5, $3059, 3n);
                            var $3066 = $3067;
                        } else {
                            var self = ($3058 === 52);
                            if (self) {
                                var $3069 = Parser$Reply$value$(_sidx$5, $3059, 4n);
                                var $3068 = $3069;
                            } else {
                                var self = ($3058 === 53);
                                if (self) {
                                    var $3071 = Parser$Reply$value$(_sidx$5, $3059, 5n);
                                    var $3070 = $3071;
                                } else {
                                    var self = ($3058 === 54);
                                    if (self) {
                                        var $3073 = Parser$Reply$value$(_sidx$5, $3059, 6n);
                                        var $3072 = $3073;
                                    } else {
                                        var self = ($3058 === 55);
                                        if (self) {
                                            var $3075 = Parser$Reply$value$(_sidx$5, $3059, 7n);
                                            var $3074 = $3075;
                                        } else {
                                            var self = ($3058 === 56);
                                            if (self) {
                                                var $3077 = Parser$Reply$value$(_sidx$5, $3059, 8n);
                                                var $3076 = $3077;
                                            } else {
                                                var self = ($3058 === 57);
                                                if (self) {
                                                    var $3079 = Parser$Reply$value$(_sidx$5, $3059, 9n);
                                                    var $3078 = $3079;
                                                } else {
                                                    var $3080 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $3078 = $3080;
                                                };
                                                var $3076 = $3078;
                                            };
                                            var $3074 = $3076;
                                        };
                                        var $3072 = $3074;
                                    };
                                    var $3070 = $3072;
                                };
                                var $3068 = $3070;
                            };
                            var $3066 = $3068;
                        };
                        var $3064 = $3066;
                    };
                    var $3062 = $3064;
                };
                var $3060 = $3062;
            };
            var $3056 = $3060;
        };
        return $3056;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.nil':
                        var $3081 = _res$4;
                        return $3081;
                    case 'List.cons':
                        var $3082 = self.head;
                        var $3083 = self.tail;
                        var $3084 = Nat$from_base$go$(_b$1, $3083, (_b$1 * _p$3), (($3082 * _p$3) + _res$4));
                        return $3084;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function Nat$from_base$(_base$1, _ds$2) {
        var $3085 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $3085;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3087 = self.idx;
                var $3088 = self.code;
                var $3089 = self.err;
                var $3090 = Parser$Reply$error$($3087, $3088, $3089);
                var $3086 = $3090;
                break;
            case 'Parser.Reply.value':
                var $3091 = self.idx;
                var $3092 = self.code;
                var $3093 = self.val;
                var $3094 = Parser$Reply$value$($3091, $3092, Nat$from_base$(10n, $3093));
                var $3086 = $3094;
                break;
        };
        return $3086;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $3096 = Bits$e;
                var $3095 = $3096;
                break;
            case 'o':
                var $3097 = self.slice(0, -1);
                var $3098 = $3097;
                var $3095 = $3098;
                break;
            case 'i':
                var $3099 = self.slice(0, -1);
                var $3100 = $3099;
                var $3095 = $3100;
                break;
        };
        return $3095;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $3102 = (Bits$e + '1');
                var $3101 = $3102;
                break;
            case 'o':
                var $3103 = self.slice(0, -1);
                var $3104 = ($3103 + '1');
                var $3101 = $3104;
                break;
            case 'i':
                var $3105 = self.slice(0, -1);
                var $3106 = (Bits$inc$($3105) + '0');
                var $3101 = $3106;
                break;
        };
        return $3101;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$to_bool$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $3108 = Bool$false;
                var $3107 = $3108;
                break;
            case 'Maybe.some':
                var $3109 = self.value;
                var $3110 = Bool$true;
                var $3107 = $3110;
                break;
        };
        return $3107;
    };
    const Maybe$to_bool = x0 => Maybe$to_bool$(x0);

    function Fm$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $3111 = ({
            _: 'Fm.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $3111;
    };
    const Fm$Term$gol = x0 => x1 => x2 => Fm$Term$gol$(x0, x1, x2);

    function Fm$Parser$goal$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3113 = self.idx;
                var $3114 = self.code;
                var $3115 = self.err;
                var $3116 = Parser$Reply$error$($3113, $3114, $3115);
                var $3112 = $3116;
                break;
            case 'Parser.Reply.value':
                var $3117 = self.idx;
                var $3118 = self.code;
                var $3119 = self.val;
                var self = Fm$Parser$text$("?", $3117, $3118);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3121 = self.idx;
                        var $3122 = self.code;
                        var $3123 = self.err;
                        var $3124 = Parser$Reply$error$($3121, $3122, $3123);
                        var $3120 = $3124;
                        break;
                    case 'Parser.Reply.value':
                        var $3125 = self.idx;
                        var $3126 = self.code;
                        var $3127 = self.val;
                        var self = Fm$Parser$name$($3125, $3126);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3129 = self.idx;
                                var $3130 = self.code;
                                var $3131 = self.err;
                                var $3132 = Parser$Reply$error$($3129, $3130, $3131);
                                var $3128 = $3132;
                                break;
                            case 'Parser.Reply.value':
                                var $3133 = self.idx;
                                var $3134 = self.code;
                                var $3135 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Fm$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3138 = self.idx;
                                            var $3139 = self.code;
                                            var $3140 = self.err;
                                            var $3141 = Parser$Reply$error$($3138, $3139, $3140);
                                            var $3137 = $3141;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3142 = self.idx;
                                            var $3143 = self.code;
                                            var $3144 = self.val;
                                            var self = Parser$nat$($3142, $3143);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3146 = self.idx;
                                                    var $3147 = self.code;
                                                    var $3148 = self.err;
                                                    var $3149 = Parser$Reply$error$($3146, $3147, $3148);
                                                    var $3145 = $3149;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3150 = self.idx;
                                                    var $3151 = self.code;
                                                    var $3152 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($3152)))));
                                                    var $3153 = Parser$Reply$value$($3150, $3151, _bits$20);
                                                    var $3145 = $3153;
                                                    break;
                                            };
                                            var $3137 = $3145;
                                            break;
                                    };
                                    return $3137;
                                }))($3133)($3134);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3154 = self.idx;
                                        var $3155 = self.code;
                                        var $3156 = self.err;
                                        var $3157 = Parser$Reply$error$($3154, $3155, $3156);
                                        var $3136 = $3157;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3158 = self.idx;
                                        var $3159 = self.code;
                                        var $3160 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $3158, $3159);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3162 = self.idx;
                                                var $3163 = self.code;
                                                var $3164 = self.err;
                                                var $3165 = Parser$Reply$error$($3162, $3163, $3164);
                                                var self = $3165;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3166 = self.idx;
                                                var $3167 = self.code;
                                                var $3168 = self.val;
                                                var $3169 = Parser$Reply$value$($3166, $3167, Maybe$to_bool$($3168));
                                                var self = $3169;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3170 = self.idx;
                                                var $3171 = self.code;
                                                var $3172 = self.err;
                                                var $3173 = Parser$Reply$error$($3170, $3171, $3172);
                                                var $3161 = $3173;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3174 = self.idx;
                                                var $3175 = self.code;
                                                var $3176 = self.val;
                                                var self = Fm$Parser$stop$($3119, $3174, $3175);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3178 = self.idx;
                                                        var $3179 = self.code;
                                                        var $3180 = self.err;
                                                        var $3181 = Parser$Reply$error$($3178, $3179, $3180);
                                                        var $3177 = $3181;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3182 = self.idx;
                                                        var $3183 = self.code;
                                                        var $3184 = self.val;
                                                        var $3185 = Parser$Reply$value$($3182, $3183, Fm$Term$ori$($3184, Fm$Term$gol$($3135, $3160, $3176)));
                                                        var $3177 = $3185;
                                                        break;
                                                };
                                                var $3161 = $3177;
                                                break;
                                        };
                                        var $3136 = $3161;
                                        break;
                                };
                                var $3128 = $3136;
                                break;
                        };
                        var $3120 = $3128;
                        break;
                };
                var $3112 = $3120;
                break;
        };
        return $3112;
    };
    const Fm$Parser$goal = x0 => x1 => Fm$Parser$goal$(x0, x1);

    function Fm$Parser$hole$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3187 = self.idx;
                var $3188 = self.code;
                var $3189 = self.err;
                var $3190 = Parser$Reply$error$($3187, $3188, $3189);
                var $3186 = $3190;
                break;
            case 'Parser.Reply.value':
                var $3191 = self.idx;
                var $3192 = self.code;
                var $3193 = self.val;
                var self = Fm$Parser$text$("_", $3191, $3192);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3195 = self.idx;
                        var $3196 = self.code;
                        var $3197 = self.err;
                        var $3198 = Parser$Reply$error$($3195, $3196, $3197);
                        var $3194 = $3198;
                        break;
                    case 'Parser.Reply.value':
                        var $3199 = self.idx;
                        var $3200 = self.code;
                        var $3201 = self.val;
                        var self = Fm$Parser$stop$($3193, $3199, $3200);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3203 = self.idx;
                                var $3204 = self.code;
                                var $3205 = self.err;
                                var $3206 = Parser$Reply$error$($3203, $3204, $3205);
                                var $3202 = $3206;
                                break;
                            case 'Parser.Reply.value':
                                var $3207 = self.idx;
                                var $3208 = self.code;
                                var $3209 = self.val;
                                var $3210 = Parser$Reply$value$($3207, $3208, Fm$Term$ori$($3209, Fm$Term$hol$(Bits$e)));
                                var $3202 = $3210;
                                break;
                        };
                        var $3194 = $3202;
                        break;
                };
                var $3186 = $3194;
                break;
        };
        return $3186;
    };
    const Fm$Parser$hole = x0 => x1 => Fm$Parser$hole$(x0, x1);

    function Fm$Parser$u8$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3212 = self.idx;
                var $3213 = self.code;
                var $3214 = self.err;
                var $3215 = Parser$Reply$error$($3212, $3213, $3214);
                var $3211 = $3215;
                break;
            case 'Parser.Reply.value':
                var $3216 = self.idx;
                var $3217 = self.code;
                var $3218 = self.val;
                var self = Fm$Parser$spaces($3216)($3217);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3220 = self.idx;
                        var $3221 = self.code;
                        var $3222 = self.err;
                        var $3223 = Parser$Reply$error$($3220, $3221, $3222);
                        var $3219 = $3223;
                        break;
                    case 'Parser.Reply.value':
                        var $3224 = self.idx;
                        var $3225 = self.code;
                        var $3226 = self.val;
                        var self = Parser$nat$($3224, $3225);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3228 = self.idx;
                                var $3229 = self.code;
                                var $3230 = self.err;
                                var $3231 = Parser$Reply$error$($3228, $3229, $3230);
                                var $3227 = $3231;
                                break;
                            case 'Parser.Reply.value':
                                var $3232 = self.idx;
                                var $3233 = self.code;
                                var $3234 = self.val;
                                var self = Parser$text$("b", $3232, $3233);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3236 = self.idx;
                                        var $3237 = self.code;
                                        var $3238 = self.err;
                                        var $3239 = Parser$Reply$error$($3236, $3237, $3238);
                                        var $3235 = $3239;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3240 = self.idx;
                                        var $3241 = self.code;
                                        var $3242 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u8");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3234));
                                        var self = Fm$Parser$stop$($3218, $3240, $3241);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3244 = self.idx;
                                                var $3245 = self.code;
                                                var $3246 = self.err;
                                                var $3247 = Parser$Reply$error$($3244, $3245, $3246);
                                                var $3243 = $3247;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3248 = self.idx;
                                                var $3249 = self.code;
                                                var $3250 = self.val;
                                                var $3251 = Parser$Reply$value$($3248, $3249, Fm$Term$ori$($3250, _term$16));
                                                var $3243 = $3251;
                                                break;
                                        };
                                        var $3235 = $3243;
                                        break;
                                };
                                var $3227 = $3235;
                                break;
                        };
                        var $3219 = $3227;
                        break;
                };
                var $3211 = $3219;
                break;
        };
        return $3211;
    };
    const Fm$Parser$u8 = x0 => x1 => Fm$Parser$u8$(x0, x1);

    function Fm$Parser$u16$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3253 = self.idx;
                var $3254 = self.code;
                var $3255 = self.err;
                var $3256 = Parser$Reply$error$($3253, $3254, $3255);
                var $3252 = $3256;
                break;
            case 'Parser.Reply.value':
                var $3257 = self.idx;
                var $3258 = self.code;
                var $3259 = self.val;
                var self = Fm$Parser$spaces($3257)($3258);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3261 = self.idx;
                        var $3262 = self.code;
                        var $3263 = self.err;
                        var $3264 = Parser$Reply$error$($3261, $3262, $3263);
                        var $3260 = $3264;
                        break;
                    case 'Parser.Reply.value':
                        var $3265 = self.idx;
                        var $3266 = self.code;
                        var $3267 = self.val;
                        var self = Parser$nat$($3265, $3266);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3269 = self.idx;
                                var $3270 = self.code;
                                var $3271 = self.err;
                                var $3272 = Parser$Reply$error$($3269, $3270, $3271);
                                var $3268 = $3272;
                                break;
                            case 'Parser.Reply.value':
                                var $3273 = self.idx;
                                var $3274 = self.code;
                                var $3275 = self.val;
                                var self = Parser$text$("s", $3273, $3274);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3277 = self.idx;
                                        var $3278 = self.code;
                                        var $3279 = self.err;
                                        var $3280 = Parser$Reply$error$($3277, $3278, $3279);
                                        var $3276 = $3280;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3281 = self.idx;
                                        var $3282 = self.code;
                                        var $3283 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u16");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3275));
                                        var self = Fm$Parser$stop$($3259, $3281, $3282);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3285 = self.idx;
                                                var $3286 = self.code;
                                                var $3287 = self.err;
                                                var $3288 = Parser$Reply$error$($3285, $3286, $3287);
                                                var $3284 = $3288;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3289 = self.idx;
                                                var $3290 = self.code;
                                                var $3291 = self.val;
                                                var $3292 = Parser$Reply$value$($3289, $3290, Fm$Term$ori$($3291, _term$16));
                                                var $3284 = $3292;
                                                break;
                                        };
                                        var $3276 = $3284;
                                        break;
                                };
                                var $3268 = $3276;
                                break;
                        };
                        var $3260 = $3268;
                        break;
                };
                var $3252 = $3260;
                break;
        };
        return $3252;
    };
    const Fm$Parser$u16 = x0 => x1 => Fm$Parser$u16$(x0, x1);

    function Fm$Parser$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3294 = self.idx;
                var $3295 = self.code;
                var $3296 = self.err;
                var $3297 = Parser$Reply$error$($3294, $3295, $3296);
                var $3293 = $3297;
                break;
            case 'Parser.Reply.value':
                var $3298 = self.idx;
                var $3299 = self.code;
                var $3300 = self.val;
                var self = Fm$Parser$spaces($3298)($3299);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3302 = self.idx;
                        var $3303 = self.code;
                        var $3304 = self.err;
                        var $3305 = Parser$Reply$error$($3302, $3303, $3304);
                        var $3301 = $3305;
                        break;
                    case 'Parser.Reply.value':
                        var $3306 = self.idx;
                        var $3307 = self.code;
                        var $3308 = self.val;
                        var self = Parser$nat$($3306, $3307);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3310 = self.idx;
                                var $3311 = self.code;
                                var $3312 = self.err;
                                var $3313 = Parser$Reply$error$($3310, $3311, $3312);
                                var $3309 = $3313;
                                break;
                            case 'Parser.Reply.value':
                                var $3314 = self.idx;
                                var $3315 = self.code;
                                var $3316 = self.val;
                                var self = Parser$text$("u", $3314, $3315);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3318 = self.idx;
                                        var $3319 = self.code;
                                        var $3320 = self.err;
                                        var $3321 = Parser$Reply$error$($3318, $3319, $3320);
                                        var $3317 = $3321;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3322 = self.idx;
                                        var $3323 = self.code;
                                        var $3324 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u32");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3316));
                                        var self = Fm$Parser$stop$($3300, $3322, $3323);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3326 = self.idx;
                                                var $3327 = self.code;
                                                var $3328 = self.err;
                                                var $3329 = Parser$Reply$error$($3326, $3327, $3328);
                                                var $3325 = $3329;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3330 = self.idx;
                                                var $3331 = self.code;
                                                var $3332 = self.val;
                                                var $3333 = Parser$Reply$value$($3330, $3331, Fm$Term$ori$($3332, _term$16));
                                                var $3325 = $3333;
                                                break;
                                        };
                                        var $3317 = $3325;
                                        break;
                                };
                                var $3309 = $3317;
                                break;
                        };
                        var $3301 = $3309;
                        break;
                };
                var $3293 = $3301;
                break;
        };
        return $3293;
    };
    const Fm$Parser$u32 = x0 => x1 => Fm$Parser$u32$(x0, x1);

    function Fm$Parser$u64$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3335 = self.idx;
                var $3336 = self.code;
                var $3337 = self.err;
                var $3338 = Parser$Reply$error$($3335, $3336, $3337);
                var $3334 = $3338;
                break;
            case 'Parser.Reply.value':
                var $3339 = self.idx;
                var $3340 = self.code;
                var $3341 = self.val;
                var self = Fm$Parser$spaces($3339)($3340);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3343 = self.idx;
                        var $3344 = self.code;
                        var $3345 = self.err;
                        var $3346 = Parser$Reply$error$($3343, $3344, $3345);
                        var $3342 = $3346;
                        break;
                    case 'Parser.Reply.value':
                        var $3347 = self.idx;
                        var $3348 = self.code;
                        var $3349 = self.val;
                        var self = Parser$nat$($3347, $3348);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3351 = self.idx;
                                var $3352 = self.code;
                                var $3353 = self.err;
                                var $3354 = Parser$Reply$error$($3351, $3352, $3353);
                                var $3350 = $3354;
                                break;
                            case 'Parser.Reply.value':
                                var $3355 = self.idx;
                                var $3356 = self.code;
                                var $3357 = self.val;
                                var self = Parser$text$("l", $3355, $3356);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3359 = self.idx;
                                        var $3360 = self.code;
                                        var $3361 = self.err;
                                        var $3362 = Parser$Reply$error$($3359, $3360, $3361);
                                        var $3358 = $3362;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3363 = self.idx;
                                        var $3364 = self.code;
                                        var $3365 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u64");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3357));
                                        var self = Fm$Parser$stop$($3341, $3363, $3364);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3367 = self.idx;
                                                var $3368 = self.code;
                                                var $3369 = self.err;
                                                var $3370 = Parser$Reply$error$($3367, $3368, $3369);
                                                var $3366 = $3370;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3371 = self.idx;
                                                var $3372 = self.code;
                                                var $3373 = self.val;
                                                var $3374 = Parser$Reply$value$($3371, $3372, Fm$Term$ori$($3373, _term$16));
                                                var $3366 = $3374;
                                                break;
                                        };
                                        var $3358 = $3366;
                                        break;
                                };
                                var $3350 = $3358;
                                break;
                        };
                        var $3342 = $3350;
                        break;
                };
                var $3334 = $3342;
                break;
        };
        return $3334;
    };
    const Fm$Parser$u64 = x0 => x1 => Fm$Parser$u64$(x0, x1);

    function Fm$Parser$nat$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3376 = self.idx;
                var $3377 = self.code;
                var $3378 = self.err;
                var $3379 = Parser$Reply$error$($3376, $3377, $3378);
                var $3375 = $3379;
                break;
            case 'Parser.Reply.value':
                var $3380 = self.idx;
                var $3381 = self.code;
                var $3382 = self.val;
                var self = Fm$Parser$spaces($3380)($3381);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3384 = self.idx;
                        var $3385 = self.code;
                        var $3386 = self.err;
                        var $3387 = Parser$Reply$error$($3384, $3385, $3386);
                        var $3383 = $3387;
                        break;
                    case 'Parser.Reply.value':
                        var $3388 = self.idx;
                        var $3389 = self.code;
                        var $3390 = self.val;
                        var self = Parser$nat$($3388, $3389);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3392 = self.idx;
                                var $3393 = self.code;
                                var $3394 = self.err;
                                var $3395 = Parser$Reply$error$($3392, $3393, $3394);
                                var $3391 = $3395;
                                break;
                            case 'Parser.Reply.value':
                                var $3396 = self.idx;
                                var $3397 = self.code;
                                var $3398 = self.val;
                                var self = Fm$Parser$stop$($3382, $3396, $3397);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3400 = self.idx;
                                        var $3401 = self.code;
                                        var $3402 = self.err;
                                        var $3403 = Parser$Reply$error$($3400, $3401, $3402);
                                        var $3399 = $3403;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3404 = self.idx;
                                        var $3405 = self.code;
                                        var $3406 = self.val;
                                        var $3407 = Parser$Reply$value$($3404, $3405, Fm$Term$ori$($3406, Fm$Term$nat$($3398)));
                                        var $3399 = $3407;
                                        break;
                                };
                                var $3391 = $3399;
                                break;
                        };
                        var $3383 = $3391;
                        break;
                };
                var $3375 = $3383;
                break;
        };
        return $3375;
    };
    const Fm$Parser$nat = x0 => x1 => Fm$Parser$nat$(x0, x1);
    const String$eql = a0 => a1 => (a0 === a1);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3408 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3408;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Fm$Parser$reference$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3410 = self.idx;
                var $3411 = self.code;
                var $3412 = self.err;
                var $3413 = Parser$Reply$error$($3410, $3411, $3412);
                var $3409 = $3413;
                break;
            case 'Parser.Reply.value':
                var $3414 = self.idx;
                var $3415 = self.code;
                var $3416 = self.val;
                var self = Fm$Parser$name1$($3414, $3415);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3418 = self.idx;
                        var $3419 = self.code;
                        var $3420 = self.err;
                        var $3421 = Parser$Reply$error$($3418, $3419, $3420);
                        var $3417 = $3421;
                        break;
                    case 'Parser.Reply.value':
                        var $3422 = self.idx;
                        var $3423 = self.code;
                        var $3424 = self.val;
                        var self = ($3424 === "case");
                        if (self) {
                            var $3426 = Parser$fail("Reserved keyword.");
                            var $3425 = $3426;
                        } else {
                            var self = ($3424 === "do");
                            if (self) {
                                var $3428 = Parser$fail("Reserved keyword.");
                                var $3427 = $3428;
                            } else {
                                var self = ($3424 === "if");
                                if (self) {
                                    var $3430 = Parser$fail("Reserved keyword.");
                                    var $3429 = $3430;
                                } else {
                                    var self = ($3424 === "with");
                                    if (self) {
                                        var $3432 = Parser$fail("Reserved keyword.");
                                        var $3431 = $3432;
                                    } else {
                                        var self = ($3424 === "let");
                                        if (self) {
                                            var $3434 = Parser$fail("Reserved keyword.");
                                            var $3433 = $3434;
                                        } else {
                                            var self = ($3424 === "def");
                                            if (self) {
                                                var $3436 = Parser$fail("Reserved keyword.");
                                                var $3435 = $3436;
                                            } else {
                                                var self = ($3424 === "true");
                                                if (self) {
                                                    var $3438 = (_idx$9 => _code$10 => {
                                                        var $3439 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Bool.true"));
                                                        return $3439;
                                                    });
                                                    var $3437 = $3438;
                                                } else {
                                                    var self = ($3424 === "false");
                                                    if (self) {
                                                        var $3441 = (_idx$9 => _code$10 => {
                                                            var $3442 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Bool.false"));
                                                            return $3442;
                                                        });
                                                        var $3440 = $3441;
                                                    } else {
                                                        var self = ($3424 === "unit");
                                                        if (self) {
                                                            var $3444 = (_idx$9 => _code$10 => {
                                                                var $3445 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Unit.new"));
                                                                return $3445;
                                                            });
                                                            var $3443 = $3444;
                                                        } else {
                                                            var self = ($3424 === "none");
                                                            if (self) {
                                                                var _term$9 = Fm$Term$ref$("Maybe.none");
                                                                var _term$10 = Fm$Term$app$(_term$9, Fm$Term$hol$(Bits$e));
                                                                var $3447 = (_idx$11 => _code$12 => {
                                                                    var $3448 = Parser$Reply$value$(_idx$11, _code$12, _term$10);
                                                                    return $3448;
                                                                });
                                                                var $3446 = $3447;
                                                            } else {
                                                                var self = ($3424 === "refl");
                                                                if (self) {
                                                                    var _term$9 = Fm$Term$ref$("Equal.refl");
                                                                    var _term$10 = Fm$Term$app$(_term$9, Fm$Term$hol$(Bits$e));
                                                                    var _term$11 = Fm$Term$app$(_term$10, Fm$Term$hol$(Bits$e));
                                                                    var $3450 = (_idx$12 => _code$13 => {
                                                                        var $3451 = Parser$Reply$value$(_idx$12, _code$13, _term$11);
                                                                        return $3451;
                                                                    });
                                                                    var $3449 = $3450;
                                                                } else {
                                                                    var $3452 = (_idx$9 => _code$10 => {
                                                                        var self = Fm$Parser$stop$($3416, _idx$9, _code$10);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $3454 = self.idx;
                                                                                var $3455 = self.code;
                                                                                var $3456 = self.err;
                                                                                var $3457 = Parser$Reply$error$($3454, $3455, $3456);
                                                                                var $3453 = $3457;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $3458 = self.idx;
                                                                                var $3459 = self.code;
                                                                                var $3460 = self.val;
                                                                                var $3461 = Parser$Reply$value$($3458, $3459, Fm$Term$ori$($3460, Fm$Term$ref$($3424)));
                                                                                var $3453 = $3461;
                                                                                break;
                                                                        };
                                                                        return $3453;
                                                                    });
                                                                    var $3449 = $3452;
                                                                };
                                                                var $3446 = $3449;
                                                            };
                                                            var $3443 = $3446;
                                                        };
                                                        var $3440 = $3443;
                                                    };
                                                    var $3437 = $3440;
                                                };
                                                var $3435 = $3437;
                                            };
                                            var $3433 = $3435;
                                        };
                                        var $3431 = $3433;
                                    };
                                    var $3429 = $3431;
                                };
                                var $3427 = $3429;
                            };
                            var $3425 = $3427;
                        };
                        var $3425 = $3425($3422)($3423);
                        var $3417 = $3425;
                        break;
                };
                var $3409 = $3417;
                break;
        };
        return $3409;
    };
    const Fm$Parser$reference = x0 => x1 => Fm$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Fm$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3463 = self.idx;
                var $3464 = self.code;
                var $3465 = self.err;
                var $3466 = Parser$Reply$error$($3463, $3464, $3465);
                var $3462 = $3466;
                break;
            case 'Parser.Reply.value':
                var $3467 = self.idx;
                var $3468 = self.code;
                var $3469 = self.val;
                var self = Parser$until1$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$term), $3467, $3468);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3471 = self.idx;
                        var $3472 = self.code;
                        var $3473 = self.err;
                        var $3474 = Parser$Reply$error$($3471, $3472, $3473);
                        var $3470 = $3474;
                        break;
                    case 'Parser.Reply.value':
                        var $3475 = self.idx;
                        var $3476 = self.code;
                        var $3477 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3475, $3476);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3479 = self.idx;
                                var $3480 = self.code;
                                var $3481 = self.err;
                                var $3482 = Parser$Reply$error$($3479, $3480, $3481);
                                var $3478 = $3482;
                                break;
                            case 'Parser.Reply.value':
                                var $3483 = self.idx;
                                var $3484 = self.code;
                                var $3485 = self.val;
                                var _expr$14 = (() => {
                                    var $3488 = _func$2;
                                    var $3489 = $3477;
                                    let _f$15 = $3488;
                                    let _x$14;
                                    while ($3489._ === 'List.cons') {
                                        _x$14 = $3489.head;
                                        var $3488 = Fm$Term$app$(_f$15, _x$14);
                                        _f$15 = $3488;
                                        $3489 = $3489.tail;
                                    }
                                    return _f$15;
                                })();
                                var $3486 = Parser$Reply$value$($3483, $3484, Fm$Term$ori$($3485, _expr$14));
                                var $3478 = $3486;
                                break;
                        };
                        var $3470 = $3478;
                        break;
                };
                var $3462 = $3470;
                break;
        };
        return $3462;
    };
    const Fm$Parser$application = x0 => x1 => x2 => x3 => Fm$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3491 = self.idx;
                var $3492 = self.code;
                var $3493 = self.err;
                var $3494 = Parser$Reply$error$($3491, $3492, $3493);
                var $3490 = $3494;
                break;
            case 'Parser.Reply.value':
                var $3495 = self.idx;
                var $3496 = self.code;
                var $3497 = self.val;
                var $3498 = Parser$text$(_text$1, $3495, $3496);
                var $3490 = $3498;
                break;
        };
        return $3490;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Fm$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3500 = self.idx;
                var $3501 = self.code;
                var $3502 = self.err;
                var $3503 = Parser$Reply$error$($3500, $3501, $3502);
                var $3499 = $3503;
                break;
            case 'Parser.Reply.value':
                var $3504 = self.idx;
                var $3505 = self.code;
                var $3506 = self.val;
                var self = Parser$text$("<", $3504, $3505);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3508 = self.idx;
                        var $3509 = self.code;
                        var $3510 = self.err;
                        var $3511 = Parser$Reply$error$($3508, $3509, $3510);
                        var $3507 = $3511;
                        break;
                    case 'Parser.Reply.value':
                        var $3512 = self.idx;
                        var $3513 = self.code;
                        var $3514 = self.val;
                        var self = Parser$until1$(Parser$spaces_text(">"), Fm$Parser$item(Fm$Parser$term), $3512, $3513);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3516 = self.idx;
                                var $3517 = self.code;
                                var $3518 = self.err;
                                var $3519 = Parser$Reply$error$($3516, $3517, $3518);
                                var $3515 = $3519;
                                break;
                            case 'Parser.Reply.value':
                                var $3520 = self.idx;
                                var $3521 = self.code;
                                var $3522 = self.val;
                                var self = Fm$Parser$stop$($3506, $3520, $3521);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3524 = self.idx;
                                        var $3525 = self.code;
                                        var $3526 = self.err;
                                        var $3527 = Parser$Reply$error$($3524, $3525, $3526);
                                        var $3523 = $3527;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3528 = self.idx;
                                        var $3529 = self.code;
                                        var $3530 = self.val;
                                        var _expr$17 = (() => {
                                            var $3533 = _func$2;
                                            var $3534 = $3522;
                                            let _f$18 = $3533;
                                            let _x$17;
                                            while ($3534._ === 'List.cons') {
                                                _x$17 = $3534.head;
                                                var $3533 = Fm$Term$app$(_f$18, _x$17);
                                                _f$18 = $3533;
                                                $3534 = $3534.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $3531 = Parser$Reply$value$($3528, $3529, Fm$Term$ori$($3530, _expr$17));
                                        var $3523 = $3531;
                                        break;
                                };
                                var $3515 = $3523;
                                break;
                        };
                        var $3507 = $3515;
                        break;
                };
                var $3499 = $3507;
                break;
        };
        return $3499;
    };
    const Fm$Parser$application$erased = x0 => x1 => x2 => x3 => Fm$Parser$application$erased$(x0, x1, x2, x3);

    function Fm$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3536 = self.idx;
                var $3537 = self.code;
                var $3538 = self.err;
                var $3539 = Parser$Reply$error$($3536, $3537, $3538);
                var $3535 = $3539;
                break;
            case 'Parser.Reply.value':
                var $3540 = self.idx;
                var $3541 = self.code;
                var $3542 = self.val;
                var self = Fm$Parser$term$($3540, $3541);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3544 = self.idx;
                        var $3545 = self.code;
                        var $3546 = self.err;
                        var $3547 = Parser$Reply$error$($3544, $3545, $3546);
                        var $3543 = $3547;
                        break;
                    case 'Parser.Reply.value':
                        var $3548 = self.idx;
                        var $3549 = self.code;
                        var $3550 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3548, $3549);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3552 = self.idx;
                                var $3553 = self.code;
                                var $3554 = self.err;
                                var $3555 = Parser$Reply$error$($3552, $3553, $3554);
                                var $3551 = $3555;
                                break;
                            case 'Parser.Reply.value':
                                var $3556 = self.idx;
                                var $3557 = self.code;
                                var $3558 = self.val;
                                var $3559 = Parser$Reply$value$($3556, $3557, Fm$Term$ori$($3558, Fm$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $3560 = $3550;
                                    return $3560;
                                }))));
                                var $3551 = $3559;
                                break;
                        };
                        var $3543 = $3551;
                        break;
                };
                var $3535 = $3543;
                break;
        };
        return $3535;
    };
    const Fm$Parser$arrow = x0 => x1 => x2 => x3 => Fm$Parser$arrow$(x0, x1, x2, x3);

    function Fm$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Fm$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3562 = self.idx;
                var $3563 = self.code;
                var $3564 = self.err;
                var $3565 = Parser$Reply$error$($3562, $3563, $3564);
                var $3561 = $3565;
                break;
            case 'Parser.Reply.value':
                var $3566 = self.idx;
                var $3567 = self.code;
                var $3568 = self.val;
                var self = Fm$Parser$term$($3566, $3567);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3570 = self.idx;
                        var $3571 = self.code;
                        var $3572 = self.err;
                        var $3573 = Parser$Reply$error$($3570, $3571, $3572);
                        var $3569 = $3573;
                        break;
                    case 'Parser.Reply.value':
                        var $3574 = self.idx;
                        var $3575 = self.code;
                        var $3576 = self.val;
                        var self = Fm$Parser$stop$(_init$3, $3574, $3575);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3578 = self.idx;
                                var $3579 = self.code;
                                var $3580 = self.err;
                                var $3581 = Parser$Reply$error$($3578, $3579, $3580);
                                var $3577 = $3581;
                                break;
                            case 'Parser.Reply.value':
                                var $3582 = self.idx;
                                var $3583 = self.code;
                                var $3584 = self.val;
                                var _term$16 = Fm$Term$ref$(_ref$2);
                                var _term$17 = Fm$Term$app$(_term$16, _val0$4);
                                var _term$18 = Fm$Term$app$(_term$17, $3576);
                                var $3585 = Parser$Reply$value$($3582, $3583, Fm$Term$ori$($3584, _term$18));
                                var $3577 = $3585;
                                break;
                        };
                        var $3569 = $3577;
                        break;
                };
                var $3561 = $3569;
                break;
        };
        return $3561;
    };
    const Fm$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Fm$Parser$add = Fm$Parser$op("+")("Nat.add");
    const Fm$Parser$sub = Fm$Parser$op("+")("Nat.add");
    const Fm$Parser$mul = Fm$Parser$op("*")("Nat.mul");
    const Fm$Parser$div = Fm$Parser$op("/")("Nat.div");
    const Fm$Parser$mod = Fm$Parser$op("%")("Nat.mod");

    function Fm$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3587 = self.idx;
                var $3588 = self.code;
                var $3589 = self.err;
                var $3590 = Parser$Reply$error$($3587, $3588, $3589);
                var $3586 = $3590;
                break;
            case 'Parser.Reply.value':
                var $3591 = self.idx;
                var $3592 = self.code;
                var $3593 = self.val;
                var self = Fm$Parser$term$($3591, $3592);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3595 = self.idx;
                        var $3596 = self.code;
                        var $3597 = self.err;
                        var $3598 = Parser$Reply$error$($3595, $3596, $3597);
                        var $3594 = $3598;
                        break;
                    case 'Parser.Reply.value':
                        var $3599 = self.idx;
                        var $3600 = self.code;
                        var $3601 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3599, $3600);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3603 = self.idx;
                                var $3604 = self.code;
                                var $3605 = self.err;
                                var $3606 = Parser$Reply$error$($3603, $3604, $3605);
                                var $3602 = $3606;
                                break;
                            case 'Parser.Reply.value':
                                var $3607 = self.idx;
                                var $3608 = self.code;
                                var $3609 = self.val;
                                var _term$14 = Fm$Term$ref$("List.cons");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _head$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3601);
                                var self = Fm$Parser$stop$(_init$1, $3607, $3608);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3611 = self.idx;
                                        var $3612 = self.code;
                                        var $3613 = self.err;
                                        var $3614 = Parser$Reply$error$($3611, $3612, $3613);
                                        var $3610 = $3614;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3615 = self.idx;
                                        var $3616 = self.code;
                                        var $3617 = self.val;
                                        var $3618 = Parser$Reply$value$($3615, $3616, Fm$Term$ori$($3617, _term$17));
                                        var $3610 = $3618;
                                        break;
                                };
                                var $3602 = $3610;
                                break;
                        };
                        var $3594 = $3602;
                        break;
                };
                var $3586 = $3594;
                break;
        };
        return $3586;
    };
    const Fm$Parser$cons = x0 => x1 => x2 => x3 => Fm$Parser$cons$(x0, x1, x2, x3);

    function Fm$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3620 = self.idx;
                var $3621 = self.code;
                var $3622 = self.err;
                var $3623 = Parser$Reply$error$($3620, $3621, $3622);
                var $3619 = $3623;
                break;
            case 'Parser.Reply.value':
                var $3624 = self.idx;
                var $3625 = self.code;
                var $3626 = self.val;
                var self = Fm$Parser$term$($3624, $3625);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3628 = self.idx;
                        var $3629 = self.code;
                        var $3630 = self.err;
                        var $3631 = Parser$Reply$error$($3628, $3629, $3630);
                        var $3627 = $3631;
                        break;
                    case 'Parser.Reply.value':
                        var $3632 = self.idx;
                        var $3633 = self.code;
                        var $3634 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3632, $3633);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3636 = self.idx;
                                var $3637 = self.code;
                                var $3638 = self.err;
                                var $3639 = Parser$Reply$error$($3636, $3637, $3638);
                                var $3635 = $3639;
                                break;
                            case 'Parser.Reply.value':
                                var $3640 = self.idx;
                                var $3641 = self.code;
                                var $3642 = self.val;
                                var _term$14 = Fm$Term$ref$("List.concat");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3634);
                                var self = Fm$Parser$stop$(_init$1, $3640, $3641);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3644 = self.idx;
                                        var $3645 = self.code;
                                        var $3646 = self.err;
                                        var $3647 = Parser$Reply$error$($3644, $3645, $3646);
                                        var $3643 = $3647;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3648 = self.idx;
                                        var $3649 = self.code;
                                        var $3650 = self.val;
                                        var $3651 = Parser$Reply$value$($3648, $3649, Fm$Term$ori$($3650, _term$17));
                                        var $3643 = $3651;
                                        break;
                                };
                                var $3635 = $3643;
                                break;
                        };
                        var $3627 = $3635;
                        break;
                };
                var $3619 = $3627;
                break;
        };
        return $3619;
    };
    const Fm$Parser$concat = x0 => x1 => x2 => x3 => Fm$Parser$concat$(x0, x1, x2, x3);

    function Fm$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3653 = self.idx;
                var $3654 = self.code;
                var $3655 = self.err;
                var $3656 = Parser$Reply$error$($3653, $3654, $3655);
                var $3652 = $3656;
                break;
            case 'Parser.Reply.value':
                var $3657 = self.idx;
                var $3658 = self.code;
                var $3659 = self.val;
                var self = Fm$Parser$term$($3657, $3658);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3661 = self.idx;
                        var $3662 = self.code;
                        var $3663 = self.err;
                        var $3664 = Parser$Reply$error$($3661, $3662, $3663);
                        var $3660 = $3664;
                        break;
                    case 'Parser.Reply.value':
                        var $3665 = self.idx;
                        var $3666 = self.code;
                        var $3667 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3665, $3666);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3669 = self.idx;
                                var $3670 = self.code;
                                var $3671 = self.err;
                                var $3672 = Parser$Reply$error$($3669, $3670, $3671);
                                var $3668 = $3672;
                                break;
                            case 'Parser.Reply.value':
                                var $3673 = self.idx;
                                var $3674 = self.code;
                                var $3675 = self.val;
                                var _term$14 = Fm$Term$ref$("String.concat");
                                var _term$15 = Fm$Term$app$(_term$14, _str0$2);
                                var _term$16 = Fm$Term$app$(_term$15, $3667);
                                var self = Fm$Parser$stop$(_init$1, $3673, $3674);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3677 = self.idx;
                                        var $3678 = self.code;
                                        var $3679 = self.err;
                                        var $3680 = Parser$Reply$error$($3677, $3678, $3679);
                                        var $3676 = $3680;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3681 = self.idx;
                                        var $3682 = self.code;
                                        var $3683 = self.val;
                                        var $3684 = Parser$Reply$value$($3681, $3682, Fm$Term$ori$($3683, _term$16));
                                        var $3676 = $3684;
                                        break;
                                };
                                var $3668 = $3676;
                                break;
                        };
                        var $3660 = $3668;
                        break;
                };
                var $3652 = $3660;
                break;
        };
        return $3652;
    };
    const Fm$Parser$string_concat = x0 => x1 => x2 => x3 => Fm$Parser$string_concat$(x0, x1, x2, x3);

    function Fm$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3686 = self.idx;
                var $3687 = self.code;
                var $3688 = self.err;
                var $3689 = Parser$Reply$error$($3686, $3687, $3688);
                var $3685 = $3689;
                break;
            case 'Parser.Reply.value':
                var $3690 = self.idx;
                var $3691 = self.code;
                var $3692 = self.val;
                var self = Fm$Parser$term$($3690, $3691);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3694 = self.idx;
                        var $3695 = self.code;
                        var $3696 = self.err;
                        var $3697 = Parser$Reply$error$($3694, $3695, $3696);
                        var $3693 = $3697;
                        break;
                    case 'Parser.Reply.value':
                        var $3698 = self.idx;
                        var $3699 = self.code;
                        var $3700 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3698, $3699);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3702 = self.idx;
                                var $3703 = self.code;
                                var $3704 = self.err;
                                var $3705 = Parser$Reply$error$($3702, $3703, $3704);
                                var $3701 = $3705;
                                break;
                            case 'Parser.Reply.value':
                                var $3706 = self.idx;
                                var $3707 = self.code;
                                var $3708 = self.val;
                                var _term$14 = Fm$Term$ref$("Sigma.new");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, Fm$Term$hol$(Bits$e));
                                var _term$17 = Fm$Term$app$(_term$16, _val0$2);
                                var _term$18 = Fm$Term$app$(_term$17, $3700);
                                var $3709 = Parser$Reply$value$($3706, $3707, Fm$Term$ori$($3708, _term$18));
                                var $3701 = $3709;
                                break;
                        };
                        var $3693 = $3701;
                        break;
                };
                var $3685 = $3693;
                break;
        };
        return $3685;
    };
    const Fm$Parser$sigma = x0 => x1 => x2 => x3 => Fm$Parser$sigma$(x0, x1, x2, x3);

    function Fm$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3711 = self.idx;
                var $3712 = self.code;
                var $3713 = self.err;
                var $3714 = Parser$Reply$error$($3711, $3712, $3713);
                var $3710 = $3714;
                break;
            case 'Parser.Reply.value':
                var $3715 = self.idx;
                var $3716 = self.code;
                var $3717 = self.val;
                var self = Fm$Parser$term$($3715, $3716);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3719 = self.idx;
                        var $3720 = self.code;
                        var $3721 = self.err;
                        var $3722 = Parser$Reply$error$($3719, $3720, $3721);
                        var $3718 = $3722;
                        break;
                    case 'Parser.Reply.value':
                        var $3723 = self.idx;
                        var $3724 = self.code;
                        var $3725 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3723, $3724);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3727 = self.idx;
                                var $3728 = self.code;
                                var $3729 = self.err;
                                var $3730 = Parser$Reply$error$($3727, $3728, $3729);
                                var $3726 = $3730;
                                break;
                            case 'Parser.Reply.value':
                                var $3731 = self.idx;
                                var $3732 = self.code;
                                var $3733 = self.val;
                                var _term$14 = Fm$Term$ref$("Equal");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _val0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3725);
                                var $3734 = Parser$Reply$value$($3731, $3732, Fm$Term$ori$($3733, _term$17));
                                var $3726 = $3734;
                                break;
                        };
                        var $3718 = $3726;
                        break;
                };
                var $3710 = $3718;
                break;
        };
        return $3710;
    };
    const Fm$Parser$equality = x0 => x1 => x2 => x3 => Fm$Parser$equality$(x0, x1, x2, x3);

    function Fm$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3736 = self.idx;
                var $3737 = self.code;
                var $3738 = self.err;
                var $3739 = Parser$Reply$error$($3736, $3737, $3738);
                var $3735 = $3739;
                break;
            case 'Parser.Reply.value':
                var $3740 = self.idx;
                var $3741 = self.code;
                var $3742 = self.val;
                var self = Fm$Parser$term$($3740, $3741);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3744 = self.idx;
                        var $3745 = self.code;
                        var $3746 = self.err;
                        var $3747 = Parser$Reply$error$($3744, $3745, $3746);
                        var $3743 = $3747;
                        break;
                    case 'Parser.Reply.value':
                        var $3748 = self.idx;
                        var $3749 = self.code;
                        var $3750 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3748, $3749);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3752 = self.idx;
                                var $3753 = self.code;
                                var $3754 = self.err;
                                var $3755 = Parser$Reply$error$($3752, $3753, $3754);
                                var $3751 = $3755;
                                break;
                            case 'Parser.Reply.value':
                                var $3756 = self.idx;
                                var $3757 = self.code;
                                var $3758 = self.val;
                                var _term$14 = Fm$Term$ref$("Equal");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _val0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3750);
                                var _term$18 = Fm$Term$app$(Fm$Term$ref$("Not"), _term$17);
                                var $3759 = Parser$Reply$value$($3756, $3757, Fm$Term$ori$($3758, _term$18));
                                var $3751 = $3759;
                                break;
                        };
                        var $3743 = $3751;
                        break;
                };
                var $3735 = $3743;
                break;
        };
        return $3735;
    };
    const Fm$Parser$inequality = x0 => x1 => x2 => x3 => Fm$Parser$inequality$(x0, x1, x2, x3);

    function Fm$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3761 = self.idx;
                var $3762 = self.code;
                var $3763 = self.err;
                var $3764 = Parser$Reply$error$($3761, $3762, $3763);
                var $3760 = $3764;
                break;
            case 'Parser.Reply.value':
                var $3765 = self.idx;
                var $3766 = self.code;
                var $3767 = self.val;
                var self = Fm$Parser$text$("rewrite", $3765, $3766);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3769 = self.idx;
                        var $3770 = self.code;
                        var $3771 = self.err;
                        var $3772 = Parser$Reply$error$($3769, $3770, $3771);
                        var $3768 = $3772;
                        break;
                    case 'Parser.Reply.value':
                        var $3773 = self.idx;
                        var $3774 = self.code;
                        var $3775 = self.val;
                        var self = Fm$Parser$name1$($3773, $3774);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3777 = self.idx;
                                var $3778 = self.code;
                                var $3779 = self.err;
                                var $3780 = Parser$Reply$error$($3777, $3778, $3779);
                                var $3776 = $3780;
                                break;
                            case 'Parser.Reply.value':
                                var $3781 = self.idx;
                                var $3782 = self.code;
                                var $3783 = self.val;
                                var self = Fm$Parser$text$("in", $3781, $3782);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3785 = self.idx;
                                        var $3786 = self.code;
                                        var $3787 = self.err;
                                        var $3788 = Parser$Reply$error$($3785, $3786, $3787);
                                        var $3784 = $3788;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3789 = self.idx;
                                        var $3790 = self.code;
                                        var $3791 = self.val;
                                        var self = Fm$Parser$term$($3789, $3790);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3793 = self.idx;
                                                var $3794 = self.code;
                                                var $3795 = self.err;
                                                var $3796 = Parser$Reply$error$($3793, $3794, $3795);
                                                var $3792 = $3796;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3797 = self.idx;
                                                var $3798 = self.code;
                                                var $3799 = self.val;
                                                var self = Fm$Parser$text$("with", $3797, $3798);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3801 = self.idx;
                                                        var $3802 = self.code;
                                                        var $3803 = self.err;
                                                        var $3804 = Parser$Reply$error$($3801, $3802, $3803);
                                                        var $3800 = $3804;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3805 = self.idx;
                                                        var $3806 = self.code;
                                                        var $3807 = self.val;
                                                        var self = Fm$Parser$term$($3805, $3806);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3809 = self.idx;
                                                                var $3810 = self.code;
                                                                var $3811 = self.err;
                                                                var $3812 = Parser$Reply$error$($3809, $3810, $3811);
                                                                var $3808 = $3812;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3813 = self.idx;
                                                                var $3814 = self.code;
                                                                var $3815 = self.val;
                                                                var self = Fm$Parser$stop$(_init$1, $3813, $3814);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3817 = self.idx;
                                                                        var $3818 = self.code;
                                                                        var $3819 = self.err;
                                                                        var $3820 = Parser$Reply$error$($3817, $3818, $3819);
                                                                        var $3816 = $3820;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3821 = self.idx;
                                                                        var $3822 = self.code;
                                                                        var $3823 = self.val;
                                                                        var _term$29 = Fm$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Fm$Term$app$(_term$29, Fm$Term$hol$(Bits$e));
                                                                        var _term$31 = Fm$Term$app$(_term$30, Fm$Term$hol$(Bits$e));
                                                                        var _term$32 = Fm$Term$app$(_term$31, Fm$Term$hol$(Bits$e));
                                                                        var _term$33 = Fm$Term$app$(_term$32, $3815);
                                                                        var _term$34 = Fm$Term$app$(_term$33, Fm$Term$lam$($3783, (_x$34 => {
                                                                            var $3825 = $3799;
                                                                            return $3825;
                                                                        })));
                                                                        var _term$35 = Fm$Term$app$(_term$34, _subt$2);
                                                                        var $3824 = Parser$Reply$value$($3821, $3822, Fm$Term$ori$($3823, _term$35));
                                                                        var $3816 = $3824;
                                                                        break;
                                                                };
                                                                var $3808 = $3816;
                                                                break;
                                                        };
                                                        var $3800 = $3808;
                                                        break;
                                                };
                                                var $3792 = $3800;
                                                break;
                                        };
                                        var $3784 = $3792;
                                        break;
                                };
                                var $3776 = $3784;
                                break;
                        };
                        var $3768 = $3776;
                        break;
                };
                var $3760 = $3768;
                break;
        };
        return $3760;
    };
    const Fm$Parser$rewrite = x0 => x1 => x2 => x3 => Fm$Parser$rewrite$(x0, x1, x2, x3);

    function Fm$Term$ann$(_done$1, _term$2, _type$3) {
        var $3826 = ({
            _: 'Fm.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3826;
    };
    const Fm$Term$ann = x0 => x1 => x2 => Fm$Term$ann$(x0, x1, x2);

    function Fm$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3828 = self.idx;
                var $3829 = self.code;
                var $3830 = self.err;
                var $3831 = Parser$Reply$error$($3828, $3829, $3830);
                var $3827 = $3831;
                break;
            case 'Parser.Reply.value':
                var $3832 = self.idx;
                var $3833 = self.code;
                var $3834 = self.val;
                var self = Fm$Parser$term$($3832, $3833);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3836 = self.idx;
                        var $3837 = self.code;
                        var $3838 = self.err;
                        var $3839 = Parser$Reply$error$($3836, $3837, $3838);
                        var $3835 = $3839;
                        break;
                    case 'Parser.Reply.value':
                        var $3840 = self.idx;
                        var $3841 = self.code;
                        var $3842 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3840, $3841);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3844 = self.idx;
                                var $3845 = self.code;
                                var $3846 = self.err;
                                var $3847 = Parser$Reply$error$($3844, $3845, $3846);
                                var $3843 = $3847;
                                break;
                            case 'Parser.Reply.value':
                                var $3848 = self.idx;
                                var $3849 = self.code;
                                var $3850 = self.val;
                                var $3851 = Parser$Reply$value$($3848, $3849, Fm$Term$ori$($3850, Fm$Term$ann$(Bool$false, _term$2, $3842)));
                                var $3843 = $3851;
                                break;
                        };
                        var $3835 = $3843;
                        break;
                };
                var $3827 = $3835;
                break;
        };
        return $3827;
    };
    const Fm$Parser$annotation = x0 => x1 => x2 => x3 => Fm$Parser$annotation$(x0, x1, x2, x3);

    function Fm$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3853 = self.idx;
                var $3854 = self.code;
                var $3855 = self.err;
                var $3856 = Parser$Reply$error$($3853, $3854, $3855);
                var $3852 = $3856;
                break;
            case 'Parser.Reply.value':
                var $3857 = self.idx;
                var $3858 = self.code;
                var $3859 = self.val;
                var self = Fm$Parser$stop$(_init$1, $3857, $3858);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3861 = self.idx;
                        var $3862 = self.code;
                        var $3863 = self.err;
                        var $3864 = Parser$Reply$error$($3861, $3862, $3863);
                        var $3860 = $3864;
                        break;
                    case 'Parser.Reply.value':
                        var $3865 = self.idx;
                        var $3866 = self.code;
                        var $3867 = self.val;
                        var $3868 = Parser$Reply$value$($3865, $3866, Fm$Term$ori$($3867, Fm$Term$app$(_term$2, Fm$Term$hol$(Bits$e))));
                        var $3860 = $3868;
                        break;
                };
                var $3852 = $3860;
                break;
        };
        return $3852;
    };
    const Fm$Parser$application$hole = x0 => x1 => x2 => x3 => Fm$Parser$application$hole$(x0, x1, x2, x3);

    function Fm$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Fm$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Fm$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Fm$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Fm$Parser$application(_init$1)(_term$2), List$cons$(Fm$Parser$application$erased(_init$1)(_term$2), List$cons$(Fm$Parser$arrow(_init$1)(_term$2), List$cons$(Fm$Parser$add(_init$1)(_term$2), List$cons$(Fm$Parser$sub(_init$1)(_term$2), List$cons$(Fm$Parser$mul(_init$1)(_term$2), List$cons$(Fm$Parser$div(_init$1)(_term$2), List$cons$(Fm$Parser$mod(_init$1)(_term$2), List$cons$(Fm$Parser$cons(_init$1)(_term$2), List$cons$(Fm$Parser$concat(_init$1)(_term$2), List$cons$(Fm$Parser$string_concat(_init$1)(_term$2), List$cons$(Fm$Parser$sigma(_init$1)(_term$2), List$cons$(Fm$Parser$equality(_init$1)(_term$2), List$cons$(Fm$Parser$inequality(_init$1)(_term$2), List$cons$(Fm$Parser$rewrite(_init$1)(_term$2), List$cons$(Fm$Parser$annotation(_init$1)(_term$2), List$cons$(Fm$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3870 = self.idx;
                        var $3871 = self.code;
                        var $3872 = self.err;
                        var $3873 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $3869 = $3873;
                        break;
                    case 'Parser.Reply.value':
                        var $3874 = self.idx;
                        var $3875 = self.code;
                        var $3876 = self.val;
                        var $3877 = Fm$Parser$suffix$(_init$1, $3876, $3874, $3875);
                        var $3869 = $3877;
                        break;
                };
                return $3869;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Parser$suffix = x0 => x1 => x2 => x3 => Fm$Parser$suffix$(x0, x1, x2, x3);

    function Fm$Parser$term$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3879 = self.idx;
                var $3880 = self.code;
                var $3881 = self.err;
                var $3882 = Parser$Reply$error$($3879, $3880, $3881);
                var $3878 = $3882;
                break;
            case 'Parser.Reply.value':
                var $3883 = self.idx;
                var $3884 = self.code;
                var $3885 = self.val;
                var self = Parser$first_of$(List$cons$(Fm$Parser$type, List$cons$(Fm$Parser$forall, List$cons$(Fm$Parser$lambda, List$cons$(Fm$Parser$lambda$erased, List$cons$(Fm$Parser$lambda$nameless, List$cons$(Fm$Parser$parenthesis, List$cons$(Fm$Parser$letforrange$u32, List$cons$(Fm$Parser$letforin, List$cons$(Fm$Parser$let, List$cons$(Fm$Parser$get, List$cons$(Fm$Parser$def, List$cons$(Fm$Parser$if, List$cons$(Fm$Parser$char, List$cons$(Fm$Parser$string, List$cons$(Fm$Parser$pair, List$cons$(Fm$Parser$sigma$type, List$cons$(Fm$Parser$some, List$cons$(Fm$Parser$apply, List$cons$(Fm$Parser$mirror, List$cons$(Fm$Parser$list, List$cons$(Fm$Parser$log, List$cons$(Fm$Parser$forrange$u32, List$cons$(Fm$Parser$forrange$u32$2, List$cons$(Fm$Parser$forin, List$cons$(Fm$Parser$forin$2, List$cons$(Fm$Parser$do, List$cons$(Fm$Parser$case, List$cons$(Fm$Parser$open, List$cons$(Fm$Parser$goal, List$cons$(Fm$Parser$hole, List$cons$(Fm$Parser$u8, List$cons$(Fm$Parser$u16, List$cons$(Fm$Parser$u32, List$cons$(Fm$Parser$u64, List$cons$(Fm$Parser$nat, List$cons$(Fm$Parser$reference, List$nil)))))))))))))))))))))))))))))))))))))($3883)($3884);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3887 = self.idx;
                        var $3888 = self.code;
                        var $3889 = self.err;
                        var $3890 = Parser$Reply$error$($3887, $3888, $3889);
                        var $3886 = $3890;
                        break;
                    case 'Parser.Reply.value':
                        var $3891 = self.idx;
                        var $3892 = self.code;
                        var $3893 = self.val;
                        var $3894 = Fm$Parser$suffix$($3885, $3893, $3891, $3892);
                        var $3886 = $3894;
                        break;
                };
                var $3878 = $3886;
                break;
        };
        return $3878;
    };
    const Fm$Parser$term = x0 => x1 => Fm$Parser$term$(x0, x1);

    function Fm$Parser$name_term$(_idx$1, _code$2) {
        var self = Fm$Parser$name$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3896 = self.idx;
                var $3897 = self.code;
                var $3898 = self.err;
                var $3899 = Parser$Reply$error$($3896, $3897, $3898);
                var $3895 = $3899;
                break;
            case 'Parser.Reply.value':
                var $3900 = self.idx;
                var $3901 = self.code;
                var $3902 = self.val;
                var self = Fm$Parser$text$(":", $3900, $3901);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3904 = self.idx;
                        var $3905 = self.code;
                        var $3906 = self.err;
                        var $3907 = Parser$Reply$error$($3904, $3905, $3906);
                        var $3903 = $3907;
                        break;
                    case 'Parser.Reply.value':
                        var $3908 = self.idx;
                        var $3909 = self.code;
                        var $3910 = self.val;
                        var self = Fm$Parser$term$($3908, $3909);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3912 = self.idx;
                                var $3913 = self.code;
                                var $3914 = self.err;
                                var $3915 = Parser$Reply$error$($3912, $3913, $3914);
                                var $3911 = $3915;
                                break;
                            case 'Parser.Reply.value':
                                var $3916 = self.idx;
                                var $3917 = self.code;
                                var $3918 = self.val;
                                var $3919 = Parser$Reply$value$($3916, $3917, Pair$new$($3902, $3918));
                                var $3911 = $3919;
                                break;
                        };
                        var $3903 = $3911;
                        break;
                };
                var $3895 = $3903;
                break;
        };
        return $3895;
    };
    const Fm$Parser$name_term = x0 => x1 => Fm$Parser$name_term$(x0, x1);

    function Fm$Binder$new$(_eras$1, _name$2, _term$3) {
        var $3920 = ({
            _: 'Fm.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $3920;
    };
    const Fm$Binder$new = x0 => x1 => x2 => Fm$Binder$new$(x0, x1, x2);

    function Fm$Parser$binder$homo$(_eras$1, _idx$2, _code$3) {
        var self = Fm$Parser$text$((() => {
            var self = _eras$1;
            if (self) {
                var $3922 = "<";
                return $3922;
            } else {
                var $3923 = "(";
                return $3923;
            };
        })(), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3924 = self.idx;
                var $3925 = self.code;
                var $3926 = self.err;
                var $3927 = Parser$Reply$error$($3924, $3925, $3926);
                var $3921 = $3927;
                break;
            case 'Parser.Reply.value':
                var $3928 = self.idx;
                var $3929 = self.code;
                var $3930 = self.val;
                var self = Parser$until1$(Fm$Parser$text((() => {
                    var self = _eras$1;
                    if (self) {
                        var $3932 = ">";
                        return $3932;
                    } else {
                        var $3933 = ")";
                        return $3933;
                    };
                })()), Fm$Parser$item(Fm$Parser$name_term), $3928, $3929);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3934 = self.idx;
                        var $3935 = self.code;
                        var $3936 = self.err;
                        var $3937 = Parser$Reply$error$($3934, $3935, $3936);
                        var $3931 = $3937;
                        break;
                    case 'Parser.Reply.value':
                        var $3938 = self.idx;
                        var $3939 = self.code;
                        var $3940 = self.val;
                        var $3941 = Parser$Reply$value$($3938, $3939, List$mapped$($3940, (_pair$10 => {
                            var self = _pair$10;
                            switch (self._) {
                                case 'Pair.new':
                                    var $3943 = self.fst;
                                    var $3944 = self.snd;
                                    var $3945 = Fm$Binder$new$(_eras$1, $3943, $3944);
                                    var $3942 = $3945;
                                    break;
                            };
                            return $3942;
                        })));
                        var $3931 = $3941;
                        break;
                };
                var $3921 = $3931;
                break;
        };
        return $3921;
    };
    const Fm$Parser$binder$homo = x0 => x1 => x2 => Fm$Parser$binder$homo$(x0, x1, x2);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.nil':
                var $3947 = _bs$3;
                var $3946 = $3947;
                break;
            case 'List.cons':
                var $3948 = self.head;
                var $3949 = self.tail;
                var $3950 = List$cons$($3948, List$concat$($3949, _bs$3));
                var $3946 = $3950;
                break;
        };
        return $3946;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $3952 = List$nil;
                var $3951 = $3952;
                break;
            case 'List.cons':
                var $3953 = self.head;
                var $3954 = self.tail;
                var $3955 = List$concat$($3953, List$flatten$($3954));
                var $3951 = $3955;
                break;
        };
        return $3951;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Fm$Parser$binder$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Fm$Parser$binder$homo(Bool$true), List$cons$(Fm$Parser$binder$homo(Bool$false), List$nil))), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3957 = self.idx;
                var $3958 = self.code;
                var $3959 = self.err;
                var $3960 = Parser$Reply$error$($3957, $3958, $3959);
                var $3956 = $3960;
                break;
            case 'Parser.Reply.value':
                var $3961 = self.idx;
                var $3962 = self.code;
                var $3963 = self.val;
                var $3964 = Parser$Reply$value$($3961, $3962, List$flatten$($3963));
                var $3956 = $3964;
                break;
        };
        return $3956;
    };
    const Fm$Parser$binder = x0 => x1 => Fm$Parser$binder$(x0, x1);
    const List$length = a0 => (list_length(a0));

    function Fm$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.nil':
                var $3966 = _body$2;
                var $3965 = $3966;
                break;
            case 'List.cons':
                var $3967 = self.head;
                var $3968 = self.tail;
                var self = $3967;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $3970 = self.eras;
                        var $3971 = self.name;
                        var $3972 = self.term;
                        var $3973 = Fm$Term$all$($3970, "", $3971, $3972, (_s$8 => _x$9 => {
                            var $3974 = Fm$Parser$make_forall$($3968, _body$2);
                            return $3974;
                        }));
                        var $3969 = $3973;
                        break;
                };
                var $3965 = $3969;
                break;
        };
        return $3965;
    };
    const Fm$Parser$make_forall = x0 => x1 => Fm$Parser$make_forall$(x0, x1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.nil':
                        var $3975 = Maybe$none;
                        return $3975;
                    case 'List.cons':
                        var $3976 = self.head;
                        var $3977 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $3979 = Maybe$some$($3976);
                            var $3978 = $3979;
                        } else {
                            var $3980 = (self - 1n);
                            var $3981 = List$at$($3980, $3977);
                            var $3978 = $3981;
                        };
                        return $3978;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $3982 = List$at$(_index$2, List$reverse$(_list$3));
        return $3982;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Fm$Term$var$(_name$1, _indx$2) {
        var $3983 = ({
            _: 'Fm.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $3983;
    };
    const Fm$Term$var = x0 => x1 => Fm$Term$var$(x0, x1);

    function Fm$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $3985 = Pair$new$("", 0n);
            var $3984 = $3985;
        } else {
            var $3986 = self.charCodeAt(0);
            var $3987 = self.slice(1);
            var _name_skips$4 = Fm$Context$get_name_skips$($3987);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $3989 = self.fst;
                    var $3990 = self.snd;
                    var self = ($3986 === 94);
                    if (self) {
                        var $3992 = Pair$new$($3989, Nat$succ$($3990));
                        var $3991 = $3992;
                    } else {
                        var $3993 = Pair$new$(String$cons$($3986, $3989), $3990);
                        var $3991 = $3993;
                    };
                    var $3988 = $3991;
                    break;
            };
            var $3984 = $3988;
        };
        return $3984;
    };
    const Fm$Context$get_name_skips = x0 => Fm$Context$get_name_skips$(x0);

    function Fm$Name$eql$(_a$1, _b$2) {
        var $3994 = (_a$1 === _b$2);
        return $3994;
    };
    const Fm$Name$eql = x0 => x1 => Fm$Name$eql$(x0, x1);

    function Fm$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Fm$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Fm$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Fm$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.nil':
                        var $3995 = Maybe$none;
                        return $3995;
                    case 'List.cons':
                        var $3996 = self.head;
                        var $3997 = self.tail;
                        var self = $3996;
                        switch (self._) {
                            case 'Pair.new':
                                var $3999 = self.fst;
                                var $4000 = self.snd;
                                var self = Fm$Name$eql$(_name$1, $3999);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $4003 = Maybe$some$($4000);
                                        var $4002 = $4003;
                                    } else {
                                        var $4004 = (self - 1n);
                                        var $4005 = Fm$Context$find$go$(_name$1, $4004, $3997);
                                        var $4002 = $4005;
                                    };
                                    var $4001 = $4002;
                                } else {
                                    var $4006 = Fm$Context$find$go$(_name$1, _skip$2, $3997);
                                    var $4001 = $4006;
                                };
                                var $3998 = $4001;
                                break;
                        };
                        return $3998;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Context$find$go = x0 => x1 => x2 => Fm$Context$find$go$(x0, x1, x2);

    function Fm$Context$find$(_name$1, _ctx$2) {
        var self = Fm$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $4008 = self.fst;
                var $4009 = self.snd;
                var $4010 = Fm$Context$find$go$($4008, $4009, _ctx$2);
                var $4007 = $4010;
                break;
        };
        return $4007;
    };
    const Fm$Context$find = x0 => x1 => Fm$Context$find$(x0, x1);

    function Fm$Path$o$(_path$1, _x$2) {
        var $4011 = _path$1((_x$2 + '0'));
        return $4011;
    };
    const Fm$Path$o = x0 => x1 => Fm$Path$o$(x0, x1);

    function Fm$Path$i$(_path$1, _x$2) {
        var $4012 = _path$1((_x$2 + '1'));
        return $4012;
    };
    const Fm$Path$i = x0 => x1 => Fm$Path$i$(x0, x1);

    function Fm$Path$to_bits$(_path$1) {
        var $4013 = _path$1(Bits$e);
        return $4013;
    };
    const Fm$Path$to_bits = x0 => Fm$Path$to_bits$(x0);

    function Fm$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Fm.Term.var':
                var $4015 = self.name;
                var $4016 = self.indx;
                var self = List$at_last$($4016, _vars$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $4018 = Fm$Term$var$($4015, $4016);
                        var $4017 = $4018;
                        break;
                    case 'Maybe.some':
                        var $4019 = self.value;
                        var $4020 = Pair$snd$($4019);
                        var $4017 = $4020;
                        break;
                };
                var $4014 = $4017;
                break;
            case 'Fm.Term.ref':
                var $4021 = self.name;
                var self = Fm$Context$find$($4021, _vars$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $4023 = Fm$Term$ref$($4021);
                        var $4022 = $4023;
                        break;
                    case 'Maybe.some':
                        var $4024 = self.value;
                        var $4025 = $4024;
                        var $4022 = $4025;
                        break;
                };
                var $4014 = $4022;
                break;
            case 'Fm.Term.typ':
                var $4026 = Fm$Term$typ;
                var $4014 = $4026;
                break;
            case 'Fm.Term.all':
                var $4027 = self.eras;
                var $4028 = self.self;
                var $4029 = self.name;
                var $4030 = self.xtyp;
                var $4031 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $4032 = Fm$Term$all$($4027, $4028, $4029, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4030), (_s$10 => _x$11 => {
                    var $4033 = Fm$Term$bind$(List$cons$(Pair$new$($4029, _x$11), List$cons$(Pair$new$($4028, _s$10), _vars$1)), Fm$Path$i(_path$2), $4031(Fm$Term$var$($4028, _vlen$9))(Fm$Term$var$($4029, Nat$succ$(_vlen$9))));
                    return $4033;
                }));
                var $4014 = $4032;
                break;
            case 'Fm.Term.lam':
                var $4034 = self.name;
                var $4035 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $4036 = Fm$Term$lam$($4034, (_x$7 => {
                    var $4037 = Fm$Term$bind$(List$cons$(Pair$new$($4034, _x$7), _vars$1), Fm$Path$o(_path$2), $4035(Fm$Term$var$($4034, _vlen$6)));
                    return $4037;
                }));
                var $4014 = $4036;
                break;
            case 'Fm.Term.app':
                var $4038 = self.func;
                var $4039 = self.argm;
                var $4040 = Fm$Term$app$(Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4038), Fm$Term$bind$(_vars$1, Fm$Path$i(_path$2), $4039));
                var $4014 = $4040;
                break;
            case 'Fm.Term.let':
                var $4041 = self.name;
                var $4042 = self.expr;
                var $4043 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $4044 = Fm$Term$let$($4041, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4042), (_x$8 => {
                    var $4045 = Fm$Term$bind$(List$cons$(Pair$new$($4041, _x$8), _vars$1), Fm$Path$i(_path$2), $4043(Fm$Term$var$($4041, _vlen$7)));
                    return $4045;
                }));
                var $4014 = $4044;
                break;
            case 'Fm.Term.def':
                var $4046 = self.name;
                var $4047 = self.expr;
                var $4048 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $4049 = Fm$Term$def$($4046, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4047), (_x$8 => {
                    var $4050 = Fm$Term$bind$(List$cons$(Pair$new$($4046, _x$8), _vars$1), Fm$Path$i(_path$2), $4048(Fm$Term$var$($4046, _vlen$7)));
                    return $4050;
                }));
                var $4014 = $4049;
                break;
            case 'Fm.Term.ann':
                var $4051 = self.done;
                var $4052 = self.term;
                var $4053 = self.type;
                var $4054 = Fm$Term$ann$($4051, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4052), Fm$Term$bind$(_vars$1, Fm$Path$i(_path$2), $4053));
                var $4014 = $4054;
                break;
            case 'Fm.Term.gol':
                var $4055 = self.name;
                var $4056 = self.dref;
                var $4057 = self.verb;
                var $4058 = Fm$Term$gol$($4055, $4056, $4057);
                var $4014 = $4058;
                break;
            case 'Fm.Term.hol':
                var $4059 = self.path;
                var $4060 = Fm$Term$hol$(Fm$Path$to_bits$(_path$2));
                var $4014 = $4060;
                break;
            case 'Fm.Term.nat':
                var $4061 = self.natx;
                var $4062 = Fm$Term$nat$($4061);
                var $4014 = $4062;
                break;
            case 'Fm.Term.chr':
                var $4063 = self.chrx;
                var $4064 = Fm$Term$chr$($4063);
                var $4014 = $4064;
                break;
            case 'Fm.Term.str':
                var $4065 = self.strx;
                var $4066 = Fm$Term$str$($4065);
                var $4014 = $4066;
                break;
            case 'Fm.Term.cse':
                var $4067 = self.path;
                var $4068 = self.expr;
                var $4069 = self.name;
                var $4070 = self.with;
                var $4071 = self.cses;
                var $4072 = self.moti;
                var _expr$10 = Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4068);
                var _name$11 = $4069;
                var _wyth$12 = $4070;
                var _cses$13 = $4071;
                var _moti$14 = $4072;
                var $4073 = Fm$Term$cse$(Fm$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $4014 = $4073;
                break;
            case 'Fm.Term.ori':
                var $4074 = self.orig;
                var $4075 = self.expr;
                var $4076 = Fm$Term$ori$($4074, Fm$Term$bind$(_vars$1, _path$2, $4075));
                var $4014 = $4076;
                break;
        };
        return $4014;
    };
    const Fm$Term$bind = x0 => x1 => x2 => Fm$Term$bind$(x0, x1, x2);
    const Fm$Status$done = ({
        _: 'Fm.Status.done'
    });

    function Fm$define$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {
        var self = _done$9;
        if (self) {
            var $4078 = Fm$Status$done;
            var _stat$11 = $4078;
        } else {
            var $4079 = Fm$Status$init;
            var _stat$11 = $4079;
        };
        var $4077 = Fm$set$(_name$4, Fm$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$11), _defs$10);
        return $4077;
    };
    const Fm$define = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Fm$define$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    function Fm$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4081 = self.idx;
                var $4082 = self.code;
                var $4083 = self.err;
                var $4084 = Parser$Reply$error$($4081, $4082, $4083);
                var $4080 = $4084;
                break;
            case 'Parser.Reply.value':
                var $4085 = self.idx;
                var $4086 = self.code;
                var $4087 = self.val;
                var self = Fm$Parser$name1$($4085, $4086);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4089 = self.idx;
                        var $4090 = self.code;
                        var $4091 = self.err;
                        var $4092 = Parser$Reply$error$($4089, $4090, $4091);
                        var $4088 = $4092;
                        break;
                    case 'Parser.Reply.value':
                        var $4093 = self.idx;
                        var $4094 = self.code;
                        var $4095 = self.val;
                        var self = Parser$many$(Fm$Parser$binder)($4093)($4094);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4097 = self.idx;
                                var $4098 = self.code;
                                var $4099 = self.err;
                                var $4100 = Parser$Reply$error$($4097, $4098, $4099);
                                var $4096 = $4100;
                                break;
                            case 'Parser.Reply.value':
                                var $4101 = self.idx;
                                var $4102 = self.code;
                                var $4103 = self.val;
                                var _args$15 = List$flatten$($4103);
                                var self = Fm$Parser$text$(":", $4101, $4102);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4105 = self.idx;
                                        var $4106 = self.code;
                                        var $4107 = self.err;
                                        var $4108 = Parser$Reply$error$($4105, $4106, $4107);
                                        var $4104 = $4108;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4109 = self.idx;
                                        var $4110 = self.code;
                                        var $4111 = self.val;
                                        var self = Fm$Parser$term$($4109, $4110);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4113 = self.idx;
                                                var $4114 = self.code;
                                                var $4115 = self.err;
                                                var $4116 = Parser$Reply$error$($4113, $4114, $4115);
                                                var $4112 = $4116;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4117 = self.idx;
                                                var $4118 = self.code;
                                                var $4119 = self.val;
                                                var self = Fm$Parser$term$($4117, $4118);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4121 = self.idx;
                                                        var $4122 = self.code;
                                                        var $4123 = self.err;
                                                        var $4124 = Parser$Reply$error$($4121, $4122, $4123);
                                                        var $4120 = $4124;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4125 = self.idx;
                                                        var $4126 = self.code;
                                                        var $4127 = self.val;
                                                        var self = Fm$Parser$stop$($4087, $4125, $4126);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4129 = self.idx;
                                                                var $4130 = self.code;
                                                                var $4131 = self.err;
                                                                var $4132 = Parser$Reply$error$($4129, $4130, $4131);
                                                                var $4128 = $4132;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4133 = self.idx;
                                                                var $4134 = self.code;
                                                                var $4135 = self.val;
                                                                var _arit$28 = (list_length(_args$15));
                                                                var _type$29 = Fm$Parser$make_forall$(_args$15, $4119);
                                                                var _term$30 = Fm$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {
                                                                    var self = _x$30;
                                                                    switch (self._) {
                                                                        case 'Fm.Binder.new':
                                                                            var $4138 = self.eras;
                                                                            var $4139 = self.name;
                                                                            var $4140 = self.term;
                                                                            var $4141 = $4139;
                                                                            var $4137 = $4141;
                                                                            break;
                                                                    };
                                                                    return $4137;
                                                                })), $4127);
                                                                var _type$31 = Fm$Term$bind$(List$nil, (_x$31 => {
                                                                    var $4142 = (_x$31 + '1');
                                                                    return $4142;
                                                                }), _type$29);
                                                                var _term$32 = Fm$Term$bind$(List$nil, (_x$32 => {
                                                                    var $4143 = (_x$32 + '0');
                                                                    return $4143;
                                                                }), _term$30);
                                                                var _defs$33 = Fm$define$(_file$1, _code$2, $4135, $4095, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);
                                                                var $4136 = Parser$Reply$value$($4133, $4134, _defs$33);
                                                                var $4128 = $4136;
                                                                break;
                                                        };
                                                        var $4120 = $4128;
                                                        break;
                                                };
                                                var $4112 = $4120;
                                                break;
                                        };
                                        var $4104 = $4112;
                                        break;
                                };
                                var $4096 = $4104;
                                break;
                        };
                        var $4088 = $4096;
                        break;
                };
                var $4080 = $4088;
                break;
        };
        return $4080;
    };
    const Fm$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$def$(x0, x1, x2, x3, x4);

    function Maybe$default$(_a$2, _m$3) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.none':
                var $4145 = _a$2;
                var $4144 = $4145;
                break;
            case 'Maybe.some':
                var $4146 = self.value;
                var $4147 = $4146;
                var $4144 = $4147;
                break;
        };
        return $4144;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Fm$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $4148 = ({
            _: 'Fm.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $4148;
    };
    const Fm$Constructor$new = x0 => x1 => x2 => Fm$Constructor$new$(x0, x1, x2);

    function Fm$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Fm$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4150 = self.idx;
                var $4151 = self.code;
                var $4152 = self.err;
                var $4153 = Parser$Reply$error$($4150, $4151, $4152);
                var $4149 = $4153;
                break;
            case 'Parser.Reply.value':
                var $4154 = self.idx;
                var $4155 = self.code;
                var $4156 = self.val;
                var self = Parser$maybe$(Fm$Parser$binder, $4154, $4155);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4158 = self.idx;
                        var $4159 = self.code;
                        var $4160 = self.err;
                        var $4161 = Parser$Reply$error$($4158, $4159, $4160);
                        var $4157 = $4161;
                        break;
                    case 'Parser.Reply.value':
                        var $4162 = self.idx;
                        var $4163 = self.code;
                        var $4164 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Fm$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4167 = self.idx;
                                    var $4168 = self.code;
                                    var $4169 = self.err;
                                    var $4170 = Parser$Reply$error$($4167, $4168, $4169);
                                    var $4166 = $4170;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4171 = self.idx;
                                    var $4172 = self.code;
                                    var $4173 = self.val;
                                    var $4174 = Fm$Parser$binder$($4171, $4172);
                                    var $4166 = $4174;
                                    break;
                            };
                            return $4166;
                        }), $4162, $4163);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4175 = self.idx;
                                var $4176 = self.code;
                                var $4177 = self.err;
                                var $4178 = Parser$Reply$error$($4175, $4176, $4177);
                                var $4165 = $4178;
                                break;
                            case 'Parser.Reply.value':
                                var $4179 = self.idx;
                                var $4180 = self.code;
                                var $4181 = self.val;
                                var _args$13 = Maybe$default$(List$nil, $4164);
                                var _inds$14 = Maybe$default$(List$nil, $4181);
                                var $4182 = Parser$Reply$value$($4179, $4180, Fm$Constructor$new$($4156, _args$13, _inds$14));
                                var $4165 = $4182;
                                break;
                        };
                        var $4157 = $4165;
                        break;
                };
                var $4149 = $4157;
                break;
        };
        return $4149;
    };
    const Fm$Parser$constructor = x0 => x1 => x2 => Fm$Parser$constructor$(x0, x1, x2);

    function Fm$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $4183 = ({
            _: 'Fm.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $4183;
    };
    const Fm$Datatype$new = x0 => x1 => x2 => x3 => Fm$Datatype$new$(x0, x1, x2, x3);

    function Fm$Parser$datatype$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4185 = self.idx;
                var $4186 = self.code;
                var $4187 = self.err;
                var $4188 = Parser$Reply$error$($4185, $4186, $4187);
                var $4184 = $4188;
                break;
            case 'Parser.Reply.value':
                var $4189 = self.idx;
                var $4190 = self.code;
                var $4191 = self.val;
                var self = Fm$Parser$name1$($4189, $4190);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4193 = self.idx;
                        var $4194 = self.code;
                        var $4195 = self.err;
                        var $4196 = Parser$Reply$error$($4193, $4194, $4195);
                        var $4192 = $4196;
                        break;
                    case 'Parser.Reply.value':
                        var $4197 = self.idx;
                        var $4198 = self.code;
                        var $4199 = self.val;
                        var self = Parser$maybe$(Fm$Parser$binder, $4197, $4198);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4201 = self.idx;
                                var $4202 = self.code;
                                var $4203 = self.err;
                                var $4204 = Parser$Reply$error$($4201, $4202, $4203);
                                var $4200 = $4204;
                                break;
                            case 'Parser.Reply.value':
                                var $4205 = self.idx;
                                var $4206 = self.code;
                                var $4207 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Fm$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4210 = self.idx;
                                            var $4211 = self.code;
                                            var $4212 = self.err;
                                            var $4213 = Parser$Reply$error$($4210, $4211, $4212);
                                            var $4209 = $4213;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4214 = self.idx;
                                            var $4215 = self.code;
                                            var $4216 = self.val;
                                            var $4217 = Fm$Parser$binder$($4214, $4215);
                                            var $4209 = $4217;
                                            break;
                                    };
                                    return $4209;
                                }), $4205, $4206);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4218 = self.idx;
                                        var $4219 = self.code;
                                        var $4220 = self.err;
                                        var $4221 = Parser$Reply$error$($4218, $4219, $4220);
                                        var $4208 = $4221;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4222 = self.idx;
                                        var $4223 = self.code;
                                        var $4224 = self.val;
                                        var _pars$15 = Maybe$default$(List$nil, $4207);
                                        var _inds$16 = Maybe$default$(List$nil, $4224);
                                        var self = Fm$Parser$text$("{", $4222, $4223);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4226 = self.idx;
                                                var $4227 = self.code;
                                                var $4228 = self.err;
                                                var $4229 = Parser$Reply$error$($4226, $4227, $4228);
                                                var $4225 = $4229;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4230 = self.idx;
                                                var $4231 = self.code;
                                                var $4232 = self.val;
                                                var self = Parser$until$(Fm$Parser$text("}"), Fm$Parser$item(Fm$Parser$constructor($4199)))($4230)($4231);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4234 = self.idx;
                                                        var $4235 = self.code;
                                                        var $4236 = self.err;
                                                        var $4237 = Parser$Reply$error$($4234, $4235, $4236);
                                                        var $4233 = $4237;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4238 = self.idx;
                                                        var $4239 = self.code;
                                                        var $4240 = self.val;
                                                        var $4241 = Parser$Reply$value$($4238, $4239, Fm$Datatype$new$($4199, _pars$15, _inds$16, $4240));
                                                        var $4233 = $4241;
                                                        break;
                                                };
                                                var $4225 = $4233;
                                                break;
                                        };
                                        var $4208 = $4225;
                                        break;
                                };
                                var $4200 = $4208;
                                break;
                        };
                        var $4192 = $4200;
                        break;
                };
                var $4184 = $4192;
                break;
        };
        return $4184;
    };
    const Fm$Parser$datatype = x0 => x1 => Fm$Parser$datatype$(x0, x1);

    function Fm$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4244 = self.name;
                        var $4245 = self.pars;
                        var $4246 = self.inds;
                        var $4247 = self.ctrs;
                        var _slf$8 = Fm$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $4250 = _slf$8;
                            var $4251 = $4245;
                            let _slf$10 = $4250;
                            let _var$9;
                            while ($4251._ === 'List.cons') {
                                _var$9 = $4251.head;
                                var $4250 = Fm$Term$app$(_slf$10, Fm$Term$ref$((() => {
                                    var self = _var$9;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4252 = self.eras;
                                            var $4253 = self.name;
                                            var $4254 = self.term;
                                            var $4255 = $4253;
                                            return $4255;
                                    };
                                })()));
                                _slf$10 = $4250;
                                $4251 = $4251.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $4257 = _slf$9;
                            var $4258 = $4246;
                            let _slf$11 = $4257;
                            let _var$10;
                            while ($4258._ === 'List.cons') {
                                _var$10 = $4258.head;
                                var $4257 = Fm$Term$app$(_slf$11, Fm$Term$ref$((() => {
                                    var self = _var$10;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4259 = self.eras;
                                            var $4260 = self.name;
                                            var $4261 = self.term;
                                            var $4262 = $4260;
                                            return $4262;
                                    };
                                })()));
                                _slf$11 = $4257;
                                $4258 = $4258.tail;
                            }
                            return _slf$11;
                        })();
                        var $4248 = Fm$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $4263 = Fm$Term$typ;
                            return $4263;
                        }));
                        var $4243 = $4248;
                        break;
                };
                var $4242 = $4243;
                break;
            case 'List.cons':
                var $4264 = self.head;
                var $4265 = self.tail;
                var self = $4264;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4267 = self.eras;
                        var $4268 = self.name;
                        var $4269 = self.term;
                        var $4270 = Fm$Term$all$($4267, "", $4268, $4269, (_s$9 => _x$10 => {
                            var $4271 = Fm$Datatype$build_term$motive$go$(_type$1, _name$2, $4265);
                            return $4271;
                        }));
                        var $4266 = $4270;
                        break;
                };
                var $4242 = $4266;
                break;
        };
        return $4242;
    };
    const Fm$Datatype$build_term$motive$go = x0 => x1 => x2 => Fm$Datatype$build_term$motive$go$(x0, x1, x2);

    function Fm$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4273 = self.name;
                var $4274 = self.pars;
                var $4275 = self.inds;
                var $4276 = self.ctrs;
                var $4277 = Fm$Datatype$build_term$motive$go$(_type$1, $4273, $4275);
                var $4272 = $4277;
                break;
        };
        return $4272;
    };
    const Fm$Datatype$build_term$motive = x0 => Fm$Datatype$build_term$motive$(x0);

    function Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4280 = self.name;
                        var $4281 = self.pars;
                        var $4282 = self.inds;
                        var $4283 = self.ctrs;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Fm.Constructor.new':
                                var $4285 = self.name;
                                var $4286 = self.args;
                                var $4287 = self.inds;
                                var _ret$11 = Fm$Term$ref$(Fm$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $4290 = _ret$11;
                                    var $4291 = $4287;
                                    let _ret$13 = $4290;
                                    let _var$12;
                                    while ($4291._ === 'List.cons') {
                                        _var$12 = $4291.head;
                                        var $4290 = Fm$Term$app$(_ret$13, (() => {
                                            var self = _var$12;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4292 = self.eras;
                                                    var $4293 = self.name;
                                                    var $4294 = self.term;
                                                    var $4295 = $4294;
                                                    return $4295;
                                            };
                                        })());
                                        _ret$13 = $4290;
                                        $4291 = $4291.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($4280, List$cons$(Fm$Name$read$("."), List$cons$($4285, List$nil))));
                                var _slf$14 = Fm$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $4297 = _slf$14;
                                    var $4298 = $4281;
                                    let _slf$16 = $4297;
                                    let _var$15;
                                    while ($4298._ === 'List.cons') {
                                        _var$15 = $4298.head;
                                        var $4297 = Fm$Term$app$(_slf$16, Fm$Term$ref$((() => {
                                            var self = _var$15;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4299 = self.eras;
                                                    var $4300 = self.name;
                                                    var $4301 = self.term;
                                                    var $4302 = $4300;
                                                    return $4302;
                                            };
                                        })()));
                                        _slf$16 = $4297;
                                        $4298 = $4298.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $4304 = _slf$15;
                                    var $4305 = $4286;
                                    let _slf$17 = $4304;
                                    let _var$16;
                                    while ($4305._ === 'List.cons') {
                                        _var$16 = $4305.head;
                                        var $4304 = Fm$Term$app$(_slf$17, Fm$Term$ref$((() => {
                                            var self = _var$16;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4306 = self.eras;
                                                    var $4307 = self.name;
                                                    var $4308 = self.term;
                                                    var $4309 = $4307;
                                                    return $4309;
                                            };
                                        })()));
                                        _slf$17 = $4304;
                                        $4305 = $4305.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $4288 = Fm$Term$app$(_ret$12, _slf$16);
                                var $4284 = $4288;
                                break;
                        };
                        var $4279 = $4284;
                        break;
                };
                var $4278 = $4279;
                break;
            case 'List.cons':
                var $4310 = self.head;
                var $4311 = self.tail;
                var self = $4310;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4313 = self.eras;
                        var $4314 = self.name;
                        var $4315 = self.term;
                        var _eras$9 = $4313;
                        var _name$10 = $4314;
                        var _xtyp$11 = $4315;
                        var _body$12 = Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $4311);
                        var $4316 = Fm$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $4317 = _body$12;
                            return $4317;
                        }));
                        var $4312 = $4316;
                        break;
                };
                var $4278 = $4312;
                break;
        };
        return $4278;
    };
    const Fm$Datatype$build_term$constructor$go = x0 => x1 => x2 => Fm$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Fm$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Fm.Constructor.new':
                var $4319 = self.name;
                var $4320 = self.args;
                var $4321 = self.inds;
                var $4322 = Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $4320);
                var $4318 = $4322;
                break;
        };
        return $4318;
    };
    const Fm$Datatype$build_term$constructor = x0 => x1 => Fm$Datatype$build_term$constructor$(x0, x1);

    function Fm$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4325 = self.name;
                        var $4326 = self.pars;
                        var $4327 = self.inds;
                        var $4328 = self.ctrs;
                        var _ret$8 = Fm$Term$ref$(Fm$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $4331 = _ret$8;
                            var $4332 = $4327;
                            let _ret$10 = $4331;
                            let _var$9;
                            while ($4332._ === 'List.cons') {
                                _var$9 = $4332.head;
                                var $4331 = Fm$Term$app$(_ret$10, Fm$Term$ref$((() => {
                                    var self = _var$9;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4333 = self.eras;
                                            var $4334 = self.name;
                                            var $4335 = self.term;
                                            var $4336 = $4334;
                                            return $4336;
                                    };
                                })()));
                                _ret$10 = $4331;
                                $4332 = $4332.tail;
                            }
                            return _ret$10;
                        })();
                        var $4329 = Fm$Term$app$(_ret$9, Fm$Term$ref$((_name$2 + ".Self")));
                        var $4324 = $4329;
                        break;
                };
                var $4323 = $4324;
                break;
            case 'List.cons':
                var $4337 = self.head;
                var $4338 = self.tail;
                var self = $4337;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4340 = self.name;
                        var $4341 = self.args;
                        var $4342 = self.inds;
                        var $4343 = Fm$Term$all$(Bool$false, "", $4340, Fm$Datatype$build_term$constructor$(_type$1, $4337), (_s$9 => _x$10 => {
                            var $4344 = Fm$Datatype$build_term$constructors$go$(_type$1, _name$2, $4338);
                            return $4344;
                        }));
                        var $4339 = $4343;
                        break;
                };
                var $4323 = $4339;
                break;
        };
        return $4323;
    };
    const Fm$Datatype$build_term$constructors$go = x0 => x1 => x2 => Fm$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Fm$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4346 = self.name;
                var $4347 = self.pars;
                var $4348 = self.inds;
                var $4349 = self.ctrs;
                var $4350 = Fm$Datatype$build_term$constructors$go$(_type$1, $4346, $4349);
                var $4345 = $4350;
                break;
        };
        return $4345;
    };
    const Fm$Datatype$build_term$constructors = x0 => Fm$Datatype$build_term$constructors$(x0);

    function Fm$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.nil':
                        var $4353 = Fm$Term$all$(Bool$true, (_name$2 + ".Self"), Fm$Name$read$("P"), Fm$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $4354 = Fm$Datatype$build_term$constructors$(_type$1);
                            return $4354;
                        }));
                        var $4352 = $4353;
                        break;
                    case 'List.cons':
                        var $4355 = self.head;
                        var $4356 = self.tail;
                        var self = $4355;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4358 = self.eras;
                                var $4359 = self.name;
                                var $4360 = self.term;
                                var $4361 = Fm$Term$lam$($4359, (_x$10 => {
                                    var $4362 = Fm$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $4356);
                                    return $4362;
                                }));
                                var $4357 = $4361;
                                break;
                        };
                        var $4352 = $4357;
                        break;
                };
                var $4351 = $4352;
                break;
            case 'List.cons':
                var $4363 = self.head;
                var $4364 = self.tail;
                var self = $4363;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4366 = self.eras;
                        var $4367 = self.name;
                        var $4368 = self.term;
                        var $4369 = Fm$Term$lam$($4367, (_x$10 => {
                            var $4370 = Fm$Datatype$build_term$go$(_type$1, _name$2, $4364, _inds$4);
                            return $4370;
                        }));
                        var $4365 = $4369;
                        break;
                };
                var $4351 = $4365;
                break;
        };
        return $4351;
    };
    const Fm$Datatype$build_term$go = x0 => x1 => x2 => x3 => Fm$Datatype$build_term$go$(x0, x1, x2, x3);

    function Fm$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4372 = self.name;
                var $4373 = self.pars;
                var $4374 = self.inds;
                var $4375 = self.ctrs;
                var $4376 = Fm$Datatype$build_term$go$(_type$1, $4372, $4373, $4374);
                var $4371 = $4376;
                break;
        };
        return $4371;
    };
    const Fm$Datatype$build_term = x0 => Fm$Datatype$build_term$(x0);

    function Fm$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.nil':
                        var $4379 = Fm$Term$typ;
                        var $4378 = $4379;
                        break;
                    case 'List.cons':
                        var $4380 = self.head;
                        var $4381 = self.tail;
                        var self = $4380;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4383 = self.eras;
                                var $4384 = self.name;
                                var $4385 = self.term;
                                var $4386 = Fm$Term$all$(Bool$false, "", $4384, $4385, (_s$10 => _x$11 => {
                                    var $4387 = Fm$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $4381);
                                    return $4387;
                                }));
                                var $4382 = $4386;
                                break;
                        };
                        var $4378 = $4382;
                        break;
                };
                var $4377 = $4378;
                break;
            case 'List.cons':
                var $4388 = self.head;
                var $4389 = self.tail;
                var self = $4388;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4391 = self.eras;
                        var $4392 = self.name;
                        var $4393 = self.term;
                        var $4394 = Fm$Term$all$(Bool$false, "", $4392, $4393, (_s$10 => _x$11 => {
                            var $4395 = Fm$Datatype$build_type$go$(_type$1, _name$2, $4389, _inds$4);
                            return $4395;
                        }));
                        var $4390 = $4394;
                        break;
                };
                var $4377 = $4390;
                break;
        };
        return $4377;
    };
    const Fm$Datatype$build_type$go = x0 => x1 => x2 => x3 => Fm$Datatype$build_type$go$(x0, x1, x2, x3);

    function Fm$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4397 = self.name;
                var $4398 = self.pars;
                var $4399 = self.inds;
                var $4400 = self.ctrs;
                var $4401 = Fm$Datatype$build_type$go$(_type$1, $4397, $4398, $4399);
                var $4396 = $4401;
                break;
        };
        return $4396;
    };
    const Fm$Datatype$build_type = x0 => Fm$Datatype$build_type$(x0);

    function Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4404 = self.name;
                        var $4405 = self.args;
                        var $4406 = self.inds;
                        var _ret$7 = Fm$Term$ref$($4404);
                        var _ret$8 = (() => {
                            var $4409 = _ret$7;
                            var $4410 = $4405;
                            let _ret$9 = $4409;
                            let _arg$8;
                            while ($4410._ === 'List.cons') {
                                _arg$8 = $4410.head;
                                var $4409 = Fm$Term$app$(_ret$9, Fm$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4411 = self.eras;
                                            var $4412 = self.name;
                                            var $4413 = self.term;
                                            var $4414 = $4412;
                                            return $4414;
                                    };
                                })()));
                                _ret$9 = $4409;
                                $4410 = $4410.tail;
                            }
                            return _ret$9;
                        })();
                        var $4407 = _ret$8;
                        var $4403 = $4407;
                        break;
                };
                var $4402 = $4403;
                break;
            case 'List.cons':
                var $4415 = self.head;
                var $4416 = self.tail;
                var self = $4415;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4418 = self.name;
                        var $4419 = self.args;
                        var $4420 = self.inds;
                        var $4421 = Fm$Term$lam$($4418, (_x$9 => {
                            var $4422 = Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, $4416);
                            return $4422;
                        }));
                        var $4417 = $4421;
                        break;
                };
                var $4402 = $4417;
                break;
        };
        return $4402;
    };
    const Fm$Constructor$build_term$opt$go = x0 => x1 => x2 => Fm$Constructor$build_term$opt$go$(x0, x1, x2);

    function Fm$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4424 = self.name;
                var $4425 = self.pars;
                var $4426 = self.inds;
                var $4427 = self.ctrs;
                var $4428 = Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, $4427);
                var $4423 = $4428;
                break;
        };
        return $4423;
    };
    const Fm$Constructor$build_term$opt = x0 => x1 => Fm$Constructor$build_term$opt$(x0, x1);

    function Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.nil':
                        var $4431 = Fm$Term$lam$(Fm$Name$read$("P"), (_x$6 => {
                            var $4432 = Fm$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $4432;
                        }));
                        var $4430 = $4431;
                        break;
                    case 'List.cons':
                        var $4433 = self.head;
                        var $4434 = self.tail;
                        var self = $4433;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4436 = self.eras;
                                var $4437 = self.name;
                                var $4438 = self.term;
                                var $4439 = Fm$Term$lam$($4437, (_x$11 => {
                                    var $4440 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $4434);
                                    return $4440;
                                }));
                                var $4435 = $4439;
                                break;
                        };
                        var $4430 = $4435;
                        break;
                };
                var $4429 = $4430;
                break;
            case 'List.cons':
                var $4441 = self.head;
                var $4442 = self.tail;
                var self = $4441;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4444 = self.eras;
                        var $4445 = self.name;
                        var $4446 = self.term;
                        var $4447 = Fm$Term$lam$($4445, (_x$11 => {
                            var $4448 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $4442, _args$5);
                            return $4448;
                        }));
                        var $4443 = $4447;
                        break;
                };
                var $4429 = $4443;
                break;
        };
        return $4429;
    };
    const Fm$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Fm$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Fm$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4450 = self.name;
                var $4451 = self.pars;
                var $4452 = self.inds;
                var $4453 = self.ctrs;
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4455 = self.name;
                        var $4456 = self.args;
                        var $4457 = self.inds;
                        var $4458 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, $4450, $4451, $4456);
                        var $4454 = $4458;
                        break;
                };
                var $4449 = $4454;
                break;
        };
        return $4449;
    };
    const Fm$Constructor$build_term = x0 => x1 => Fm$Constructor$build_term$(x0, x1);

    function Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Fm.Datatype.new':
                                var $4462 = self.name;
                                var $4463 = self.pars;
                                var $4464 = self.inds;
                                var $4465 = self.ctrs;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Fm.Constructor.new':
                                        var $4467 = self.name;
                                        var $4468 = self.args;
                                        var $4469 = self.inds;
                                        var _type$13 = Fm$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $4472 = _type$13;
                                            var $4473 = $4463;
                                            let _type$15 = $4472;
                                            let _var$14;
                                            while ($4473._ === 'List.cons') {
                                                _var$14 = $4473.head;
                                                var $4472 = Fm$Term$app$(_type$15, Fm$Term$ref$((() => {
                                                    var self = _var$14;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4474 = self.eras;
                                                            var $4475 = self.name;
                                                            var $4476 = self.term;
                                                            var $4477 = $4475;
                                                            return $4477;
                                                    };
                                                })()));
                                                _type$15 = $4472;
                                                $4473 = $4473.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $4479 = _type$14;
                                            var $4480 = $4469;
                                            let _type$16 = $4479;
                                            let _var$15;
                                            while ($4480._ === 'List.cons') {
                                                _var$15 = $4480.head;
                                                var $4479 = Fm$Term$app$(_type$16, (() => {
                                                    var self = _var$15;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4481 = self.eras;
                                                            var $4482 = self.name;
                                                            var $4483 = self.term;
                                                            var $4484 = $4483;
                                                            return $4484;
                                                    };
                                                })());
                                                _type$16 = $4479;
                                                $4480 = $4480.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $4470 = _type$15;
                                        var $4466 = $4470;
                                        break;
                                };
                                var $4461 = $4466;
                                break;
                        };
                        var $4460 = $4461;
                        break;
                    case 'List.cons':
                        var $4485 = self.head;
                        var $4486 = self.tail;
                        var self = $4485;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4488 = self.eras;
                                var $4489 = self.name;
                                var $4490 = self.term;
                                var $4491 = Fm$Term$all$($4488, "", $4489, $4490, (_s$11 => _x$12 => {
                                    var $4492 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $4486);
                                    return $4492;
                                }));
                                var $4487 = $4491;
                                break;
                        };
                        var $4460 = $4487;
                        break;
                };
                var $4459 = $4460;
                break;
            case 'List.cons':
                var $4493 = self.head;
                var $4494 = self.tail;
                var self = $4493;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4496 = self.eras;
                        var $4497 = self.name;
                        var $4498 = self.term;
                        var $4499 = Fm$Term$all$($4496, "", $4497, $4498, (_s$11 => _x$12 => {
                            var $4500 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $4494, _args$5);
                            return $4500;
                        }));
                        var $4495 = $4499;
                        break;
                };
                var $4459 = $4495;
                break;
        };
        return $4459;
    };
    const Fm$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Fm$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Fm$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4502 = self.name;
                var $4503 = self.pars;
                var $4504 = self.inds;
                var $4505 = self.ctrs;
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4507 = self.name;
                        var $4508 = self.args;
                        var $4509 = self.inds;
                        var $4510 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, $4502, $4503, $4508);
                        var $4506 = $4510;
                        break;
                };
                var $4501 = $4506;
                break;
        };
        return $4501;
    };
    const Fm$Constructor$build_type = x0 => x1 => Fm$Constructor$build_type$(x0, x1);

    function Fm$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4512 = self.idx;
                var $4513 = self.code;
                var $4514 = self.err;
                var $4515 = Parser$Reply$error$($4512, $4513, $4514);
                var $4511 = $4515;
                break;
            case 'Parser.Reply.value':
                var $4516 = self.idx;
                var $4517 = self.code;
                var $4518 = self.val;
                var self = Fm$Parser$datatype$($4516, $4517);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4520 = self.idx;
                        var $4521 = self.code;
                        var $4522 = self.err;
                        var $4523 = Parser$Reply$error$($4520, $4521, $4522);
                        var $4519 = $4523;
                        break;
                    case 'Parser.Reply.value':
                        var $4524 = self.idx;
                        var $4525 = self.code;
                        var $4526 = self.val;
                        var self = Fm$Parser$stop$($4518, $4524, $4525);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4528 = self.idx;
                                var $4529 = self.code;
                                var $4530 = self.err;
                                var $4531 = Parser$Reply$error$($4528, $4529, $4530);
                                var $4527 = $4531;
                                break;
                            case 'Parser.Reply.value':
                                var $4532 = self.idx;
                                var $4533 = self.code;
                                var $4534 = self.val;
                                var self = $4526;
                                switch (self._) {
                                    case 'Fm.Datatype.new':
                                        var $4536 = self.name;
                                        var $4537 = self.pars;
                                        var $4538 = self.inds;
                                        var $4539 = self.ctrs;
                                        var _term$19 = Fm$Datatype$build_term$($4526);
                                        var _term$20 = Fm$Term$bind$(List$nil, (_x$20 => {
                                            var $4541 = (_x$20 + '1');
                                            return $4541;
                                        }), _term$19);
                                        var _type$21 = Fm$Datatype$build_type$($4526);
                                        var _type$22 = Fm$Term$bind$(List$nil, (_x$22 => {
                                            var $4542 = (_x$22 + '0');
                                            return $4542;
                                        }), _type$21);
                                        var _arit$23 = ((list_length($4537)) + (list_length($4538)));
                                        var _defs$24 = Fm$define$(_file$1, _code$2, $4534, $4536, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);
                                        var _defs$25 = List$fold$($4539, _defs$24, (_ctr$25 => _defs$26 => {
                                            var _typ_name$27 = $4536;
                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Fm.Constructor.new':
                                                        var $4544 = self.name;
                                                        var $4545 = self.args;
                                                        var $4546 = self.inds;
                                                        var $4547 = $4545;
                                                        return $4547;
                                                };
                                            })())));
                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Fm$Name$read$("."), List$cons$((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Fm.Constructor.new':
                                                        var $4548 = self.name;
                                                        var $4549 = self.args;
                                                        var $4550 = self.inds;
                                                        var $4551 = $4548;
                                                        return $4551;
                                                };
                                            })(), List$nil))));
                                            var _ctr_term$30 = Fm$Constructor$build_term$($4526, _ctr$25);
                                            var _ctr_term$31 = Fm$Term$bind$(List$nil, (_x$31 => {
                                                var $4552 = (_x$31 + '1');
                                                return $4552;
                                            }), _ctr_term$30);
                                            var _ctr_type$32 = Fm$Constructor$build_type$($4526, _ctr$25);
                                            var _ctr_type$33 = Fm$Term$bind$(List$nil, (_x$33 => {
                                                var $4553 = (_x$33 + '0');
                                                return $4553;
                                            }), _ctr_type$32);
                                            var $4543 = Fm$define$(_file$1, _code$2, $4534, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);
                                            return $4543;
                                        }));
                                        var $4540 = (_idx$26 => _code$27 => {
                                            var $4554 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);
                                            return $4554;
                                        });
                                        var $4535 = $4540;
                                        break;
                                };
                                var $4535 = $4535($4532)($4533);
                                var $4527 = $4535;
                                break;
                        };
                        var $4519 = $4527;
                        break;
                };
                var $4511 = $4519;
                break;
        };
        return $4511;
    };
    const Fm$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4556 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $4555 = $4556;
        } else {
            var $4557 = self.charCodeAt(0);
            var $4558 = self.slice(1);
            var $4559 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $4555 = $4559;
        };
        return $4555;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Fm$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4561 = self.idx;
                var $4562 = self.code;
                var $4563 = self.err;
                var $4564 = Parser$Reply$error$($4561, $4562, $4563);
                var $4560 = $4564;
                break;
            case 'Parser.Reply.value':
                var $4565 = self.idx;
                var $4566 = self.code;
                var $4567 = self.val;
                var self = Parser$eof$($4565, $4566);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4569 = self.idx;
                        var $4570 = self.code;
                        var $4571 = self.err;
                        var $4572 = Parser$Reply$error$($4569, $4570, $4571);
                        var $4568 = $4572;
                        break;
                    case 'Parser.Reply.value':
                        var $4573 = self.idx;
                        var $4574 = self.code;
                        var $4575 = self.val;
                        var $4576 = Parser$Reply$value$($4573, $4574, _defs$3);
                        var $4568 = $4576;
                        break;
                };
                var $4560 = $4568;
                break;
        };
        return $4560;
    };
    const Fm$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$end$(x0, x1, x2, x3, x4);

    function Fm$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4578 = self.idx;
                var $4579 = self.code;
                var $4580 = self.err;
                var $4581 = Parser$Reply$error$($4578, $4579, $4580);
                var $4577 = $4581;
                break;
            case 'Parser.Reply.value':
                var $4582 = self.idx;
                var $4583 = self.code;
                var $4584 = self.val;
                var self = $4584;
                if (self) {
                    var $4586 = (_idx$9 => _code$10 => {
                        var $4587 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $4587;
                    });
                    var $4585 = $4586;
                } else {
                    var $4588 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Fm$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Fm$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Fm$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4590 = self.idx;
                                var $4591 = self.code;
                                var $4592 = self.err;
                                var $4593 = Parser$Reply$error$($4590, $4591, $4592);
                                var $4589 = $4593;
                                break;
                            case 'Parser.Reply.value':
                                var $4594 = self.idx;
                                var $4595 = self.code;
                                var $4596 = self.val;
                                var $4597 = Fm$Parser$file$(_file$1, _code$2, $4596, $4594, $4595);
                                var $4589 = $4597;
                                break;
                        };
                        return $4589;
                    });
                    var $4585 = $4588;
                };
                var $4585 = $4585($4582)($4583);
                var $4577 = $4585;
                break;
        };
        return $4577;
    };
    const Fm$Parser$file = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$(x0, x1, x2, x3, x4);

    function Either$(_A$1, _B$2) {
        var $4598 = null;
        return $4598;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $4600 = "";
                var $4599 = $4600;
                break;
            case 'List.cons':
                var $4601 = self.head;
                var $4602 = self.tail;
                var $4603 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $4604 = "";
                        return $4604;
                    } else {
                        var $4605 = _sep$1;
                        return $4605;
                    };
                })(), List$cons$($4601, List$cons$(String$join$go$(_sep$1, $4602, Bool$false), List$nil))));
                var $4599 = $4603;
                break;
        };
        return $4599;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $4606 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $4606;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Fm$highlight$end$(_col$1, _row$2, _res$3) {
        var $4607 = String$join$("\u{a}", _res$3);
        return $4607;
    };
    const Fm$highlight$end = x0 => x1 => x2 => Fm$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4609 = _a$4;
                var $4608 = $4609;
                break;
            case 'Maybe.some':
                var $4610 = self.value;
                var $4611 = _f$5($4610);
                var $4608 = $4611;
                break;
        };
        return $4608;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4613 = Bool$true;
            var $4612 = $4613;
        } else {
            var $4614 = (self - 1n);
            var $4615 = Bool$false;
            var $4612 = $4615;
        };
        return $4612;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4617 = Nat$zero;
            var $4616 = $4617;
        } else {
            var $4618 = (self - 1n);
            var $4619 = Nat$succ$(Nat$succ$(Nat$double$($4618)));
            var $4616 = $4619;
        };
        return $4616;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4621 = Nat$zero;
            var $4620 = $4621;
        } else {
            var $4622 = (self - 1n);
            var $4623 = $4622;
            var $4620 = $4623;
        };
        return $4620;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $4625 = _str$3;
            var $4624 = $4625;
        } else {
            var $4626 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $4628 = String$cons$(_chr$2, String$pad_right$($4626, _chr$2, ""));
                var $4627 = $4628;
            } else {
                var $4629 = self.charCodeAt(0);
                var $4630 = self.slice(1);
                var $4631 = String$cons$($4629, String$pad_right$($4626, _chr$2, $4630));
                var $4627 = $4631;
            };
            var $4624 = $4627;
        };
        return $4624;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $4632 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $4632;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Either$left$(_value$3) {
        var $4633 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4633;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4634 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4634;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4635 = Either$left$(_n$1);
                    return $4635;
                } else {
                    var $4636 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4638 = Either$right$(Nat$succ$($4636));
                        var $4637 = $4638;
                    } else {
                        var $4639 = (self - 1n);
                        var $4640 = Nat$sub_rem$($4639, $4636);
                        var $4637 = $4640;
                    };
                    return $4637;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4641 = self.value;
                        var $4642 = Nat$div_mod$go$($4641, _m$2, Nat$succ$(_d$3));
                        return $4642;
                    case 'Either.right':
                        var $4643 = self.value;
                        var $4644 = Pair$new$(_d$3, _n$1);
                        return $4644;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4645 = self.fst;
                        var $4646 = self.snd;
                        var self = $4645;
                        if (self === 0n) {
                            var $4648 = List$cons$($4646, _res$3);
                            var $4647 = $4648;
                        } else {
                            var $4649 = (self - 1n);
                            var $4650 = Nat$to_base$go$(_base$1, $4645, List$cons$($4646, _res$3));
                            var $4647 = $4650;
                        };
                        return $4647;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4651 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4651;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4652 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4652;
                } else {
                    var $4653 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4655 = _r$3;
                        var $4654 = $4655;
                    } else {
                        var $4656 = (self - 1n);
                        var $4657 = Nat$mod$go$($4656, $4653, Nat$succ$(_r$3));
                        var $4654 = $4657;
                    };
                    return $4654;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);

    function Nat$mod$(_n$1, _m$2) {
        var $4658 = Nat$mod$go$(_n$1, _m$2, 0n);
        return $4658;
    };
    const Nat$mod = x0 => x1 => Nat$mod$(x0, x1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = Nat$mod$(_n$2, _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.none':
                    var $4661 = 35;
                    var $4660 = $4661;
                    break;
                case 'Maybe.some':
                    var $4662 = self.value;
                    var $4663 = $4662;
                    var $4660 = $4663;
                    break;
            };
            var $4659 = $4660;
        } else {
            var $4664 = 35;
            var $4659 = $4664;
        };
        return $4659;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4665 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4666 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4666;
        }));
        return $4665;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4667 = Nat$to_string_base$(10n, _n$1);
        return $4667;
    };
    const Nat$show = x0 => Nat$show$(x0);
    const Bool$not = a0 => (!a0);

    function Fm$color$(_col$1, _str$2) {
        var $4668 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $4668;
    };
    const Fm$color = x0 => x1 => Fm$color$(x0, x1);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.nil':
                var $4670 = List$nil;
                var $4669 = $4670;
                break;
            case 'List.cons':
                var $4671 = self.head;
                var $4672 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $4674 = List$nil;
                    var $4673 = $4674;
                } else {
                    var $4675 = (self - 1n);
                    var $4676 = List$cons$($4671, List$take$($4675, $4672));
                    var $4673 = $4676;
                };
                var $4669 = $4673;
                break;
        };
        return $4669;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Fm$highlight$tc$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Fm$highlight$tc$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Fm$highlight$tc = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Fm$highlight$tc$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $4678 = Fm$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $4677 = $4678;
                } else {
                    var $4679 = self.charCodeAt(0);
                    var $4680 = self.slice(1);
                    var self = ($4679 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $4683 = Fm$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $4682 = $4683;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $4686 = Maybe$some$(_spa$9);
                                        var $4685 = $4686;
                                        break;
                                    case 'Maybe.some':
                                        var $4687 = self.value;
                                        var $4688 = Maybe$some$(Nat$pred$($4687));
                                        var $4685 = $4688;
                                        break;
                                };
                                var _lft$14 = $4685;
                            } else {
                                var $4689 = (self - 1n);
                                var $4690 = _lft$6;
                                var _lft$14 = $4690;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $4684 = Fm$highlight$tc$($4680, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $4682 = $4684;
                        };
                        var $4681 = $4682;
                    } else {
                        var _chr$12 = String$cons$($4679, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $4692 = String$reverse$(Fm$color$("31", Fm$color$("4", _chr$12)));
                            var _chr$13 = $4692;
                        } else {
                            var $4693 = _chr$12;
                            var _chr$13 = $4693;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $4694 = List$take$(_spa$9, _res$8);
                            var _res$14 = $4694;
                        } else {
                            var $4695 = _res$8;
                            var _res$14 = $4695;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $4691 = Fm$highlight$tc$($4680, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $4681 = $4691;
                    };
                    var $4677 = $4681;
                };
                return $4677;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$highlight$tc = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$highlight$tc$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $4696 = Fm$highlight$tc$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $4696;
    };
    const Fm$highlight = x0 => x1 => x2 => Fm$highlight$(x0, x1, x2);

    function Fm$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Fm$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4698 = self.idx;
                var $4699 = self.code;
                var $4700 = self.err;
                var _err$7 = $4700;
                var _hig$8 = Fm$highlight$(_code$2, $4698, Nat$succ$($4698));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $4701 = Either$left$(_str$9);
                var $4697 = $4701;
                break;
            case 'Parser.Reply.value':
                var $4702 = self.idx;
                var $4703 = self.code;
                var $4704 = self.val;
                var $4705 = Either$right$($4704);
                var $4697 = $4705;
                break;
        };
        return $4697;
    };
    const Fm$Defs$read = x0 => x1 => x2 => Fm$Defs$read$(x0, x1, x2);

    function Fm$Synth$load$go$(_name$1, _files$2, _defs$3) {
        var self = _files$2;
        switch (self._) {
            case 'List.nil':
                var $4707 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                    var $4708 = _m$pure$5;
                    return $4708;
                }))(Maybe$none);
                var $4706 = $4707;
                break;
            case 'List.cons':
                var $4709 = self.head;
                var $4710 = self.tail;
                var $4711 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                    var $4712 = _m$bind$6;
                    return $4712;
                }))(IO$get_file$($4709))((_code$6 => {
                    var _read$7 = Fm$Defs$read$($4709, _code$6, _defs$3);
                    var self = _read$7;
                    switch (self._) {
                        case 'Either.left':
                            var $4714 = self.value;
                            var $4715 = Fm$Synth$load$go$(_name$1, $4710, _defs$3);
                            var $4713 = $4715;
                            break;
                        case 'Either.right':
                            var $4716 = self.value;
                            var _defs$9 = $4716;
                            var self = Fm$get$(_name$1, _defs$9);
                            switch (self._) {
                                case 'Maybe.none':
                                    var $4718 = Fm$Synth$load$go$(_name$1, $4710, _defs$9);
                                    var $4717 = $4718;
                                    break;
                                case 'Maybe.some':
                                    var $4719 = self.value;
                                    var $4720 = IO$monad$((_m$bind$11 => _m$pure$12 => {
                                        var $4721 = _m$pure$12;
                                        return $4721;
                                    }))(Maybe$some$(_defs$9));
                                    var $4717 = $4720;
                                    break;
                            };
                            var $4713 = $4717;
                            break;
                    };
                    return $4713;
                }));
                var $4706 = $4711;
                break;
        };
        return $4706;
    };
    const Fm$Synth$load$go = x0 => x1 => x2 => Fm$Synth$load$go$(x0, x1, x2);

    function Fm$Synth$files_of$make$(_names$1, _last$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $4723 = List$nil;
                var $4722 = $4723;
                break;
            case 'List.cons':
                var $4724 = self.head;
                var $4725 = self.tail;
                var _head$5 = (_last$2 + ($4724 + ".fm"));
                var _tail$6 = Fm$Synth$files_of$make$($4725, (_last$2 + ($4724 + "/")));
                var $4726 = List$cons$(_head$5, _tail$6);
                var $4722 = $4726;
                break;
        };
        return $4722;
    };
    const Fm$Synth$files_of$make = x0 => x1 => Fm$Synth$files_of$make$(x0, x1);

    function Char$eql$(_a$1, _b$2) {
        var $4727 = (_a$1 === _b$2);
        return $4727;
    };
    const Char$eql = x0 => x1 => Char$eql$(x0, x1);

    function String$starts_with$(_xs$1, _match$2) {
        var String$starts_with$ = (_xs$1, _match$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _match$2]
        });
        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);
        var arg = [_xs$1, _match$2];
        while (true) {
            let [_xs$1, _match$2] = arg;
            var R = (() => {
                var self = _match$2;
                if (self.length === 0) {
                    var $4728 = Bool$true;
                    return $4728;
                } else {
                    var $4729 = self.charCodeAt(0);
                    var $4730 = self.slice(1);
                    var self = _xs$1;
                    if (self.length === 0) {
                        var $4732 = Bool$false;
                        var $4731 = $4732;
                    } else {
                        var $4733 = self.charCodeAt(0);
                        var $4734 = self.slice(1);
                        var self = Char$eql$($4729, $4733);
                        if (self) {
                            var $4736 = String$starts_with$($4734, $4730);
                            var $4735 = $4736;
                        } else {
                            var $4737 = Bool$false;
                            var $4735 = $4737;
                        };
                        var $4731 = $4735;
                    };
                    return $4731;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);

    function String$drop$(_n$1, _xs$2) {
        var String$drop$ = (_n$1, _xs$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _xs$2]
        });
        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);
        var arg = [_n$1, _xs$2];
        while (true) {
            let [_n$1, _xs$2] = arg;
            var R = (() => {
                var self = _n$1;
                if (self === 0n) {
                    var $4738 = _xs$2;
                    return $4738;
                } else {
                    var $4739 = (self - 1n);
                    var self = _xs$2;
                    if (self.length === 0) {
                        var $4741 = String$nil;
                        var $4740 = $4741;
                    } else {
                        var $4742 = self.charCodeAt(0);
                        var $4743 = self.slice(1);
                        var $4744 = String$drop$($4739, $4743);
                        var $4740 = $4744;
                    };
                    return $4740;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$drop = x0 => x1 => String$drop$(x0, x1);

    function String$length$go$(_xs$1, _n$2) {
        var String$length$go$ = (_xs$1, _n$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _n$2]
        });
        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);
        var arg = [_xs$1, _n$2];
        while (true) {
            let [_xs$1, _n$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $4745 = _n$2;
                    return $4745;
                } else {
                    var $4746 = self.charCodeAt(0);
                    var $4747 = self.slice(1);
                    var $4748 = String$length$go$($4747, Nat$succ$(_n$2));
                    return $4748;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$length$go = x0 => x1 => String$length$go$(x0, x1);

    function String$length$(_xs$1) {
        var $4749 = String$length$go$(_xs$1, 0n);
        return $4749;
    };
    const String$length = x0 => String$length$(x0);

    function String$split$go$(_xs$1, _match$2, _last$3) {
        var self = _xs$1;
        if (self.length === 0) {
            var $4751 = List$cons$(_last$3, List$nil);
            var $4750 = $4751;
        } else {
            var $4752 = self.charCodeAt(0);
            var $4753 = self.slice(1);
            var self = String$starts_with$(_xs$1, _match$2);
            if (self) {
                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);
                var $4755 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, ""));
                var $4754 = $4755;
            } else {
                var _next$6 = String$cons$($4752, String$nil);
                var $4756 = String$split$go$($4753, _match$2, (_last$3 + _next$6));
                var $4754 = $4756;
            };
            var $4750 = $4754;
        };
        return $4750;
    };
    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);

    function String$split$(_xs$1, _match$2) {
        var $4757 = String$split$go$(_xs$1, _match$2, "");
        return $4757;
    };
    const String$split = x0 => x1 => String$split$(x0, x1);

    function Fm$Synth$files_of$(_name$1) {
        var $4758 = List$reverse$(Fm$Synth$files_of$make$(String$split$(_name$1, "."), ""));
        return $4758;
    };
    const Fm$Synth$files_of = x0 => Fm$Synth$files_of$(x0);

    function Fm$Synth$load$(_name$1, _defs$2) {
        var $4759 = Fm$Synth$load$go$(_name$1, Fm$Synth$files_of$(_name$1), _defs$2);
        return $4759;
    };
    const Fm$Synth$load = x0 => x1 => Fm$Synth$load$(x0, x1);
    const Fm$Status$wait = ({
        _: 'Fm.Status.wait'
    });

    function Fm$Check$(_V$1) {
        var $4760 = null;
        return $4760;
    };
    const Fm$Check = x0 => Fm$Check$(x0);

    function Fm$Check$result$(_value$2, _errors$3) {
        var $4761 = ({
            _: 'Fm.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $4761;
    };
    const Fm$Check$result = x0 => x1 => Fm$Check$result$(x0, x1);

    function Fm$Error$undefined_reference$(_origin$1, _name$2) {
        var $4762 = ({
            _: 'Fm.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $4762;
    };
    const Fm$Error$undefined_reference = x0 => x1 => Fm$Error$undefined_reference$(x0, x1);

    function Fm$Error$waiting$(_name$1) {
        var $4763 = ({
            _: 'Fm.Error.waiting',
            'name': _name$1
        });
        return $4763;
    };
    const Fm$Error$waiting = x0 => Fm$Error$waiting$(x0);

    function Fm$Error$indirect$(_name$1) {
        var $4764 = ({
            _: 'Fm.Error.indirect',
            'name': _name$1
        });
        return $4764;
    };
    const Fm$Error$indirect = x0 => Fm$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4766 = Maybe$none;
                var $4765 = $4766;
                break;
            case 'Maybe.some':
                var $4767 = self.value;
                var $4768 = Maybe$some$(_f$4($4767));
                var $4765 = $4768;
                break;
        };
        return $4765;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Fm$MPath$o$(_path$1) {
        var $4769 = Maybe$mapped$(_path$1, Fm$Path$o);
        return $4769;
    };
    const Fm$MPath$o = x0 => Fm$MPath$o$(x0);

    function Fm$MPath$i$(_path$1) {
        var $4770 = Maybe$mapped$(_path$1, Fm$Path$i);
        return $4770;
    };
    const Fm$MPath$i = x0 => Fm$MPath$i$(x0);

    function Fm$Error$patch$(_path$1, _term$2) {
        var $4771 = ({
            _: 'Fm.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $4771;
    };
    const Fm$Error$patch = x0 => x1 => Fm$Error$patch$(x0, x1);

    function Fm$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.none':
                var $4773 = Bits$e;
                var $4772 = $4773;
                break;
            case 'Maybe.some':
                var $4774 = self.value;
                var $4775 = $4774(Bits$e);
                var $4772 = $4775;
                break;
        };
        return $4772;
    };
    const Fm$MPath$to_bits = x0 => Fm$MPath$to_bits$(x0);

    function Fm$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $4776 = ({
            _: 'Fm.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $4776;
    };
    const Fm$Error$type_mismatch = x0 => x1 => x2 => x3 => Fm$Error$type_mismatch$(x0, x1, x2, x3);

    function Fm$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $4777 = ({
            _: 'Fm.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $4777;
    };
    const Fm$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Fm$Error$show_goal$(x0, x1, x2, x3, x4);

    function Fm$Term$normalize$(_term$1, _defs$2) {
        var self = Fm$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Fm.Term.var':
                var $4779 = self.name;
                var $4780 = self.indx;
                var $4781 = Fm$Term$var$($4779, $4780);
                var $4778 = $4781;
                break;
            case 'Fm.Term.ref':
                var $4782 = self.name;
                var $4783 = Fm$Term$ref$($4782);
                var $4778 = $4783;
                break;
            case 'Fm.Term.typ':
                var $4784 = Fm$Term$typ;
                var $4778 = $4784;
                break;
            case 'Fm.Term.all':
                var $4785 = self.eras;
                var $4786 = self.self;
                var $4787 = self.name;
                var $4788 = self.xtyp;
                var $4789 = self.body;
                var $4790 = Fm$Term$all$($4785, $4786, $4787, Fm$Term$normalize$($4788, _defs$2), (_s$8 => _x$9 => {
                    var $4791 = Fm$Term$normalize$($4789(_s$8)(_x$9), _defs$2);
                    return $4791;
                }));
                var $4778 = $4790;
                break;
            case 'Fm.Term.lam':
                var $4792 = self.name;
                var $4793 = self.body;
                var $4794 = Fm$Term$lam$($4792, (_x$5 => {
                    var $4795 = Fm$Term$normalize$($4793(_x$5), _defs$2);
                    return $4795;
                }));
                var $4778 = $4794;
                break;
            case 'Fm.Term.app':
                var $4796 = self.func;
                var $4797 = self.argm;
                var $4798 = Fm$Term$app$(Fm$Term$normalize$($4796, _defs$2), Fm$Term$normalize$($4797, _defs$2));
                var $4778 = $4798;
                break;
            case 'Fm.Term.let':
                var $4799 = self.name;
                var $4800 = self.expr;
                var $4801 = self.body;
                var $4802 = Fm$Term$let$($4799, Fm$Term$normalize$($4800, _defs$2), (_x$6 => {
                    var $4803 = Fm$Term$normalize$($4801(_x$6), _defs$2);
                    return $4803;
                }));
                var $4778 = $4802;
                break;
            case 'Fm.Term.def':
                var $4804 = self.name;
                var $4805 = self.expr;
                var $4806 = self.body;
                var $4807 = Fm$Term$def$($4804, Fm$Term$normalize$($4805, _defs$2), (_x$6 => {
                    var $4808 = Fm$Term$normalize$($4806(_x$6), _defs$2);
                    return $4808;
                }));
                var $4778 = $4807;
                break;
            case 'Fm.Term.ann':
                var $4809 = self.done;
                var $4810 = self.term;
                var $4811 = self.type;
                var $4812 = Fm$Term$ann$($4809, Fm$Term$normalize$($4810, _defs$2), Fm$Term$normalize$($4811, _defs$2));
                var $4778 = $4812;
                break;
            case 'Fm.Term.gol':
                var $4813 = self.name;
                var $4814 = self.dref;
                var $4815 = self.verb;
                var $4816 = Fm$Term$gol$($4813, $4814, $4815);
                var $4778 = $4816;
                break;
            case 'Fm.Term.hol':
                var $4817 = self.path;
                var $4818 = Fm$Term$hol$($4817);
                var $4778 = $4818;
                break;
            case 'Fm.Term.nat':
                var $4819 = self.natx;
                var $4820 = Fm$Term$nat$($4819);
                var $4778 = $4820;
                break;
            case 'Fm.Term.chr':
                var $4821 = self.chrx;
                var $4822 = Fm$Term$chr$($4821);
                var $4778 = $4822;
                break;
            case 'Fm.Term.str':
                var $4823 = self.strx;
                var $4824 = Fm$Term$str$($4823);
                var $4778 = $4824;
                break;
            case 'Fm.Term.cse':
                var $4825 = self.path;
                var $4826 = self.expr;
                var $4827 = self.name;
                var $4828 = self.with;
                var $4829 = self.cses;
                var $4830 = self.moti;
                var $4831 = _term$1;
                var $4778 = $4831;
                break;
            case 'Fm.Term.ori':
                var $4832 = self.orig;
                var $4833 = self.expr;
                var $4834 = Fm$Term$normalize$($4833, _defs$2);
                var $4778 = $4834;
                break;
        };
        return $4778;
    };
    const Fm$Term$normalize = x0 => x1 => Fm$Term$normalize$(x0, x1);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $4836 = List$nil;
                var $4835 = $4836;
                break;
            case 'List.cons':
                var $4837 = self.head;
                var $4838 = self.tail;
                var $4839 = $4838;
                var $4835 = $4839;
                break;
        };
        return $4835;
    };
    const List$tail = x0 => List$tail$(x0);

    function Fm$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Fm$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Fm$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Fm$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4840 = self.name;
                        var $4841 = self.indx;
                        var $4842 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4842;
                    case 'Fm.Term.ref':
                        var $4843 = self.name;
                        var $4844 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4844;
                    case 'Fm.Term.typ':
                        var $4845 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4845;
                    case 'Fm.Term.all':
                        var $4846 = self.eras;
                        var $4847 = self.self;
                        var $4848 = self.name;
                        var $4849 = self.xtyp;
                        var $4850 = self.body;
                        var $4851 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4851;
                    case 'Fm.Term.lam':
                        var $4852 = self.name;
                        var $4853 = self.body;
                        var $4854 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4854;
                    case 'Fm.Term.app':
                        var $4855 = self.func;
                        var $4856 = self.argm;
                        var $4857 = Fm$SmartMotive$vals$cont$(_expr$1, $4855, List$cons$($4856, _args$3), _defs$4);
                        return $4857;
                    case 'Fm.Term.let':
                        var $4858 = self.name;
                        var $4859 = self.expr;
                        var $4860 = self.body;
                        var $4861 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4861;
                    case 'Fm.Term.def':
                        var $4862 = self.name;
                        var $4863 = self.expr;
                        var $4864 = self.body;
                        var $4865 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4865;
                    case 'Fm.Term.ann':
                        var $4866 = self.done;
                        var $4867 = self.term;
                        var $4868 = self.type;
                        var $4869 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4869;
                    case 'Fm.Term.gol':
                        var $4870 = self.name;
                        var $4871 = self.dref;
                        var $4872 = self.verb;
                        var $4873 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4873;
                    case 'Fm.Term.hol':
                        var $4874 = self.path;
                        var $4875 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4875;
                    case 'Fm.Term.nat':
                        var $4876 = self.natx;
                        var $4877 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4877;
                    case 'Fm.Term.chr':
                        var $4878 = self.chrx;
                        var $4879 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4879;
                    case 'Fm.Term.str':
                        var $4880 = self.strx;
                        var $4881 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4881;
                    case 'Fm.Term.cse':
                        var $4882 = self.path;
                        var $4883 = self.expr;
                        var $4884 = self.name;
                        var $4885 = self.with;
                        var $4886 = self.cses;
                        var $4887 = self.moti;
                        var $4888 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4888;
                    case 'Fm.Term.ori':
                        var $4889 = self.orig;
                        var $4890 = self.expr;
                        var $4891 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4891;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Fm$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Fm$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Fm$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Fm$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Fm$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4892 = self.name;
                        var $4893 = self.indx;
                        var $4894 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4894;
                    case 'Fm.Term.ref':
                        var $4895 = self.name;
                        var $4896 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4896;
                    case 'Fm.Term.typ':
                        var $4897 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4897;
                    case 'Fm.Term.all':
                        var $4898 = self.eras;
                        var $4899 = self.self;
                        var $4900 = self.name;
                        var $4901 = self.xtyp;
                        var $4902 = self.body;
                        var $4903 = Fm$SmartMotive$vals$(_expr$1, $4902(Fm$Term$typ)(Fm$Term$typ), _defs$3);
                        return $4903;
                    case 'Fm.Term.lam':
                        var $4904 = self.name;
                        var $4905 = self.body;
                        var $4906 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4906;
                    case 'Fm.Term.app':
                        var $4907 = self.func;
                        var $4908 = self.argm;
                        var $4909 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4909;
                    case 'Fm.Term.let':
                        var $4910 = self.name;
                        var $4911 = self.expr;
                        var $4912 = self.body;
                        var $4913 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4913;
                    case 'Fm.Term.def':
                        var $4914 = self.name;
                        var $4915 = self.expr;
                        var $4916 = self.body;
                        var $4917 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4917;
                    case 'Fm.Term.ann':
                        var $4918 = self.done;
                        var $4919 = self.term;
                        var $4920 = self.type;
                        var $4921 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4921;
                    case 'Fm.Term.gol':
                        var $4922 = self.name;
                        var $4923 = self.dref;
                        var $4924 = self.verb;
                        var $4925 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4925;
                    case 'Fm.Term.hol':
                        var $4926 = self.path;
                        var $4927 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4927;
                    case 'Fm.Term.nat':
                        var $4928 = self.natx;
                        var $4929 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4929;
                    case 'Fm.Term.chr':
                        var $4930 = self.chrx;
                        var $4931 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4931;
                    case 'Fm.Term.str':
                        var $4932 = self.strx;
                        var $4933 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4933;
                    case 'Fm.Term.cse':
                        var $4934 = self.path;
                        var $4935 = self.expr;
                        var $4936 = self.name;
                        var $4937 = self.with;
                        var $4938 = self.cses;
                        var $4939 = self.moti;
                        var $4940 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4940;
                    case 'Fm.Term.ori':
                        var $4941 = self.orig;
                        var $4942 = self.expr;
                        var $4943 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4943;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$vals = x0 => x1 => x2 => Fm$SmartMotive$vals$(x0, x1, x2);

    function Fm$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Fm$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Fm$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Fm$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4944 = self.name;
                        var $4945 = self.indx;
                        var $4946 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4946;
                    case 'Fm.Term.ref':
                        var $4947 = self.name;
                        var $4948 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4948;
                    case 'Fm.Term.typ':
                        var $4949 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4949;
                    case 'Fm.Term.all':
                        var $4950 = self.eras;
                        var $4951 = self.self;
                        var $4952 = self.name;
                        var $4953 = self.xtyp;
                        var $4954 = self.body;
                        var $4955 = Fm$SmartMotive$nams$cont$(_name$1, $4954(Fm$Term$ref$($4951))(Fm$Term$ref$($4952)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($4952, List$nil)))), _binds$3), _defs$4);
                        return $4955;
                    case 'Fm.Term.lam':
                        var $4956 = self.name;
                        var $4957 = self.body;
                        var $4958 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4958;
                    case 'Fm.Term.app':
                        var $4959 = self.func;
                        var $4960 = self.argm;
                        var $4961 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4961;
                    case 'Fm.Term.let':
                        var $4962 = self.name;
                        var $4963 = self.expr;
                        var $4964 = self.body;
                        var $4965 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4965;
                    case 'Fm.Term.def':
                        var $4966 = self.name;
                        var $4967 = self.expr;
                        var $4968 = self.body;
                        var $4969 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4969;
                    case 'Fm.Term.ann':
                        var $4970 = self.done;
                        var $4971 = self.term;
                        var $4972 = self.type;
                        var $4973 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4973;
                    case 'Fm.Term.gol':
                        var $4974 = self.name;
                        var $4975 = self.dref;
                        var $4976 = self.verb;
                        var $4977 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4977;
                    case 'Fm.Term.hol':
                        var $4978 = self.path;
                        var $4979 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4979;
                    case 'Fm.Term.nat':
                        var $4980 = self.natx;
                        var $4981 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4981;
                    case 'Fm.Term.chr':
                        var $4982 = self.chrx;
                        var $4983 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4983;
                    case 'Fm.Term.str':
                        var $4984 = self.strx;
                        var $4985 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4985;
                    case 'Fm.Term.cse':
                        var $4986 = self.path;
                        var $4987 = self.expr;
                        var $4988 = self.name;
                        var $4989 = self.with;
                        var $4990 = self.cses;
                        var $4991 = self.moti;
                        var $4992 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4992;
                    case 'Fm.Term.ori':
                        var $4993 = self.orig;
                        var $4994 = self.expr;
                        var $4995 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4995;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Fm$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Fm$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Fm$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Fm.Term.var':
                var $4997 = self.name;
                var $4998 = self.indx;
                var $4999 = List$nil;
                var $4996 = $4999;
                break;
            case 'Fm.Term.ref':
                var $5000 = self.name;
                var $5001 = List$nil;
                var $4996 = $5001;
                break;
            case 'Fm.Term.typ':
                var $5002 = List$nil;
                var $4996 = $5002;
                break;
            case 'Fm.Term.all':
                var $5003 = self.eras;
                var $5004 = self.self;
                var $5005 = self.name;
                var $5006 = self.xtyp;
                var $5007 = self.body;
                var $5008 = Fm$SmartMotive$nams$cont$(_name$1, $5006, List$nil, _defs$3);
                var $4996 = $5008;
                break;
            case 'Fm.Term.lam':
                var $5009 = self.name;
                var $5010 = self.body;
                var $5011 = List$nil;
                var $4996 = $5011;
                break;
            case 'Fm.Term.app':
                var $5012 = self.func;
                var $5013 = self.argm;
                var $5014 = List$nil;
                var $4996 = $5014;
                break;
            case 'Fm.Term.let':
                var $5015 = self.name;
                var $5016 = self.expr;
                var $5017 = self.body;
                var $5018 = List$nil;
                var $4996 = $5018;
                break;
            case 'Fm.Term.def':
                var $5019 = self.name;
                var $5020 = self.expr;
                var $5021 = self.body;
                var $5022 = List$nil;
                var $4996 = $5022;
                break;
            case 'Fm.Term.ann':
                var $5023 = self.done;
                var $5024 = self.term;
                var $5025 = self.type;
                var $5026 = List$nil;
                var $4996 = $5026;
                break;
            case 'Fm.Term.gol':
                var $5027 = self.name;
                var $5028 = self.dref;
                var $5029 = self.verb;
                var $5030 = List$nil;
                var $4996 = $5030;
                break;
            case 'Fm.Term.hol':
                var $5031 = self.path;
                var $5032 = List$nil;
                var $4996 = $5032;
                break;
            case 'Fm.Term.nat':
                var $5033 = self.natx;
                var $5034 = List$nil;
                var $4996 = $5034;
                break;
            case 'Fm.Term.chr':
                var $5035 = self.chrx;
                var $5036 = List$nil;
                var $4996 = $5036;
                break;
            case 'Fm.Term.str':
                var $5037 = self.strx;
                var $5038 = List$nil;
                var $4996 = $5038;
                break;
            case 'Fm.Term.cse':
                var $5039 = self.path;
                var $5040 = self.expr;
                var $5041 = self.name;
                var $5042 = self.with;
                var $5043 = self.cses;
                var $5044 = self.moti;
                var $5045 = List$nil;
                var $4996 = $5045;
                break;
            case 'Fm.Term.ori':
                var $5046 = self.orig;
                var $5047 = self.expr;
                var $5048 = List$nil;
                var $4996 = $5048;
                break;
        };
        return $4996;
    };
    const Fm$SmartMotive$nams = x0 => x1 => x2 => Fm$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.nil':
                var $5050 = List$nil;
                var $5049 = $5050;
                break;
            case 'List.cons':
                var $5051 = self.head;
                var $5052 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.nil':
                        var $5054 = List$nil;
                        var $5053 = $5054;
                        break;
                    case 'List.cons':
                        var $5055 = self.head;
                        var $5056 = self.tail;
                        var $5057 = List$cons$(Pair$new$($5051, $5055), List$zip$($5052, $5056));
                        var $5053 = $5057;
                        break;
                };
                var $5049 = $5053;
                break;
        };
        return $5049;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Fm$Term$serialize$name$(_name$1) {
        var $5058 = (fm_name_to_bits(_name$1));
        return $5058;
    };
    const Fm$Term$serialize$name = x0 => Fm$Term$serialize$name$(x0);

    function Fm$Term$serialize$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $5060 = self.name;
                var $5061 = self.indx;
                var self = ($5061 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $5061 <= 0n ? 0n : _depth$2 - $5061)))));
                    var $5063 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $5062 = $5063;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($5061)));
                    var $5064 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $5062 = $5064;
                };
                var $5059 = $5062;
                break;
            case 'Fm.Term.ref':
                var $5065 = self.name;
                var _name$7 = a1 => (a1 + Fm$Term$serialize$name$($5065));
                var $5066 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $5059 = $5066;
                break;
            case 'Fm.Term.typ':
                var $5067 = (((_x$5 + '1') + '1') + '0');
                var $5059 = $5067;
                break;
            case 'Fm.Term.all':
                var $5068 = self.eras;
                var $5069 = self.self;
                var $5070 = self.name;
                var $5071 = self.xtyp;
                var $5072 = self.body;
                var self = $5068;
                if (self) {
                    var $5074 = Bits$i;
                    var _eras$11 = $5074;
                } else {
                    var $5075 = Bits$o;
                    var _eras$11 = $5075;
                };
                var _self$12 = a1 => (a1 + (fm_name_to_bits($5069)));
                var _xtyp$13 = Fm$Term$serialize($5071)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Fm$Term$serialize($5072(Fm$Term$var$($5069, _depth$2))(Fm$Term$var$($5070, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $5073 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $5059 = $5073;
                break;
            case 'Fm.Term.lam':
                var $5076 = self.name;
                var $5077 = self.body;
                var _body$8 = Fm$Term$serialize($5077(Fm$Term$var$($5076, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $5078 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $5059 = $5078;
                break;
            case 'Fm.Term.app':
                var $5079 = self.func;
                var $5080 = self.argm;
                var _func$8 = Fm$Term$serialize($5079)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Fm$Term$serialize($5080)(_depth$2)(_init$3)(_diff$4);
                var $5081 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $5059 = $5081;
                break;
            case 'Fm.Term.let':
                var $5082 = self.name;
                var $5083 = self.expr;
                var $5084 = self.body;
                var _expr$9 = Fm$Term$serialize($5083)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Fm$Term$serialize($5084(Fm$Term$var$($5082, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $5085 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $5059 = $5085;
                break;
            case 'Fm.Term.def':
                var $5086 = self.name;
                var $5087 = self.expr;
                var $5088 = self.body;
                var $5089 = Fm$Term$serialize$($5088($5087), _depth$2, _init$3, _diff$4, _x$5);
                var $5059 = $5089;
                break;
            case 'Fm.Term.ann':
                var $5090 = self.done;
                var $5091 = self.term;
                var $5092 = self.type;
                var $5093 = Fm$Term$serialize$($5091, _depth$2, _init$3, _diff$4, _x$5);
                var $5059 = $5093;
                break;
            case 'Fm.Term.gol':
                var $5094 = self.name;
                var $5095 = self.dref;
                var $5096 = self.verb;
                var _name$9 = a1 => (a1 + (fm_name_to_bits($5094)));
                var $5097 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $5059 = $5097;
                break;
            case 'Fm.Term.hol':
                var $5098 = self.path;
                var $5099 = _x$5;
                var $5059 = $5099;
                break;
            case 'Fm.Term.nat':
                var $5100 = self.natx;
                var $5101 = Fm$Term$serialize$(Fm$Term$unroll_nat$($5100), _depth$2, _init$3, _diff$4, _x$5);
                var $5059 = $5101;
                break;
            case 'Fm.Term.chr':
                var $5102 = self.chrx;
                var $5103 = Fm$Term$serialize$(Fm$Term$unroll_chr$($5102), _depth$2, _init$3, _diff$4, _x$5);
                var $5059 = $5103;
                break;
            case 'Fm.Term.str':
                var $5104 = self.strx;
                var $5105 = Fm$Term$serialize$(Fm$Term$unroll_str$($5104), _depth$2, _init$3, _diff$4, _x$5);
                var $5059 = $5105;
                break;
            case 'Fm.Term.cse':
                var $5106 = self.path;
                var $5107 = self.expr;
                var $5108 = self.name;
                var $5109 = self.with;
                var $5110 = self.cses;
                var $5111 = self.moti;
                var $5112 = _diff$4(_x$5);
                var $5059 = $5112;
                break;
            case 'Fm.Term.ori':
                var $5113 = self.orig;
                var $5114 = self.expr;
                var $5115 = Fm$Term$serialize$($5114, _depth$2, _init$3, _diff$4, _x$5);
                var $5059 = $5115;
                break;
        };
        return $5059;
    };
    const Fm$Term$serialize = x0 => x1 => x2 => x3 => x4 => Fm$Term$serialize$(x0, x1, x2, x3, x4);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Fm$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Fm$Term$serialize$(_a$1, _lv$3, _lv$3, Bits$o, Bits$e);
        var _bh$5 = Fm$Term$serialize$(_b$2, _lv$3, _lv$3, Bits$i, Bits$e);
        var $5116 = (_bh$5 === _ah$4);
        return $5116;
    };
    const Fm$Term$identical = x0 => x1 => x2 => Fm$Term$identical$(x0, x1, x2);

    function Fm$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Fm$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $5118 = _to$3;
            var $5117 = $5118;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Fm.Term.var':
                    var $5120 = self.name;
                    var $5121 = self.indx;
                    var $5122 = Fm$Term$var$($5120, $5121);
                    var $5119 = $5122;
                    break;
                case 'Fm.Term.ref':
                    var $5123 = self.name;
                    var $5124 = Fm$Term$ref$($5123);
                    var $5119 = $5124;
                    break;
                case 'Fm.Term.typ':
                    var $5125 = Fm$Term$typ;
                    var $5119 = $5125;
                    break;
                case 'Fm.Term.all':
                    var $5126 = self.eras;
                    var $5127 = self.self;
                    var $5128 = self.name;
                    var $5129 = self.xtyp;
                    var $5130 = self.body;
                    var _xtyp$10 = Fm$SmartMotive$replace$($5129, _from$2, _to$3, _lv$4);
                    var _body$11 = $5130(Fm$Term$ref$($5127))(Fm$Term$ref$($5128));
                    var _body$12 = Fm$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $5131 = Fm$Term$all$($5126, $5127, $5128, _xtyp$10, (_s$13 => _x$14 => {
                        var $5132 = _body$12;
                        return $5132;
                    }));
                    var $5119 = $5131;
                    break;
                case 'Fm.Term.lam':
                    var $5133 = self.name;
                    var $5134 = self.body;
                    var _body$7 = $5134(Fm$Term$ref$($5133));
                    var _body$8 = Fm$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5135 = Fm$Term$lam$($5133, (_x$9 => {
                        var $5136 = _body$8;
                        return $5136;
                    }));
                    var $5119 = $5135;
                    break;
                case 'Fm.Term.app':
                    var $5137 = self.func;
                    var $5138 = self.argm;
                    var _func$7 = Fm$SmartMotive$replace$($5137, _from$2, _to$3, _lv$4);
                    var _argm$8 = Fm$SmartMotive$replace$($5138, _from$2, _to$3, _lv$4);
                    var $5139 = Fm$Term$app$(_func$7, _argm$8);
                    var $5119 = $5139;
                    break;
                case 'Fm.Term.let':
                    var $5140 = self.name;
                    var $5141 = self.expr;
                    var $5142 = self.body;
                    var _expr$8 = Fm$SmartMotive$replace$($5141, _from$2, _to$3, _lv$4);
                    var _body$9 = $5142(Fm$Term$ref$($5140));
                    var _body$10 = Fm$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5143 = Fm$Term$let$($5140, _expr$8, (_x$11 => {
                        var $5144 = _body$10;
                        return $5144;
                    }));
                    var $5119 = $5143;
                    break;
                case 'Fm.Term.def':
                    var $5145 = self.name;
                    var $5146 = self.expr;
                    var $5147 = self.body;
                    var _expr$8 = Fm$SmartMotive$replace$($5146, _from$2, _to$3, _lv$4);
                    var _body$9 = $5147(Fm$Term$ref$($5145));
                    var _body$10 = Fm$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5148 = Fm$Term$def$($5145, _expr$8, (_x$11 => {
                        var $5149 = _body$10;
                        return $5149;
                    }));
                    var $5119 = $5148;
                    break;
                case 'Fm.Term.ann':
                    var $5150 = self.done;
                    var $5151 = self.term;
                    var $5152 = self.type;
                    var _term$8 = Fm$SmartMotive$replace$($5151, _from$2, _to$3, _lv$4);
                    var _type$9 = Fm$SmartMotive$replace$($5152, _from$2, _to$3, _lv$4);
                    var $5153 = Fm$Term$ann$($5150, _term$8, _type$9);
                    var $5119 = $5153;
                    break;
                case 'Fm.Term.gol':
                    var $5154 = self.name;
                    var $5155 = self.dref;
                    var $5156 = self.verb;
                    var $5157 = _term$1;
                    var $5119 = $5157;
                    break;
                case 'Fm.Term.hol':
                    var $5158 = self.path;
                    var $5159 = _term$1;
                    var $5119 = $5159;
                    break;
                case 'Fm.Term.nat':
                    var $5160 = self.natx;
                    var $5161 = _term$1;
                    var $5119 = $5161;
                    break;
                case 'Fm.Term.chr':
                    var $5162 = self.chrx;
                    var $5163 = _term$1;
                    var $5119 = $5163;
                    break;
                case 'Fm.Term.str':
                    var $5164 = self.strx;
                    var $5165 = _term$1;
                    var $5119 = $5165;
                    break;
                case 'Fm.Term.cse':
                    var $5166 = self.path;
                    var $5167 = self.expr;
                    var $5168 = self.name;
                    var $5169 = self.with;
                    var $5170 = self.cses;
                    var $5171 = self.moti;
                    var $5172 = _term$1;
                    var $5119 = $5172;
                    break;
                case 'Fm.Term.ori':
                    var $5173 = self.orig;
                    var $5174 = self.expr;
                    var $5175 = Fm$SmartMotive$replace$($5174, _from$2, _to$3, _lv$4);
                    var $5119 = $5175;
                    break;
            };
            var $5117 = $5119;
        };
        return $5117;
    };
    const Fm$SmartMotive$replace = x0 => x1 => x2 => x3 => Fm$SmartMotive$replace$(x0, x1, x2, x3);

    function Fm$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _lv$5, _defs$6) {
        var _vals$7 = Fm$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Fm$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var _moti$10 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $5178 = self.fst;
                    var $5179 = self.snd;
                    var $5180 = Fm$SmartMotive$replace$(_moti$11, $5179, Fm$Term$ref$($5178), _lv$5);
                    var $5177 = $5180;
                    break;
            };
            return $5177;
        }));
        var $5176 = _moti$10;
        return $5176;
    };
    const Fm$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Fm$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Fm$Term$desugar_cse$motive$(_wyth$1, _moti$2) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.nil':
                var $5182 = _moti$2;
                var $5181 = $5182;
                break;
            case 'List.cons':
                var $5183 = self.head;
                var $5184 = self.tail;
                var self = $5183;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $5186 = self.file;
                        var $5187 = self.code;
                        var $5188 = self.orig;
                        var $5189 = self.name;
                        var $5190 = self.term;
                        var $5191 = self.type;
                        var $5192 = self.isct;
                        var $5193 = self.arit;
                        var $5194 = self.stat;
                        var $5195 = Fm$Term$all$(Bool$false, "", $5189, $5191, (_s$14 => _x$15 => {
                            var $5196 = Fm$Term$desugar_cse$motive$($5184, _moti$2);
                            return $5196;
                        }));
                        var $5185 = $5195;
                        break;
                };
                var $5181 = $5185;
                break;
        };
        return $5181;
    };
    const Fm$Term$desugar_cse$motive = x0 => x1 => Fm$Term$desugar_cse$motive$(x0, x1);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $5198 = Bool$true;
            var $5197 = $5198;
        } else {
            var $5199 = self.charCodeAt(0);
            var $5200 = self.slice(1);
            var $5201 = Bool$false;
            var $5197 = $5201;
        };
        return $5197;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function Fm$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Fm$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Fm.Term.var':
                var $5203 = self.name;
                var $5204 = self.indx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5206 = _body$4;
                        var $5205 = $5206;
                        break;
                    case 'List.cons':
                        var $5207 = self.head;
                        var $5208 = self.tail;
                        var self = $5207;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5210 = self.file;
                                var $5211 = self.code;
                                var $5212 = self.orig;
                                var $5213 = self.name;
                                var $5214 = self.term;
                                var $5215 = self.type;
                                var $5216 = self.isct;
                                var $5217 = self.arit;
                                var $5218 = self.stat;
                                var $5219 = Fm$Term$lam$($5213, (_x$19 => {
                                    var $5220 = Fm$Term$desugar_cse$argument$(_name$1, $5208, _type$3, _body$4, _defs$5);
                                    return $5220;
                                }));
                                var $5209 = $5219;
                                break;
                        };
                        var $5205 = $5209;
                        break;
                };
                var $5202 = $5205;
                break;
            case 'Fm.Term.ref':
                var $5221 = self.name;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5223 = _body$4;
                        var $5222 = $5223;
                        break;
                    case 'List.cons':
                        var $5224 = self.head;
                        var $5225 = self.tail;
                        var self = $5224;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5227 = self.file;
                                var $5228 = self.code;
                                var $5229 = self.orig;
                                var $5230 = self.name;
                                var $5231 = self.term;
                                var $5232 = self.type;
                                var $5233 = self.isct;
                                var $5234 = self.arit;
                                var $5235 = self.stat;
                                var $5236 = Fm$Term$lam$($5230, (_x$18 => {
                                    var $5237 = Fm$Term$desugar_cse$argument$(_name$1, $5225, _type$3, _body$4, _defs$5);
                                    return $5237;
                                }));
                                var $5226 = $5236;
                                break;
                        };
                        var $5222 = $5226;
                        break;
                };
                var $5202 = $5222;
                break;
            case 'Fm.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5239 = _body$4;
                        var $5238 = $5239;
                        break;
                    case 'List.cons':
                        var $5240 = self.head;
                        var $5241 = self.tail;
                        var self = $5240;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5243 = self.file;
                                var $5244 = self.code;
                                var $5245 = self.orig;
                                var $5246 = self.name;
                                var $5247 = self.term;
                                var $5248 = self.type;
                                var $5249 = self.isct;
                                var $5250 = self.arit;
                                var $5251 = self.stat;
                                var $5252 = Fm$Term$lam$($5246, (_x$17 => {
                                    var $5253 = Fm$Term$desugar_cse$argument$(_name$1, $5241, _type$3, _body$4, _defs$5);
                                    return $5253;
                                }));
                                var $5242 = $5252;
                                break;
                        };
                        var $5238 = $5242;
                        break;
                };
                var $5202 = $5238;
                break;
            case 'Fm.Term.all':
                var $5254 = self.eras;
                var $5255 = self.self;
                var $5256 = self.name;
                var $5257 = self.xtyp;
                var $5258 = self.body;
                var $5259 = Fm$Term$lam$((() => {
                    var self = String$is_empty$($5256);
                    if (self) {
                        var $5260 = _name$1;
                        return $5260;
                    } else {
                        var $5261 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($5256, List$nil))));
                        return $5261;
                    };
                })(), (_x$11 => {
                    var $5262 = Fm$Term$desugar_cse$argument$(_name$1, _wyth$2, $5258(Fm$Term$var$($5255, 0n))(Fm$Term$var$($5256, 0n)), _body$4, _defs$5);
                    return $5262;
                }));
                var $5202 = $5259;
                break;
            case 'Fm.Term.lam':
                var $5263 = self.name;
                var $5264 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5266 = _body$4;
                        var $5265 = $5266;
                        break;
                    case 'List.cons':
                        var $5267 = self.head;
                        var $5268 = self.tail;
                        var self = $5267;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5270 = self.file;
                                var $5271 = self.code;
                                var $5272 = self.orig;
                                var $5273 = self.name;
                                var $5274 = self.term;
                                var $5275 = self.type;
                                var $5276 = self.isct;
                                var $5277 = self.arit;
                                var $5278 = self.stat;
                                var $5279 = Fm$Term$lam$($5273, (_x$19 => {
                                    var $5280 = Fm$Term$desugar_cse$argument$(_name$1, $5268, _type$3, _body$4, _defs$5);
                                    return $5280;
                                }));
                                var $5269 = $5279;
                                break;
                        };
                        var $5265 = $5269;
                        break;
                };
                var $5202 = $5265;
                break;
            case 'Fm.Term.app':
                var $5281 = self.func;
                var $5282 = self.argm;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5284 = _body$4;
                        var $5283 = $5284;
                        break;
                    case 'List.cons':
                        var $5285 = self.head;
                        var $5286 = self.tail;
                        var self = $5285;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5288 = self.file;
                                var $5289 = self.code;
                                var $5290 = self.orig;
                                var $5291 = self.name;
                                var $5292 = self.term;
                                var $5293 = self.type;
                                var $5294 = self.isct;
                                var $5295 = self.arit;
                                var $5296 = self.stat;
                                var $5297 = Fm$Term$lam$($5291, (_x$19 => {
                                    var $5298 = Fm$Term$desugar_cse$argument$(_name$1, $5286, _type$3, _body$4, _defs$5);
                                    return $5298;
                                }));
                                var $5287 = $5297;
                                break;
                        };
                        var $5283 = $5287;
                        break;
                };
                var $5202 = $5283;
                break;
            case 'Fm.Term.let':
                var $5299 = self.name;
                var $5300 = self.expr;
                var $5301 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5303 = _body$4;
                        var $5302 = $5303;
                        break;
                    case 'List.cons':
                        var $5304 = self.head;
                        var $5305 = self.tail;
                        var self = $5304;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5307 = self.file;
                                var $5308 = self.code;
                                var $5309 = self.orig;
                                var $5310 = self.name;
                                var $5311 = self.term;
                                var $5312 = self.type;
                                var $5313 = self.isct;
                                var $5314 = self.arit;
                                var $5315 = self.stat;
                                var $5316 = Fm$Term$lam$($5310, (_x$20 => {
                                    var $5317 = Fm$Term$desugar_cse$argument$(_name$1, $5305, _type$3, _body$4, _defs$5);
                                    return $5317;
                                }));
                                var $5306 = $5316;
                                break;
                        };
                        var $5302 = $5306;
                        break;
                };
                var $5202 = $5302;
                break;
            case 'Fm.Term.def':
                var $5318 = self.name;
                var $5319 = self.expr;
                var $5320 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5322 = _body$4;
                        var $5321 = $5322;
                        break;
                    case 'List.cons':
                        var $5323 = self.head;
                        var $5324 = self.tail;
                        var self = $5323;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5326 = self.file;
                                var $5327 = self.code;
                                var $5328 = self.orig;
                                var $5329 = self.name;
                                var $5330 = self.term;
                                var $5331 = self.type;
                                var $5332 = self.isct;
                                var $5333 = self.arit;
                                var $5334 = self.stat;
                                var $5335 = Fm$Term$lam$($5329, (_x$20 => {
                                    var $5336 = Fm$Term$desugar_cse$argument$(_name$1, $5324, _type$3, _body$4, _defs$5);
                                    return $5336;
                                }));
                                var $5325 = $5335;
                                break;
                        };
                        var $5321 = $5325;
                        break;
                };
                var $5202 = $5321;
                break;
            case 'Fm.Term.ann':
                var $5337 = self.done;
                var $5338 = self.term;
                var $5339 = self.type;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5341 = _body$4;
                        var $5340 = $5341;
                        break;
                    case 'List.cons':
                        var $5342 = self.head;
                        var $5343 = self.tail;
                        var self = $5342;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5345 = self.file;
                                var $5346 = self.code;
                                var $5347 = self.orig;
                                var $5348 = self.name;
                                var $5349 = self.term;
                                var $5350 = self.type;
                                var $5351 = self.isct;
                                var $5352 = self.arit;
                                var $5353 = self.stat;
                                var $5354 = Fm$Term$lam$($5348, (_x$20 => {
                                    var $5355 = Fm$Term$desugar_cse$argument$(_name$1, $5343, _type$3, _body$4, _defs$5);
                                    return $5355;
                                }));
                                var $5344 = $5354;
                                break;
                        };
                        var $5340 = $5344;
                        break;
                };
                var $5202 = $5340;
                break;
            case 'Fm.Term.gol':
                var $5356 = self.name;
                var $5357 = self.dref;
                var $5358 = self.verb;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5360 = _body$4;
                        var $5359 = $5360;
                        break;
                    case 'List.cons':
                        var $5361 = self.head;
                        var $5362 = self.tail;
                        var self = $5361;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5364 = self.file;
                                var $5365 = self.code;
                                var $5366 = self.orig;
                                var $5367 = self.name;
                                var $5368 = self.term;
                                var $5369 = self.type;
                                var $5370 = self.isct;
                                var $5371 = self.arit;
                                var $5372 = self.stat;
                                var $5373 = Fm$Term$lam$($5367, (_x$20 => {
                                    var $5374 = Fm$Term$desugar_cse$argument$(_name$1, $5362, _type$3, _body$4, _defs$5);
                                    return $5374;
                                }));
                                var $5363 = $5373;
                                break;
                        };
                        var $5359 = $5363;
                        break;
                };
                var $5202 = $5359;
                break;
            case 'Fm.Term.hol':
                var $5375 = self.path;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5377 = _body$4;
                        var $5376 = $5377;
                        break;
                    case 'List.cons':
                        var $5378 = self.head;
                        var $5379 = self.tail;
                        var self = $5378;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5381 = self.file;
                                var $5382 = self.code;
                                var $5383 = self.orig;
                                var $5384 = self.name;
                                var $5385 = self.term;
                                var $5386 = self.type;
                                var $5387 = self.isct;
                                var $5388 = self.arit;
                                var $5389 = self.stat;
                                var $5390 = Fm$Term$lam$($5384, (_x$18 => {
                                    var $5391 = Fm$Term$desugar_cse$argument$(_name$1, $5379, _type$3, _body$4, _defs$5);
                                    return $5391;
                                }));
                                var $5380 = $5390;
                                break;
                        };
                        var $5376 = $5380;
                        break;
                };
                var $5202 = $5376;
                break;
            case 'Fm.Term.nat':
                var $5392 = self.natx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5394 = _body$4;
                        var $5393 = $5394;
                        break;
                    case 'List.cons':
                        var $5395 = self.head;
                        var $5396 = self.tail;
                        var self = $5395;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5398 = self.file;
                                var $5399 = self.code;
                                var $5400 = self.orig;
                                var $5401 = self.name;
                                var $5402 = self.term;
                                var $5403 = self.type;
                                var $5404 = self.isct;
                                var $5405 = self.arit;
                                var $5406 = self.stat;
                                var $5407 = Fm$Term$lam$($5401, (_x$18 => {
                                    var $5408 = Fm$Term$desugar_cse$argument$(_name$1, $5396, _type$3, _body$4, _defs$5);
                                    return $5408;
                                }));
                                var $5397 = $5407;
                                break;
                        };
                        var $5393 = $5397;
                        break;
                };
                var $5202 = $5393;
                break;
            case 'Fm.Term.chr':
                var $5409 = self.chrx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5411 = _body$4;
                        var $5410 = $5411;
                        break;
                    case 'List.cons':
                        var $5412 = self.head;
                        var $5413 = self.tail;
                        var self = $5412;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5415 = self.file;
                                var $5416 = self.code;
                                var $5417 = self.orig;
                                var $5418 = self.name;
                                var $5419 = self.term;
                                var $5420 = self.type;
                                var $5421 = self.isct;
                                var $5422 = self.arit;
                                var $5423 = self.stat;
                                var $5424 = Fm$Term$lam$($5418, (_x$18 => {
                                    var $5425 = Fm$Term$desugar_cse$argument$(_name$1, $5413, _type$3, _body$4, _defs$5);
                                    return $5425;
                                }));
                                var $5414 = $5424;
                                break;
                        };
                        var $5410 = $5414;
                        break;
                };
                var $5202 = $5410;
                break;
            case 'Fm.Term.str':
                var $5426 = self.strx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5428 = _body$4;
                        var $5427 = $5428;
                        break;
                    case 'List.cons':
                        var $5429 = self.head;
                        var $5430 = self.tail;
                        var self = $5429;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5432 = self.file;
                                var $5433 = self.code;
                                var $5434 = self.orig;
                                var $5435 = self.name;
                                var $5436 = self.term;
                                var $5437 = self.type;
                                var $5438 = self.isct;
                                var $5439 = self.arit;
                                var $5440 = self.stat;
                                var $5441 = Fm$Term$lam$($5435, (_x$18 => {
                                    var $5442 = Fm$Term$desugar_cse$argument$(_name$1, $5430, _type$3, _body$4, _defs$5);
                                    return $5442;
                                }));
                                var $5431 = $5441;
                                break;
                        };
                        var $5427 = $5431;
                        break;
                };
                var $5202 = $5427;
                break;
            case 'Fm.Term.cse':
                var $5443 = self.path;
                var $5444 = self.expr;
                var $5445 = self.name;
                var $5446 = self.with;
                var $5447 = self.cses;
                var $5448 = self.moti;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5450 = _body$4;
                        var $5449 = $5450;
                        break;
                    case 'List.cons':
                        var $5451 = self.head;
                        var $5452 = self.tail;
                        var self = $5451;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5454 = self.file;
                                var $5455 = self.code;
                                var $5456 = self.orig;
                                var $5457 = self.name;
                                var $5458 = self.term;
                                var $5459 = self.type;
                                var $5460 = self.isct;
                                var $5461 = self.arit;
                                var $5462 = self.stat;
                                var $5463 = Fm$Term$lam$($5457, (_x$23 => {
                                    var $5464 = Fm$Term$desugar_cse$argument$(_name$1, $5452, _type$3, _body$4, _defs$5);
                                    return $5464;
                                }));
                                var $5453 = $5463;
                                break;
                        };
                        var $5449 = $5453;
                        break;
                };
                var $5202 = $5449;
                break;
            case 'Fm.Term.ori':
                var $5465 = self.orig;
                var $5466 = self.expr;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5468 = _body$4;
                        var $5467 = $5468;
                        break;
                    case 'List.cons':
                        var $5469 = self.head;
                        var $5470 = self.tail;
                        var self = $5469;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5472 = self.file;
                                var $5473 = self.code;
                                var $5474 = self.orig;
                                var $5475 = self.name;
                                var $5476 = self.term;
                                var $5477 = self.type;
                                var $5478 = self.isct;
                                var $5479 = self.arit;
                                var $5480 = self.stat;
                                var $5481 = Fm$Term$lam$($5475, (_x$19 => {
                                    var $5482 = Fm$Term$desugar_cse$argument$(_name$1, $5470, _type$3, _body$4, _defs$5);
                                    return $5482;
                                }));
                                var $5471 = $5481;
                                break;
                        };
                        var $5467 = $5471;
                        break;
                };
                var $5202 = $5467;
                break;
        };
        return $5202;
    };
    const Fm$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Fm$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.none':
                var $5484 = _b$3;
                var $5483 = $5484;
                break;
            case 'Maybe.some':
                var $5485 = self.value;
                var $5486 = Maybe$some$($5485);
                var $5483 = $5486;
                break;
        };
        return $5483;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Fm$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Fm$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Fm$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Fm$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5487 = self.name;
                        var $5488 = self.indx;
                        var _expr$10 = (() => {
                            var $5491 = _expr$1;
                            var $5492 = _wyth$3;
                            let _expr$11 = $5491;
                            let _defn$10;
                            while ($5492._ === 'List.cons') {
                                _defn$10 = $5492.head;
                                var $5491 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5493 = self.file;
                                            var $5494 = self.code;
                                            var $5495 = self.orig;
                                            var $5496 = self.name;
                                            var $5497 = self.term;
                                            var $5498 = self.type;
                                            var $5499 = self.isct;
                                            var $5500 = self.arit;
                                            var $5501 = self.stat;
                                            var $5502 = $5497;
                                            return $5502;
                                    };
                                })());
                                _expr$11 = $5491;
                                $5492 = $5492.tail;
                            }
                            return _expr$11;
                        })();
                        var $5489 = _expr$10;
                        return $5489;
                    case 'Fm.Term.ref':
                        var $5503 = self.name;
                        var _expr$9 = (() => {
                            var $5506 = _expr$1;
                            var $5507 = _wyth$3;
                            let _expr$10 = $5506;
                            let _defn$9;
                            while ($5507._ === 'List.cons') {
                                _defn$9 = $5507.head;
                                var $5506 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5508 = self.file;
                                            var $5509 = self.code;
                                            var $5510 = self.orig;
                                            var $5511 = self.name;
                                            var $5512 = self.term;
                                            var $5513 = self.type;
                                            var $5514 = self.isct;
                                            var $5515 = self.arit;
                                            var $5516 = self.stat;
                                            var $5517 = $5512;
                                            return $5517;
                                    };
                                })());
                                _expr$10 = $5506;
                                $5507 = $5507.tail;
                            }
                            return _expr$10;
                        })();
                        var $5504 = _expr$9;
                        return $5504;
                    case 'Fm.Term.typ':
                        var _expr$8 = (() => {
                            var $5520 = _expr$1;
                            var $5521 = _wyth$3;
                            let _expr$9 = $5520;
                            let _defn$8;
                            while ($5521._ === 'List.cons') {
                                _defn$8 = $5521.head;
                                var $5520 = Fm$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5522 = self.file;
                                            var $5523 = self.code;
                                            var $5524 = self.orig;
                                            var $5525 = self.name;
                                            var $5526 = self.term;
                                            var $5527 = self.type;
                                            var $5528 = self.isct;
                                            var $5529 = self.arit;
                                            var $5530 = self.stat;
                                            var $5531 = $5526;
                                            return $5531;
                                    };
                                })());
                                _expr$9 = $5520;
                                $5521 = $5521.tail;
                            }
                            return _expr$9;
                        })();
                        var $5518 = _expr$8;
                        return $5518;
                    case 'Fm.Term.all':
                        var $5532 = self.eras;
                        var $5533 = self.self;
                        var $5534 = self.name;
                        var $5535 = self.xtyp;
                        var $5536 = self.body;
                        var _got$13 = Maybe$or$(Fm$get$($5534, _cses$4), Fm$get$("_", _cses$4));
                        var self = _got$13;
                        switch (self._) {
                            case 'Maybe.none':
                                var _expr$14 = (() => {
                                    var $5540 = _expr$1;
                                    var $5541 = _wyth$3;
                                    let _expr$15 = $5540;
                                    let _defn$14;
                                    while ($5541._ === 'List.cons') {
                                        _defn$14 = $5541.head;
                                        var self = _defn$14;
                                        switch (self._) {
                                            case 'Fm.Def.new':
                                                var $5542 = self.file;
                                                var $5543 = self.code;
                                                var $5544 = self.orig;
                                                var $5545 = self.name;
                                                var $5546 = self.term;
                                                var $5547 = self.type;
                                                var $5548 = self.isct;
                                                var $5549 = self.arit;
                                                var $5550 = self.stat;
                                                var $5551 = Fm$Term$app$(_expr$15, $5546);
                                                var $5540 = $5551;
                                                break;
                                        };
                                        _expr$15 = $5540;
                                        $5541 = $5541.tail;
                                    }
                                    return _expr$15;
                                })();
                                var $5538 = _expr$14;
                                var $5537 = $5538;
                                break;
                            case 'Maybe.some':
                                var $5552 = self.value;
                                var _argm$15 = Fm$Term$desugar_cse$argument$(_name$2, _wyth$3, $5535, $5552, _defs$6);
                                var _expr$16 = Fm$Term$app$(_expr$1, _argm$15);
                                var _type$17 = $5536(Fm$Term$var$($5533, 0n))(Fm$Term$var$($5534, 0n));
                                var $5553 = Fm$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                                var $5537 = $5553;
                                break;
                        };
                        return $5537;
                    case 'Fm.Term.lam':
                        var $5554 = self.name;
                        var $5555 = self.body;
                        var _expr$10 = (() => {
                            var $5558 = _expr$1;
                            var $5559 = _wyth$3;
                            let _expr$11 = $5558;
                            let _defn$10;
                            while ($5559._ === 'List.cons') {
                                _defn$10 = $5559.head;
                                var $5558 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5560 = self.file;
                                            var $5561 = self.code;
                                            var $5562 = self.orig;
                                            var $5563 = self.name;
                                            var $5564 = self.term;
                                            var $5565 = self.type;
                                            var $5566 = self.isct;
                                            var $5567 = self.arit;
                                            var $5568 = self.stat;
                                            var $5569 = $5564;
                                            return $5569;
                                    };
                                })());
                                _expr$11 = $5558;
                                $5559 = $5559.tail;
                            }
                            return _expr$11;
                        })();
                        var $5556 = _expr$10;
                        return $5556;
                    case 'Fm.Term.app':
                        var $5570 = self.func;
                        var $5571 = self.argm;
                        var _expr$10 = (() => {
                            var $5574 = _expr$1;
                            var $5575 = _wyth$3;
                            let _expr$11 = $5574;
                            let _defn$10;
                            while ($5575._ === 'List.cons') {
                                _defn$10 = $5575.head;
                                var $5574 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5576 = self.file;
                                            var $5577 = self.code;
                                            var $5578 = self.orig;
                                            var $5579 = self.name;
                                            var $5580 = self.term;
                                            var $5581 = self.type;
                                            var $5582 = self.isct;
                                            var $5583 = self.arit;
                                            var $5584 = self.stat;
                                            var $5585 = $5580;
                                            return $5585;
                                    };
                                })());
                                _expr$11 = $5574;
                                $5575 = $5575.tail;
                            }
                            return _expr$11;
                        })();
                        var $5572 = _expr$10;
                        return $5572;
                    case 'Fm.Term.let':
                        var $5586 = self.name;
                        var $5587 = self.expr;
                        var $5588 = self.body;
                        var _expr$11 = (() => {
                            var $5591 = _expr$1;
                            var $5592 = _wyth$3;
                            let _expr$12 = $5591;
                            let _defn$11;
                            while ($5592._ === 'List.cons') {
                                _defn$11 = $5592.head;
                                var $5591 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5593 = self.file;
                                            var $5594 = self.code;
                                            var $5595 = self.orig;
                                            var $5596 = self.name;
                                            var $5597 = self.term;
                                            var $5598 = self.type;
                                            var $5599 = self.isct;
                                            var $5600 = self.arit;
                                            var $5601 = self.stat;
                                            var $5602 = $5597;
                                            return $5602;
                                    };
                                })());
                                _expr$12 = $5591;
                                $5592 = $5592.tail;
                            }
                            return _expr$12;
                        })();
                        var $5589 = _expr$11;
                        return $5589;
                    case 'Fm.Term.def':
                        var $5603 = self.name;
                        var $5604 = self.expr;
                        var $5605 = self.body;
                        var _expr$11 = (() => {
                            var $5608 = _expr$1;
                            var $5609 = _wyth$3;
                            let _expr$12 = $5608;
                            let _defn$11;
                            while ($5609._ === 'List.cons') {
                                _defn$11 = $5609.head;
                                var $5608 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5610 = self.file;
                                            var $5611 = self.code;
                                            var $5612 = self.orig;
                                            var $5613 = self.name;
                                            var $5614 = self.term;
                                            var $5615 = self.type;
                                            var $5616 = self.isct;
                                            var $5617 = self.arit;
                                            var $5618 = self.stat;
                                            var $5619 = $5614;
                                            return $5619;
                                    };
                                })());
                                _expr$12 = $5608;
                                $5609 = $5609.tail;
                            }
                            return _expr$12;
                        })();
                        var $5606 = _expr$11;
                        return $5606;
                    case 'Fm.Term.ann':
                        var $5620 = self.done;
                        var $5621 = self.term;
                        var $5622 = self.type;
                        var _expr$11 = (() => {
                            var $5625 = _expr$1;
                            var $5626 = _wyth$3;
                            let _expr$12 = $5625;
                            let _defn$11;
                            while ($5626._ === 'List.cons') {
                                _defn$11 = $5626.head;
                                var $5625 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5627 = self.file;
                                            var $5628 = self.code;
                                            var $5629 = self.orig;
                                            var $5630 = self.name;
                                            var $5631 = self.term;
                                            var $5632 = self.type;
                                            var $5633 = self.isct;
                                            var $5634 = self.arit;
                                            var $5635 = self.stat;
                                            var $5636 = $5631;
                                            return $5636;
                                    };
                                })());
                                _expr$12 = $5625;
                                $5626 = $5626.tail;
                            }
                            return _expr$12;
                        })();
                        var $5623 = _expr$11;
                        return $5623;
                    case 'Fm.Term.gol':
                        var $5637 = self.name;
                        var $5638 = self.dref;
                        var $5639 = self.verb;
                        var _expr$11 = (() => {
                            var $5642 = _expr$1;
                            var $5643 = _wyth$3;
                            let _expr$12 = $5642;
                            let _defn$11;
                            while ($5643._ === 'List.cons') {
                                _defn$11 = $5643.head;
                                var $5642 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5644 = self.file;
                                            var $5645 = self.code;
                                            var $5646 = self.orig;
                                            var $5647 = self.name;
                                            var $5648 = self.term;
                                            var $5649 = self.type;
                                            var $5650 = self.isct;
                                            var $5651 = self.arit;
                                            var $5652 = self.stat;
                                            var $5653 = $5648;
                                            return $5653;
                                    };
                                })());
                                _expr$12 = $5642;
                                $5643 = $5643.tail;
                            }
                            return _expr$12;
                        })();
                        var $5640 = _expr$11;
                        return $5640;
                    case 'Fm.Term.hol':
                        var $5654 = self.path;
                        var _expr$9 = (() => {
                            var $5657 = _expr$1;
                            var $5658 = _wyth$3;
                            let _expr$10 = $5657;
                            let _defn$9;
                            while ($5658._ === 'List.cons') {
                                _defn$9 = $5658.head;
                                var $5657 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5659 = self.file;
                                            var $5660 = self.code;
                                            var $5661 = self.orig;
                                            var $5662 = self.name;
                                            var $5663 = self.term;
                                            var $5664 = self.type;
                                            var $5665 = self.isct;
                                            var $5666 = self.arit;
                                            var $5667 = self.stat;
                                            var $5668 = $5663;
                                            return $5668;
                                    };
                                })());
                                _expr$10 = $5657;
                                $5658 = $5658.tail;
                            }
                            return _expr$10;
                        })();
                        var $5655 = _expr$9;
                        return $5655;
                    case 'Fm.Term.nat':
                        var $5669 = self.natx;
                        var _expr$9 = (() => {
                            var $5672 = _expr$1;
                            var $5673 = _wyth$3;
                            let _expr$10 = $5672;
                            let _defn$9;
                            while ($5673._ === 'List.cons') {
                                _defn$9 = $5673.head;
                                var $5672 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5674 = self.file;
                                            var $5675 = self.code;
                                            var $5676 = self.orig;
                                            var $5677 = self.name;
                                            var $5678 = self.term;
                                            var $5679 = self.type;
                                            var $5680 = self.isct;
                                            var $5681 = self.arit;
                                            var $5682 = self.stat;
                                            var $5683 = $5678;
                                            return $5683;
                                    };
                                })());
                                _expr$10 = $5672;
                                $5673 = $5673.tail;
                            }
                            return _expr$10;
                        })();
                        var $5670 = _expr$9;
                        return $5670;
                    case 'Fm.Term.chr':
                        var $5684 = self.chrx;
                        var _expr$9 = (() => {
                            var $5687 = _expr$1;
                            var $5688 = _wyth$3;
                            let _expr$10 = $5687;
                            let _defn$9;
                            while ($5688._ === 'List.cons') {
                                _defn$9 = $5688.head;
                                var $5687 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5689 = self.file;
                                            var $5690 = self.code;
                                            var $5691 = self.orig;
                                            var $5692 = self.name;
                                            var $5693 = self.term;
                                            var $5694 = self.type;
                                            var $5695 = self.isct;
                                            var $5696 = self.arit;
                                            var $5697 = self.stat;
                                            var $5698 = $5693;
                                            return $5698;
                                    };
                                })());
                                _expr$10 = $5687;
                                $5688 = $5688.tail;
                            }
                            return _expr$10;
                        })();
                        var $5685 = _expr$9;
                        return $5685;
                    case 'Fm.Term.str':
                        var $5699 = self.strx;
                        var _expr$9 = (() => {
                            var $5702 = _expr$1;
                            var $5703 = _wyth$3;
                            let _expr$10 = $5702;
                            let _defn$9;
                            while ($5703._ === 'List.cons') {
                                _defn$9 = $5703.head;
                                var $5702 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5704 = self.file;
                                            var $5705 = self.code;
                                            var $5706 = self.orig;
                                            var $5707 = self.name;
                                            var $5708 = self.term;
                                            var $5709 = self.type;
                                            var $5710 = self.isct;
                                            var $5711 = self.arit;
                                            var $5712 = self.stat;
                                            var $5713 = $5708;
                                            return $5713;
                                    };
                                })());
                                _expr$10 = $5702;
                                $5703 = $5703.tail;
                            }
                            return _expr$10;
                        })();
                        var $5700 = _expr$9;
                        return $5700;
                    case 'Fm.Term.cse':
                        var $5714 = self.path;
                        var $5715 = self.expr;
                        var $5716 = self.name;
                        var $5717 = self.with;
                        var $5718 = self.cses;
                        var $5719 = self.moti;
                        var _expr$14 = (() => {
                            var $5722 = _expr$1;
                            var $5723 = _wyth$3;
                            let _expr$15 = $5722;
                            let _defn$14;
                            while ($5723._ === 'List.cons') {
                                _defn$14 = $5723.head;
                                var $5722 = Fm$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5724 = self.file;
                                            var $5725 = self.code;
                                            var $5726 = self.orig;
                                            var $5727 = self.name;
                                            var $5728 = self.term;
                                            var $5729 = self.type;
                                            var $5730 = self.isct;
                                            var $5731 = self.arit;
                                            var $5732 = self.stat;
                                            var $5733 = $5728;
                                            return $5733;
                                    };
                                })());
                                _expr$15 = $5722;
                                $5723 = $5723.tail;
                            }
                            return _expr$15;
                        })();
                        var $5720 = _expr$14;
                        return $5720;
                    case 'Fm.Term.ori':
                        var $5734 = self.orig;
                        var $5735 = self.expr;
                        var _expr$10 = (() => {
                            var $5738 = _expr$1;
                            var $5739 = _wyth$3;
                            let _expr$11 = $5738;
                            let _defn$10;
                            while ($5739._ === 'List.cons') {
                                _defn$10 = $5739.head;
                                var $5738 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5740 = self.file;
                                            var $5741 = self.code;
                                            var $5742 = self.orig;
                                            var $5743 = self.name;
                                            var $5744 = self.term;
                                            var $5745 = self.type;
                                            var $5746 = self.isct;
                                            var $5747 = self.arit;
                                            var $5748 = self.stat;
                                            var $5749 = $5744;
                                            return $5749;
                                    };
                                })());
                                _expr$11 = $5738;
                                $5739 = $5739.tail;
                            }
                            return _expr$11;
                        })();
                        var $5736 = _expr$10;
                        return $5736;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Fm$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Fm$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _type$6, _defs$7, _ctxt$8) {
        var self = Fm$Term$reduce$(_type$6, _defs$7);
        switch (self._) {
            case 'Fm.Term.var':
                var $5751 = self.name;
                var $5752 = self.indx;
                var $5753 = Maybe$none;
                var $5750 = $5753;
                break;
            case 'Fm.Term.ref':
                var $5754 = self.name;
                var $5755 = Maybe$none;
                var $5750 = $5755;
                break;
            case 'Fm.Term.typ':
                var $5756 = Maybe$none;
                var $5750 = $5756;
                break;
            case 'Fm.Term.all':
                var $5757 = self.eras;
                var $5758 = self.self;
                var $5759 = self.name;
                var $5760 = self.xtyp;
                var $5761 = self.body;
                var _moti$14 = Fm$Term$desugar_cse$motive$(_wyth$3, _moti$5);
                var _argm$15 = Fm$Term$desugar_cse$argument$(_name$2, List$nil, $5760, _moti$14, _defs$7);
                var _expr$16 = Fm$Term$app$(_expr$1, _argm$15);
                var _type$17 = $5761(Fm$Term$var$($5758, 0n))(Fm$Term$var$($5759, 0n));
                var $5762 = Maybe$some$(Fm$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$7, _ctxt$8));
                var $5750 = $5762;
                break;
            case 'Fm.Term.lam':
                var $5763 = self.name;
                var $5764 = self.body;
                var $5765 = Maybe$none;
                var $5750 = $5765;
                break;
            case 'Fm.Term.app':
                var $5766 = self.func;
                var $5767 = self.argm;
                var $5768 = Maybe$none;
                var $5750 = $5768;
                break;
            case 'Fm.Term.let':
                var $5769 = self.name;
                var $5770 = self.expr;
                var $5771 = self.body;
                var $5772 = Maybe$none;
                var $5750 = $5772;
                break;
            case 'Fm.Term.def':
                var $5773 = self.name;
                var $5774 = self.expr;
                var $5775 = self.body;
                var $5776 = Maybe$none;
                var $5750 = $5776;
                break;
            case 'Fm.Term.ann':
                var $5777 = self.done;
                var $5778 = self.term;
                var $5779 = self.type;
                var $5780 = Maybe$none;
                var $5750 = $5780;
                break;
            case 'Fm.Term.gol':
                var $5781 = self.name;
                var $5782 = self.dref;
                var $5783 = self.verb;
                var $5784 = Maybe$none;
                var $5750 = $5784;
                break;
            case 'Fm.Term.hol':
                var $5785 = self.path;
                var $5786 = Maybe$none;
                var $5750 = $5786;
                break;
            case 'Fm.Term.nat':
                var $5787 = self.natx;
                var $5788 = Maybe$none;
                var $5750 = $5788;
                break;
            case 'Fm.Term.chr':
                var $5789 = self.chrx;
                var $5790 = Maybe$none;
                var $5750 = $5790;
                break;
            case 'Fm.Term.str':
                var $5791 = self.strx;
                var $5792 = Maybe$none;
                var $5750 = $5792;
                break;
            case 'Fm.Term.cse':
                var $5793 = self.path;
                var $5794 = self.expr;
                var $5795 = self.name;
                var $5796 = self.with;
                var $5797 = self.cses;
                var $5798 = self.moti;
                var $5799 = Maybe$none;
                var $5750 = $5799;
                break;
            case 'Fm.Term.ori':
                var $5800 = self.orig;
                var $5801 = self.expr;
                var $5802 = Maybe$none;
                var $5750 = $5802;
                break;
        };
        return $5750;
    };
    const Fm$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $5803 = ({
            _: 'Fm.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $5803;
    };
    const Fm$Error$cant_infer = x0 => x1 => x2 => Fm$Error$cant_infer$(x0, x1, x2);

    function Set$has$(_bits$1, _set$2) {
        var self = Map$get$(_bits$1, _set$2);
        switch (self._) {
            case 'Maybe.none':
                var $5805 = Bool$false;
                var $5804 = $5805;
                break;
            case 'Maybe.some':
                var $5806 = self.value;
                var $5807 = Bool$true;
                var $5804 = $5807;
                break;
        };
        return $5804;
    };
    const Set$has = x0 => x1 => Set$has$(x0, x1);
    const Set$mut$has = a0 => a1 => (!!(a1[a0]));
    const Bool$or = a0 => a1 => (a0 || a1);

    function Fm$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $5809 = self.name;
                var $5810 = self.indx;
                var $5811 = Bool$false;
                var $5808 = $5811;
                break;
            case 'Fm.Term.ref':
                var $5812 = self.name;
                var $5813 = Bool$false;
                var $5808 = $5813;
                break;
            case 'Fm.Term.typ':
                var $5814 = Bool$false;
                var $5808 = $5814;
                break;
            case 'Fm.Term.all':
                var $5815 = self.eras;
                var $5816 = self.self;
                var $5817 = self.name;
                var $5818 = self.xtyp;
                var $5819 = self.body;
                var $5820 = (Fm$Term$has_holes$($5818) || Fm$Term$has_holes$($5819(Fm$Term$typ)(Fm$Term$typ)));
                var $5808 = $5820;
                break;
            case 'Fm.Term.lam':
                var $5821 = self.name;
                var $5822 = self.body;
                var $5823 = Fm$Term$has_holes$($5822(Fm$Term$typ));
                var $5808 = $5823;
                break;
            case 'Fm.Term.app':
                var $5824 = self.func;
                var $5825 = self.argm;
                var $5826 = (Fm$Term$has_holes$($5824) || Fm$Term$has_holes$($5825));
                var $5808 = $5826;
                break;
            case 'Fm.Term.let':
                var $5827 = self.name;
                var $5828 = self.expr;
                var $5829 = self.body;
                var $5830 = (Fm$Term$has_holes$($5828) || Fm$Term$has_holes$($5829(Fm$Term$typ)));
                var $5808 = $5830;
                break;
            case 'Fm.Term.def':
                var $5831 = self.name;
                var $5832 = self.expr;
                var $5833 = self.body;
                var $5834 = (Fm$Term$has_holes$($5832) || Fm$Term$has_holes$($5833(Fm$Term$typ)));
                var $5808 = $5834;
                break;
            case 'Fm.Term.ann':
                var $5835 = self.done;
                var $5836 = self.term;
                var $5837 = self.type;
                var $5838 = (Fm$Term$has_holes$($5836) || Fm$Term$has_holes$($5837));
                var $5808 = $5838;
                break;
            case 'Fm.Term.gol':
                var $5839 = self.name;
                var $5840 = self.dref;
                var $5841 = self.verb;
                var $5842 = Bool$false;
                var $5808 = $5842;
                break;
            case 'Fm.Term.hol':
                var $5843 = self.path;
                var $5844 = Bool$true;
                var $5808 = $5844;
                break;
            case 'Fm.Term.nat':
                var $5845 = self.natx;
                var $5846 = Bool$false;
                var $5808 = $5846;
                break;
            case 'Fm.Term.chr':
                var $5847 = self.chrx;
                var $5848 = Bool$false;
                var $5808 = $5848;
                break;
            case 'Fm.Term.str':
                var $5849 = self.strx;
                var $5850 = Bool$false;
                var $5808 = $5850;
                break;
            case 'Fm.Term.cse':
                var $5851 = self.path;
                var $5852 = self.expr;
                var $5853 = self.name;
                var $5854 = self.with;
                var $5855 = self.cses;
                var $5856 = self.moti;
                var $5857 = Bool$false;
                var $5808 = $5857;
                break;
            case 'Fm.Term.ori':
                var $5858 = self.orig;
                var $5859 = self.expr;
                var $5860 = Fm$Term$has_holes$($5859);
                var $5808 = $5860;
                break;
        };
        return $5808;
    };
    const Fm$Term$has_holes = x0 => Fm$Term$has_holes$(x0);

    function Fm$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Fm.Term.var':
                var $5862 = self.name;
                var $5863 = self.indx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5865 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5864 = $5865;
                } else {
                    var $5866 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5864 = $5866;
                };
                var $5861 = $5864;
                break;
            case 'Fm.Term.ref':
                var $5867 = self.name;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5869 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5868 = $5869;
                } else {
                    var $5870 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5868 = $5870;
                };
                var $5861 = $5868;
                break;
            case 'Fm.Term.typ':
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5872 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5871 = $5872;
                } else {
                    var $5873 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5871 = $5873;
                };
                var $5861 = $5871;
                break;
            case 'Fm.Term.all':
                var $5874 = self.eras;
                var $5875 = self.self;
                var $5876 = self.name;
                var $5877 = self.xtyp;
                var $5878 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5880 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5879 = $5880;
                } else {
                    var $5881 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5879 = $5881;
                };
                var $5861 = $5879;
                break;
            case 'Fm.Term.lam':
                var $5882 = self.name;
                var $5883 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5885 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5884 = $5885;
                } else {
                    var $5886 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5884 = $5886;
                };
                var $5861 = $5884;
                break;
            case 'Fm.Term.app':
                var $5887 = self.func;
                var $5888 = self.argm;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5890 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5889 = $5890;
                } else {
                    var $5891 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5889 = $5891;
                };
                var $5861 = $5889;
                break;
            case 'Fm.Term.let':
                var $5892 = self.name;
                var $5893 = self.expr;
                var $5894 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5896 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5895 = $5896;
                } else {
                    var $5897 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5895 = $5897;
                };
                var $5861 = $5895;
                break;
            case 'Fm.Term.def':
                var $5898 = self.name;
                var $5899 = self.expr;
                var $5900 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5902 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5901 = $5902;
                } else {
                    var $5903 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5901 = $5903;
                };
                var $5861 = $5901;
                break;
            case 'Fm.Term.ann':
                var $5904 = self.done;
                var $5905 = self.term;
                var $5906 = self.type;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5908 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5907 = $5908;
                } else {
                    var $5909 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5907 = $5909;
                };
                var $5861 = $5907;
                break;
            case 'Fm.Term.gol':
                var $5910 = self.name;
                var $5911 = self.dref;
                var $5912 = self.verb;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5914 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5913 = $5914;
                } else {
                    var $5915 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5913 = $5915;
                };
                var $5861 = $5913;
                break;
            case 'Fm.Term.hol':
                var $5916 = self.path;
                var $5917 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $5861 = $5917;
                break;
            case 'Fm.Term.nat':
                var $5918 = self.natx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5920 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5919 = $5920;
                } else {
                    var $5921 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5919 = $5921;
                };
                var $5861 = $5919;
                break;
            case 'Fm.Term.chr':
                var $5922 = self.chrx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5924 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5923 = $5924;
                } else {
                    var $5925 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5923 = $5925;
                };
                var $5861 = $5923;
                break;
            case 'Fm.Term.str':
                var $5926 = self.strx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5928 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5927 = $5928;
                } else {
                    var $5929 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5927 = $5929;
                };
                var $5861 = $5927;
                break;
            case 'Fm.Term.cse':
                var $5930 = self.path;
                var $5931 = self.expr;
                var $5932 = self.name;
                var $5933 = self.with;
                var $5934 = self.cses;
                var $5935 = self.moti;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5937 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5936 = $5937;
                } else {
                    var $5938 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5936 = $5938;
                };
                var $5861 = $5936;
                break;
            case 'Fm.Term.ori':
                var $5939 = self.orig;
                var $5940 = self.expr;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5942 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5941 = $5942;
                } else {
                    var $5943 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5941 = $5943;
                };
                var $5861 = $5941;
                break;
        };
        return $5861;
    };
    const Fm$Term$equal$hole = x0 => x1 => Fm$Term$equal$hole$(x0, x1);

    function Fm$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $5945 = self.name;
                var $5946 = self.indx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5948 = self.name;
                        var $5949 = self.indx;
                        var $5950 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5950;
                        break;
                    case 'Fm.Term.ref':
                        var $5951 = self.name;
                        var $5952 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5952;
                        break;
                    case 'Fm.Term.typ':
                        var $5953 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5953;
                        break;
                    case 'Fm.Term.all':
                        var $5954 = self.eras;
                        var $5955 = self.self;
                        var $5956 = self.name;
                        var $5957 = self.xtyp;
                        var $5958 = self.body;
                        var $5959 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5959;
                        break;
                    case 'Fm.Term.lam':
                        var $5960 = self.name;
                        var $5961 = self.body;
                        var $5962 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5962;
                        break;
                    case 'Fm.Term.app':
                        var $5963 = self.func;
                        var $5964 = self.argm;
                        var $5965 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5965;
                        break;
                    case 'Fm.Term.let':
                        var $5966 = self.name;
                        var $5967 = self.expr;
                        var $5968 = self.body;
                        var $5969 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5969;
                        break;
                    case 'Fm.Term.def':
                        var $5970 = self.name;
                        var $5971 = self.expr;
                        var $5972 = self.body;
                        var $5973 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5973;
                        break;
                    case 'Fm.Term.ann':
                        var $5974 = self.done;
                        var $5975 = self.term;
                        var $5976 = self.type;
                        var $5977 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5977;
                        break;
                    case 'Fm.Term.gol':
                        var $5978 = self.name;
                        var $5979 = self.dref;
                        var $5980 = self.verb;
                        var $5981 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5981;
                        break;
                    case 'Fm.Term.hol':
                        var $5982 = self.path;
                        var self = Fm$Term$equal$hole$($5982, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $5984 = self.value;
                                var $5985 = self.errors;
                                var self = $5984;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5987 = Fm$Check$result$(Maybe$none, $5985);
                                        var $5986 = $5987;
                                        break;
                                    case 'Maybe.some':
                                        var $5988 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $5990 = self.value;
                                                var $5991 = self.errors;
                                                var $5992 = Fm$Check$result$($5990, List$concat$($5985, $5991));
                                                var $5989 = $5992;
                                                break;
                                        };
                                        var $5986 = $5989;
                                        break;
                                };
                                var $5983 = $5986;
                                break;
                        };
                        var $5947 = $5983;
                        break;
                    case 'Fm.Term.nat':
                        var $5993 = self.natx;
                        var $5994 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5994;
                        break;
                    case 'Fm.Term.chr':
                        var $5995 = self.chrx;
                        var $5996 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5996;
                        break;
                    case 'Fm.Term.str':
                        var $5997 = self.strx;
                        var $5998 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $5998;
                        break;
                    case 'Fm.Term.cse':
                        var $5999 = self.path;
                        var $6000 = self.expr;
                        var $6001 = self.name;
                        var $6002 = self.with;
                        var $6003 = self.cses;
                        var $6004 = self.moti;
                        var $6005 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5947 = $6005;
                        break;
                    case 'Fm.Term.ori':
                        var $6006 = self.orig;
                        var $6007 = self.expr;
                        var $6008 = Fm$Term$equal$extra_holes$(_a$1, $6007);
                        var $5947 = $6008;
                        break;
                };
                var $5944 = $5947;
                break;
            case 'Fm.Term.ref':
                var $6009 = self.name;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6011 = self.name;
                        var $6012 = self.indx;
                        var $6013 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6013;
                        break;
                    case 'Fm.Term.ref':
                        var $6014 = self.name;
                        var $6015 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6015;
                        break;
                    case 'Fm.Term.typ':
                        var $6016 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6016;
                        break;
                    case 'Fm.Term.all':
                        var $6017 = self.eras;
                        var $6018 = self.self;
                        var $6019 = self.name;
                        var $6020 = self.xtyp;
                        var $6021 = self.body;
                        var $6022 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6022;
                        break;
                    case 'Fm.Term.lam':
                        var $6023 = self.name;
                        var $6024 = self.body;
                        var $6025 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6025;
                        break;
                    case 'Fm.Term.app':
                        var $6026 = self.func;
                        var $6027 = self.argm;
                        var $6028 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6028;
                        break;
                    case 'Fm.Term.let':
                        var $6029 = self.name;
                        var $6030 = self.expr;
                        var $6031 = self.body;
                        var $6032 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6032;
                        break;
                    case 'Fm.Term.def':
                        var $6033 = self.name;
                        var $6034 = self.expr;
                        var $6035 = self.body;
                        var $6036 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6036;
                        break;
                    case 'Fm.Term.ann':
                        var $6037 = self.done;
                        var $6038 = self.term;
                        var $6039 = self.type;
                        var $6040 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6040;
                        break;
                    case 'Fm.Term.gol':
                        var $6041 = self.name;
                        var $6042 = self.dref;
                        var $6043 = self.verb;
                        var $6044 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6044;
                        break;
                    case 'Fm.Term.hol':
                        var $6045 = self.path;
                        var self = Fm$Term$equal$hole$($6045, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6047 = self.value;
                                var $6048 = self.errors;
                                var self = $6047;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6050 = Fm$Check$result$(Maybe$none, $6048);
                                        var $6049 = $6050;
                                        break;
                                    case 'Maybe.some':
                                        var $6051 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6053 = self.value;
                                                var $6054 = self.errors;
                                                var $6055 = Fm$Check$result$($6053, List$concat$($6048, $6054));
                                                var $6052 = $6055;
                                                break;
                                        };
                                        var $6049 = $6052;
                                        break;
                                };
                                var $6046 = $6049;
                                break;
                        };
                        var $6010 = $6046;
                        break;
                    case 'Fm.Term.nat':
                        var $6056 = self.natx;
                        var $6057 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6057;
                        break;
                    case 'Fm.Term.chr':
                        var $6058 = self.chrx;
                        var $6059 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6059;
                        break;
                    case 'Fm.Term.str':
                        var $6060 = self.strx;
                        var $6061 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6061;
                        break;
                    case 'Fm.Term.cse':
                        var $6062 = self.path;
                        var $6063 = self.expr;
                        var $6064 = self.name;
                        var $6065 = self.with;
                        var $6066 = self.cses;
                        var $6067 = self.moti;
                        var $6068 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6010 = $6068;
                        break;
                    case 'Fm.Term.ori':
                        var $6069 = self.orig;
                        var $6070 = self.expr;
                        var $6071 = Fm$Term$equal$extra_holes$(_a$1, $6070);
                        var $6010 = $6071;
                        break;
                };
                var $5944 = $6010;
                break;
            case 'Fm.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6073 = self.name;
                        var $6074 = self.indx;
                        var $6075 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6075;
                        break;
                    case 'Fm.Term.ref':
                        var $6076 = self.name;
                        var $6077 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6077;
                        break;
                    case 'Fm.Term.typ':
                        var $6078 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6078;
                        break;
                    case 'Fm.Term.all':
                        var $6079 = self.eras;
                        var $6080 = self.self;
                        var $6081 = self.name;
                        var $6082 = self.xtyp;
                        var $6083 = self.body;
                        var $6084 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6084;
                        break;
                    case 'Fm.Term.lam':
                        var $6085 = self.name;
                        var $6086 = self.body;
                        var $6087 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6087;
                        break;
                    case 'Fm.Term.app':
                        var $6088 = self.func;
                        var $6089 = self.argm;
                        var $6090 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6090;
                        break;
                    case 'Fm.Term.let':
                        var $6091 = self.name;
                        var $6092 = self.expr;
                        var $6093 = self.body;
                        var $6094 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6094;
                        break;
                    case 'Fm.Term.def':
                        var $6095 = self.name;
                        var $6096 = self.expr;
                        var $6097 = self.body;
                        var $6098 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6098;
                        break;
                    case 'Fm.Term.ann':
                        var $6099 = self.done;
                        var $6100 = self.term;
                        var $6101 = self.type;
                        var $6102 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6102;
                        break;
                    case 'Fm.Term.gol':
                        var $6103 = self.name;
                        var $6104 = self.dref;
                        var $6105 = self.verb;
                        var $6106 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6106;
                        break;
                    case 'Fm.Term.hol':
                        var $6107 = self.path;
                        var self = Fm$Term$equal$hole$($6107, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6109 = self.value;
                                var $6110 = self.errors;
                                var self = $6109;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6112 = Fm$Check$result$(Maybe$none, $6110);
                                        var $6111 = $6112;
                                        break;
                                    case 'Maybe.some':
                                        var $6113 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6115 = self.value;
                                                var $6116 = self.errors;
                                                var $6117 = Fm$Check$result$($6115, List$concat$($6110, $6116));
                                                var $6114 = $6117;
                                                break;
                                        };
                                        var $6111 = $6114;
                                        break;
                                };
                                var $6108 = $6111;
                                break;
                        };
                        var $6072 = $6108;
                        break;
                    case 'Fm.Term.nat':
                        var $6118 = self.natx;
                        var $6119 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6119;
                        break;
                    case 'Fm.Term.chr':
                        var $6120 = self.chrx;
                        var $6121 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6121;
                        break;
                    case 'Fm.Term.str':
                        var $6122 = self.strx;
                        var $6123 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6123;
                        break;
                    case 'Fm.Term.cse':
                        var $6124 = self.path;
                        var $6125 = self.expr;
                        var $6126 = self.name;
                        var $6127 = self.with;
                        var $6128 = self.cses;
                        var $6129 = self.moti;
                        var $6130 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6072 = $6130;
                        break;
                    case 'Fm.Term.ori':
                        var $6131 = self.orig;
                        var $6132 = self.expr;
                        var $6133 = Fm$Term$equal$extra_holes$(_a$1, $6132);
                        var $6072 = $6133;
                        break;
                };
                var $5944 = $6072;
                break;
            case 'Fm.Term.all':
                var $6134 = self.eras;
                var $6135 = self.self;
                var $6136 = self.name;
                var $6137 = self.xtyp;
                var $6138 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6140 = self.name;
                        var $6141 = self.indx;
                        var $6142 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6142;
                        break;
                    case 'Fm.Term.ref':
                        var $6143 = self.name;
                        var $6144 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6144;
                        break;
                    case 'Fm.Term.typ':
                        var $6145 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6145;
                        break;
                    case 'Fm.Term.all':
                        var $6146 = self.eras;
                        var $6147 = self.self;
                        var $6148 = self.name;
                        var $6149 = self.xtyp;
                        var $6150 = self.body;
                        var $6151 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6151;
                        break;
                    case 'Fm.Term.lam':
                        var $6152 = self.name;
                        var $6153 = self.body;
                        var $6154 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6154;
                        break;
                    case 'Fm.Term.app':
                        var $6155 = self.func;
                        var $6156 = self.argm;
                        var $6157 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6157;
                        break;
                    case 'Fm.Term.let':
                        var $6158 = self.name;
                        var $6159 = self.expr;
                        var $6160 = self.body;
                        var $6161 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6161;
                        break;
                    case 'Fm.Term.def':
                        var $6162 = self.name;
                        var $6163 = self.expr;
                        var $6164 = self.body;
                        var $6165 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6165;
                        break;
                    case 'Fm.Term.ann':
                        var $6166 = self.done;
                        var $6167 = self.term;
                        var $6168 = self.type;
                        var $6169 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6169;
                        break;
                    case 'Fm.Term.gol':
                        var $6170 = self.name;
                        var $6171 = self.dref;
                        var $6172 = self.verb;
                        var $6173 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6173;
                        break;
                    case 'Fm.Term.hol':
                        var $6174 = self.path;
                        var self = Fm$Term$equal$hole$($6174, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6176 = self.value;
                                var $6177 = self.errors;
                                var self = $6176;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6179 = Fm$Check$result$(Maybe$none, $6177);
                                        var $6178 = $6179;
                                        break;
                                    case 'Maybe.some':
                                        var $6180 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6182 = self.value;
                                                var $6183 = self.errors;
                                                var $6184 = Fm$Check$result$($6182, List$concat$($6177, $6183));
                                                var $6181 = $6184;
                                                break;
                                        };
                                        var $6178 = $6181;
                                        break;
                                };
                                var $6175 = $6178;
                                break;
                        };
                        var $6139 = $6175;
                        break;
                    case 'Fm.Term.nat':
                        var $6185 = self.natx;
                        var $6186 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6186;
                        break;
                    case 'Fm.Term.chr':
                        var $6187 = self.chrx;
                        var $6188 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6188;
                        break;
                    case 'Fm.Term.str':
                        var $6189 = self.strx;
                        var $6190 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6190;
                        break;
                    case 'Fm.Term.cse':
                        var $6191 = self.path;
                        var $6192 = self.expr;
                        var $6193 = self.name;
                        var $6194 = self.with;
                        var $6195 = self.cses;
                        var $6196 = self.moti;
                        var $6197 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6139 = $6197;
                        break;
                    case 'Fm.Term.ori':
                        var $6198 = self.orig;
                        var $6199 = self.expr;
                        var $6200 = Fm$Term$equal$extra_holes$(_a$1, $6199);
                        var $6139 = $6200;
                        break;
                };
                var $5944 = $6139;
                break;
            case 'Fm.Term.lam':
                var $6201 = self.name;
                var $6202 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6204 = self.name;
                        var $6205 = self.indx;
                        var $6206 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6206;
                        break;
                    case 'Fm.Term.ref':
                        var $6207 = self.name;
                        var $6208 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6208;
                        break;
                    case 'Fm.Term.typ':
                        var $6209 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6209;
                        break;
                    case 'Fm.Term.all':
                        var $6210 = self.eras;
                        var $6211 = self.self;
                        var $6212 = self.name;
                        var $6213 = self.xtyp;
                        var $6214 = self.body;
                        var $6215 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6215;
                        break;
                    case 'Fm.Term.lam':
                        var $6216 = self.name;
                        var $6217 = self.body;
                        var $6218 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6218;
                        break;
                    case 'Fm.Term.app':
                        var $6219 = self.func;
                        var $6220 = self.argm;
                        var $6221 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6221;
                        break;
                    case 'Fm.Term.let':
                        var $6222 = self.name;
                        var $6223 = self.expr;
                        var $6224 = self.body;
                        var $6225 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6225;
                        break;
                    case 'Fm.Term.def':
                        var $6226 = self.name;
                        var $6227 = self.expr;
                        var $6228 = self.body;
                        var $6229 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6229;
                        break;
                    case 'Fm.Term.ann':
                        var $6230 = self.done;
                        var $6231 = self.term;
                        var $6232 = self.type;
                        var $6233 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6233;
                        break;
                    case 'Fm.Term.gol':
                        var $6234 = self.name;
                        var $6235 = self.dref;
                        var $6236 = self.verb;
                        var $6237 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6237;
                        break;
                    case 'Fm.Term.hol':
                        var $6238 = self.path;
                        var self = Fm$Term$equal$hole$($6238, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6240 = self.value;
                                var $6241 = self.errors;
                                var self = $6240;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6243 = Fm$Check$result$(Maybe$none, $6241);
                                        var $6242 = $6243;
                                        break;
                                    case 'Maybe.some':
                                        var $6244 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6246 = self.value;
                                                var $6247 = self.errors;
                                                var $6248 = Fm$Check$result$($6246, List$concat$($6241, $6247));
                                                var $6245 = $6248;
                                                break;
                                        };
                                        var $6242 = $6245;
                                        break;
                                };
                                var $6239 = $6242;
                                break;
                        };
                        var $6203 = $6239;
                        break;
                    case 'Fm.Term.nat':
                        var $6249 = self.natx;
                        var $6250 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6250;
                        break;
                    case 'Fm.Term.chr':
                        var $6251 = self.chrx;
                        var $6252 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6252;
                        break;
                    case 'Fm.Term.str':
                        var $6253 = self.strx;
                        var $6254 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6254;
                        break;
                    case 'Fm.Term.cse':
                        var $6255 = self.path;
                        var $6256 = self.expr;
                        var $6257 = self.name;
                        var $6258 = self.with;
                        var $6259 = self.cses;
                        var $6260 = self.moti;
                        var $6261 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6203 = $6261;
                        break;
                    case 'Fm.Term.ori':
                        var $6262 = self.orig;
                        var $6263 = self.expr;
                        var $6264 = Fm$Term$equal$extra_holes$(_a$1, $6263);
                        var $6203 = $6264;
                        break;
                };
                var $5944 = $6203;
                break;
            case 'Fm.Term.app':
                var $6265 = self.func;
                var $6266 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6268 = self.name;
                        var $6269 = self.indx;
                        var $6270 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6270;
                        break;
                    case 'Fm.Term.ref':
                        var $6271 = self.name;
                        var $6272 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6272;
                        break;
                    case 'Fm.Term.typ':
                        var $6273 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6273;
                        break;
                    case 'Fm.Term.all':
                        var $6274 = self.eras;
                        var $6275 = self.self;
                        var $6276 = self.name;
                        var $6277 = self.xtyp;
                        var $6278 = self.body;
                        var $6279 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6279;
                        break;
                    case 'Fm.Term.lam':
                        var $6280 = self.name;
                        var $6281 = self.body;
                        var $6282 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6282;
                        break;
                    case 'Fm.Term.app':
                        var $6283 = self.func;
                        var $6284 = self.argm;
                        var self = Fm$Term$equal$extra_holes$($6265, $6283);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6286 = self.value;
                                var $6287 = self.errors;
                                var self = $6286;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6289 = Fm$Check$result$(Maybe$none, $6287);
                                        var $6288 = $6289;
                                        break;
                                    case 'Maybe.some':
                                        var $6290 = self.value;
                                        var self = Fm$Term$equal$extra_holes$($6266, $6284);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6292 = self.value;
                                                var $6293 = self.errors;
                                                var $6294 = Fm$Check$result$($6292, List$concat$($6287, $6293));
                                                var $6291 = $6294;
                                                break;
                                        };
                                        var $6288 = $6291;
                                        break;
                                };
                                var $6285 = $6288;
                                break;
                        };
                        var $6267 = $6285;
                        break;
                    case 'Fm.Term.let':
                        var $6295 = self.name;
                        var $6296 = self.expr;
                        var $6297 = self.body;
                        var $6298 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6298;
                        break;
                    case 'Fm.Term.def':
                        var $6299 = self.name;
                        var $6300 = self.expr;
                        var $6301 = self.body;
                        var $6302 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6302;
                        break;
                    case 'Fm.Term.ann':
                        var $6303 = self.done;
                        var $6304 = self.term;
                        var $6305 = self.type;
                        var $6306 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6306;
                        break;
                    case 'Fm.Term.gol':
                        var $6307 = self.name;
                        var $6308 = self.dref;
                        var $6309 = self.verb;
                        var $6310 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6310;
                        break;
                    case 'Fm.Term.hol':
                        var $6311 = self.path;
                        var self = Fm$Term$equal$hole$($6311, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6313 = self.value;
                                var $6314 = self.errors;
                                var self = $6313;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6316 = Fm$Check$result$(Maybe$none, $6314);
                                        var $6315 = $6316;
                                        break;
                                    case 'Maybe.some':
                                        var $6317 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6319 = self.value;
                                                var $6320 = self.errors;
                                                var $6321 = Fm$Check$result$($6319, List$concat$($6314, $6320));
                                                var $6318 = $6321;
                                                break;
                                        };
                                        var $6315 = $6318;
                                        break;
                                };
                                var $6312 = $6315;
                                break;
                        };
                        var $6267 = $6312;
                        break;
                    case 'Fm.Term.nat':
                        var $6322 = self.natx;
                        var $6323 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6323;
                        break;
                    case 'Fm.Term.chr':
                        var $6324 = self.chrx;
                        var $6325 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6325;
                        break;
                    case 'Fm.Term.str':
                        var $6326 = self.strx;
                        var $6327 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6327;
                        break;
                    case 'Fm.Term.cse':
                        var $6328 = self.path;
                        var $6329 = self.expr;
                        var $6330 = self.name;
                        var $6331 = self.with;
                        var $6332 = self.cses;
                        var $6333 = self.moti;
                        var $6334 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6267 = $6334;
                        break;
                    case 'Fm.Term.ori':
                        var $6335 = self.orig;
                        var $6336 = self.expr;
                        var $6337 = Fm$Term$equal$extra_holes$(_a$1, $6336);
                        var $6267 = $6337;
                        break;
                };
                var $5944 = $6267;
                break;
            case 'Fm.Term.let':
                var $6338 = self.name;
                var $6339 = self.expr;
                var $6340 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6342 = self.name;
                        var $6343 = self.indx;
                        var $6344 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6344;
                        break;
                    case 'Fm.Term.ref':
                        var $6345 = self.name;
                        var $6346 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6346;
                        break;
                    case 'Fm.Term.typ':
                        var $6347 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6347;
                        break;
                    case 'Fm.Term.all':
                        var $6348 = self.eras;
                        var $6349 = self.self;
                        var $6350 = self.name;
                        var $6351 = self.xtyp;
                        var $6352 = self.body;
                        var $6353 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6353;
                        break;
                    case 'Fm.Term.lam':
                        var $6354 = self.name;
                        var $6355 = self.body;
                        var $6356 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6356;
                        break;
                    case 'Fm.Term.app':
                        var $6357 = self.func;
                        var $6358 = self.argm;
                        var $6359 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6359;
                        break;
                    case 'Fm.Term.let':
                        var $6360 = self.name;
                        var $6361 = self.expr;
                        var $6362 = self.body;
                        var $6363 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6363;
                        break;
                    case 'Fm.Term.def':
                        var $6364 = self.name;
                        var $6365 = self.expr;
                        var $6366 = self.body;
                        var $6367 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6367;
                        break;
                    case 'Fm.Term.ann':
                        var $6368 = self.done;
                        var $6369 = self.term;
                        var $6370 = self.type;
                        var $6371 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6371;
                        break;
                    case 'Fm.Term.gol':
                        var $6372 = self.name;
                        var $6373 = self.dref;
                        var $6374 = self.verb;
                        var $6375 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6375;
                        break;
                    case 'Fm.Term.hol':
                        var $6376 = self.path;
                        var self = Fm$Term$equal$hole$($6376, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6378 = self.value;
                                var $6379 = self.errors;
                                var self = $6378;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6381 = Fm$Check$result$(Maybe$none, $6379);
                                        var $6380 = $6381;
                                        break;
                                    case 'Maybe.some':
                                        var $6382 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6384 = self.value;
                                                var $6385 = self.errors;
                                                var $6386 = Fm$Check$result$($6384, List$concat$($6379, $6385));
                                                var $6383 = $6386;
                                                break;
                                        };
                                        var $6380 = $6383;
                                        break;
                                };
                                var $6377 = $6380;
                                break;
                        };
                        var $6341 = $6377;
                        break;
                    case 'Fm.Term.nat':
                        var $6387 = self.natx;
                        var $6388 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6388;
                        break;
                    case 'Fm.Term.chr':
                        var $6389 = self.chrx;
                        var $6390 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6390;
                        break;
                    case 'Fm.Term.str':
                        var $6391 = self.strx;
                        var $6392 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6392;
                        break;
                    case 'Fm.Term.cse':
                        var $6393 = self.path;
                        var $6394 = self.expr;
                        var $6395 = self.name;
                        var $6396 = self.with;
                        var $6397 = self.cses;
                        var $6398 = self.moti;
                        var $6399 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6341 = $6399;
                        break;
                    case 'Fm.Term.ori':
                        var $6400 = self.orig;
                        var $6401 = self.expr;
                        var $6402 = Fm$Term$equal$extra_holes$(_a$1, $6401);
                        var $6341 = $6402;
                        break;
                };
                var $5944 = $6341;
                break;
            case 'Fm.Term.def':
                var $6403 = self.name;
                var $6404 = self.expr;
                var $6405 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6407 = self.name;
                        var $6408 = self.indx;
                        var $6409 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6409;
                        break;
                    case 'Fm.Term.ref':
                        var $6410 = self.name;
                        var $6411 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6411;
                        break;
                    case 'Fm.Term.typ':
                        var $6412 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6412;
                        break;
                    case 'Fm.Term.all':
                        var $6413 = self.eras;
                        var $6414 = self.self;
                        var $6415 = self.name;
                        var $6416 = self.xtyp;
                        var $6417 = self.body;
                        var $6418 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6418;
                        break;
                    case 'Fm.Term.lam':
                        var $6419 = self.name;
                        var $6420 = self.body;
                        var $6421 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6421;
                        break;
                    case 'Fm.Term.app':
                        var $6422 = self.func;
                        var $6423 = self.argm;
                        var $6424 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6424;
                        break;
                    case 'Fm.Term.let':
                        var $6425 = self.name;
                        var $6426 = self.expr;
                        var $6427 = self.body;
                        var $6428 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6428;
                        break;
                    case 'Fm.Term.def':
                        var $6429 = self.name;
                        var $6430 = self.expr;
                        var $6431 = self.body;
                        var $6432 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6432;
                        break;
                    case 'Fm.Term.ann':
                        var $6433 = self.done;
                        var $6434 = self.term;
                        var $6435 = self.type;
                        var $6436 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6436;
                        break;
                    case 'Fm.Term.gol':
                        var $6437 = self.name;
                        var $6438 = self.dref;
                        var $6439 = self.verb;
                        var $6440 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6440;
                        break;
                    case 'Fm.Term.hol':
                        var $6441 = self.path;
                        var self = Fm$Term$equal$hole$($6441, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6443 = self.value;
                                var $6444 = self.errors;
                                var self = $6443;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6446 = Fm$Check$result$(Maybe$none, $6444);
                                        var $6445 = $6446;
                                        break;
                                    case 'Maybe.some':
                                        var $6447 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6449 = self.value;
                                                var $6450 = self.errors;
                                                var $6451 = Fm$Check$result$($6449, List$concat$($6444, $6450));
                                                var $6448 = $6451;
                                                break;
                                        };
                                        var $6445 = $6448;
                                        break;
                                };
                                var $6442 = $6445;
                                break;
                        };
                        var $6406 = $6442;
                        break;
                    case 'Fm.Term.nat':
                        var $6452 = self.natx;
                        var $6453 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6453;
                        break;
                    case 'Fm.Term.chr':
                        var $6454 = self.chrx;
                        var $6455 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6455;
                        break;
                    case 'Fm.Term.str':
                        var $6456 = self.strx;
                        var $6457 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6457;
                        break;
                    case 'Fm.Term.cse':
                        var $6458 = self.path;
                        var $6459 = self.expr;
                        var $6460 = self.name;
                        var $6461 = self.with;
                        var $6462 = self.cses;
                        var $6463 = self.moti;
                        var $6464 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6406 = $6464;
                        break;
                    case 'Fm.Term.ori':
                        var $6465 = self.orig;
                        var $6466 = self.expr;
                        var $6467 = Fm$Term$equal$extra_holes$(_a$1, $6466);
                        var $6406 = $6467;
                        break;
                };
                var $5944 = $6406;
                break;
            case 'Fm.Term.ann':
                var $6468 = self.done;
                var $6469 = self.term;
                var $6470 = self.type;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6472 = self.name;
                        var $6473 = self.indx;
                        var $6474 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6474;
                        break;
                    case 'Fm.Term.ref':
                        var $6475 = self.name;
                        var $6476 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6476;
                        break;
                    case 'Fm.Term.typ':
                        var $6477 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6477;
                        break;
                    case 'Fm.Term.all':
                        var $6478 = self.eras;
                        var $6479 = self.self;
                        var $6480 = self.name;
                        var $6481 = self.xtyp;
                        var $6482 = self.body;
                        var $6483 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6483;
                        break;
                    case 'Fm.Term.lam':
                        var $6484 = self.name;
                        var $6485 = self.body;
                        var $6486 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6486;
                        break;
                    case 'Fm.Term.app':
                        var $6487 = self.func;
                        var $6488 = self.argm;
                        var $6489 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6489;
                        break;
                    case 'Fm.Term.let':
                        var $6490 = self.name;
                        var $6491 = self.expr;
                        var $6492 = self.body;
                        var $6493 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6493;
                        break;
                    case 'Fm.Term.def':
                        var $6494 = self.name;
                        var $6495 = self.expr;
                        var $6496 = self.body;
                        var $6497 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6497;
                        break;
                    case 'Fm.Term.ann':
                        var $6498 = self.done;
                        var $6499 = self.term;
                        var $6500 = self.type;
                        var $6501 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6501;
                        break;
                    case 'Fm.Term.gol':
                        var $6502 = self.name;
                        var $6503 = self.dref;
                        var $6504 = self.verb;
                        var $6505 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6505;
                        break;
                    case 'Fm.Term.hol':
                        var $6506 = self.path;
                        var self = Fm$Term$equal$hole$($6506, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6508 = self.value;
                                var $6509 = self.errors;
                                var self = $6508;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6511 = Fm$Check$result$(Maybe$none, $6509);
                                        var $6510 = $6511;
                                        break;
                                    case 'Maybe.some':
                                        var $6512 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6514 = self.value;
                                                var $6515 = self.errors;
                                                var $6516 = Fm$Check$result$($6514, List$concat$($6509, $6515));
                                                var $6513 = $6516;
                                                break;
                                        };
                                        var $6510 = $6513;
                                        break;
                                };
                                var $6507 = $6510;
                                break;
                        };
                        var $6471 = $6507;
                        break;
                    case 'Fm.Term.nat':
                        var $6517 = self.natx;
                        var $6518 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6518;
                        break;
                    case 'Fm.Term.chr':
                        var $6519 = self.chrx;
                        var $6520 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6520;
                        break;
                    case 'Fm.Term.str':
                        var $6521 = self.strx;
                        var $6522 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6522;
                        break;
                    case 'Fm.Term.cse':
                        var $6523 = self.path;
                        var $6524 = self.expr;
                        var $6525 = self.name;
                        var $6526 = self.with;
                        var $6527 = self.cses;
                        var $6528 = self.moti;
                        var $6529 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6471 = $6529;
                        break;
                    case 'Fm.Term.ori':
                        var $6530 = self.orig;
                        var $6531 = self.expr;
                        var $6532 = Fm$Term$equal$extra_holes$(_a$1, $6531);
                        var $6471 = $6532;
                        break;
                };
                var $5944 = $6471;
                break;
            case 'Fm.Term.gol':
                var $6533 = self.name;
                var $6534 = self.dref;
                var $6535 = self.verb;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6537 = self.name;
                        var $6538 = self.indx;
                        var $6539 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6539;
                        break;
                    case 'Fm.Term.ref':
                        var $6540 = self.name;
                        var $6541 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6541;
                        break;
                    case 'Fm.Term.typ':
                        var $6542 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6542;
                        break;
                    case 'Fm.Term.all':
                        var $6543 = self.eras;
                        var $6544 = self.self;
                        var $6545 = self.name;
                        var $6546 = self.xtyp;
                        var $6547 = self.body;
                        var $6548 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6548;
                        break;
                    case 'Fm.Term.lam':
                        var $6549 = self.name;
                        var $6550 = self.body;
                        var $6551 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6551;
                        break;
                    case 'Fm.Term.app':
                        var $6552 = self.func;
                        var $6553 = self.argm;
                        var $6554 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6554;
                        break;
                    case 'Fm.Term.let':
                        var $6555 = self.name;
                        var $6556 = self.expr;
                        var $6557 = self.body;
                        var $6558 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6558;
                        break;
                    case 'Fm.Term.def':
                        var $6559 = self.name;
                        var $6560 = self.expr;
                        var $6561 = self.body;
                        var $6562 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6562;
                        break;
                    case 'Fm.Term.ann':
                        var $6563 = self.done;
                        var $6564 = self.term;
                        var $6565 = self.type;
                        var $6566 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6566;
                        break;
                    case 'Fm.Term.gol':
                        var $6567 = self.name;
                        var $6568 = self.dref;
                        var $6569 = self.verb;
                        var $6570 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6570;
                        break;
                    case 'Fm.Term.hol':
                        var $6571 = self.path;
                        var self = Fm$Term$equal$hole$($6571, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6573 = self.value;
                                var $6574 = self.errors;
                                var self = $6573;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6576 = Fm$Check$result$(Maybe$none, $6574);
                                        var $6575 = $6576;
                                        break;
                                    case 'Maybe.some':
                                        var $6577 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6579 = self.value;
                                                var $6580 = self.errors;
                                                var $6581 = Fm$Check$result$($6579, List$concat$($6574, $6580));
                                                var $6578 = $6581;
                                                break;
                                        };
                                        var $6575 = $6578;
                                        break;
                                };
                                var $6572 = $6575;
                                break;
                        };
                        var $6536 = $6572;
                        break;
                    case 'Fm.Term.nat':
                        var $6582 = self.natx;
                        var $6583 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6583;
                        break;
                    case 'Fm.Term.chr':
                        var $6584 = self.chrx;
                        var $6585 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6585;
                        break;
                    case 'Fm.Term.str':
                        var $6586 = self.strx;
                        var $6587 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6587;
                        break;
                    case 'Fm.Term.cse':
                        var $6588 = self.path;
                        var $6589 = self.expr;
                        var $6590 = self.name;
                        var $6591 = self.with;
                        var $6592 = self.cses;
                        var $6593 = self.moti;
                        var $6594 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6536 = $6594;
                        break;
                    case 'Fm.Term.ori':
                        var $6595 = self.orig;
                        var $6596 = self.expr;
                        var $6597 = Fm$Term$equal$extra_holes$(_a$1, $6596);
                        var $6536 = $6597;
                        break;
                };
                var $5944 = $6536;
                break;
            case 'Fm.Term.hol':
                var $6598 = self.path;
                var self = Fm$Term$equal$hole$($6598, _b$2);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $6600 = self.value;
                        var $6601 = self.errors;
                        var self = $6600;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6603 = Fm$Check$result$(Maybe$none, $6601);
                                var $6602 = $6603;
                                break;
                            case 'Maybe.some':
                                var $6604 = self.value;
                                var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $6606 = self.value;
                                        var $6607 = self.errors;
                                        var $6608 = Fm$Check$result$($6606, List$concat$($6601, $6607));
                                        var $6605 = $6608;
                                        break;
                                };
                                var $6602 = $6605;
                                break;
                        };
                        var $6599 = $6602;
                        break;
                };
                var $5944 = $6599;
                break;
            case 'Fm.Term.nat':
                var $6609 = self.natx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6611 = self.name;
                        var $6612 = self.indx;
                        var $6613 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6613;
                        break;
                    case 'Fm.Term.ref':
                        var $6614 = self.name;
                        var $6615 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6615;
                        break;
                    case 'Fm.Term.typ':
                        var $6616 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6616;
                        break;
                    case 'Fm.Term.all':
                        var $6617 = self.eras;
                        var $6618 = self.self;
                        var $6619 = self.name;
                        var $6620 = self.xtyp;
                        var $6621 = self.body;
                        var $6622 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6622;
                        break;
                    case 'Fm.Term.lam':
                        var $6623 = self.name;
                        var $6624 = self.body;
                        var $6625 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6625;
                        break;
                    case 'Fm.Term.app':
                        var $6626 = self.func;
                        var $6627 = self.argm;
                        var $6628 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6628;
                        break;
                    case 'Fm.Term.let':
                        var $6629 = self.name;
                        var $6630 = self.expr;
                        var $6631 = self.body;
                        var $6632 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6632;
                        break;
                    case 'Fm.Term.def':
                        var $6633 = self.name;
                        var $6634 = self.expr;
                        var $6635 = self.body;
                        var $6636 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6636;
                        break;
                    case 'Fm.Term.ann':
                        var $6637 = self.done;
                        var $6638 = self.term;
                        var $6639 = self.type;
                        var $6640 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6640;
                        break;
                    case 'Fm.Term.gol':
                        var $6641 = self.name;
                        var $6642 = self.dref;
                        var $6643 = self.verb;
                        var $6644 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6644;
                        break;
                    case 'Fm.Term.hol':
                        var $6645 = self.path;
                        var self = Fm$Term$equal$hole$($6645, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6647 = self.value;
                                var $6648 = self.errors;
                                var self = $6647;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6650 = Fm$Check$result$(Maybe$none, $6648);
                                        var $6649 = $6650;
                                        break;
                                    case 'Maybe.some':
                                        var $6651 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6653 = self.value;
                                                var $6654 = self.errors;
                                                var $6655 = Fm$Check$result$($6653, List$concat$($6648, $6654));
                                                var $6652 = $6655;
                                                break;
                                        };
                                        var $6649 = $6652;
                                        break;
                                };
                                var $6646 = $6649;
                                break;
                        };
                        var $6610 = $6646;
                        break;
                    case 'Fm.Term.nat':
                        var $6656 = self.natx;
                        var $6657 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6657;
                        break;
                    case 'Fm.Term.chr':
                        var $6658 = self.chrx;
                        var $6659 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6659;
                        break;
                    case 'Fm.Term.str':
                        var $6660 = self.strx;
                        var $6661 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6661;
                        break;
                    case 'Fm.Term.cse':
                        var $6662 = self.path;
                        var $6663 = self.expr;
                        var $6664 = self.name;
                        var $6665 = self.with;
                        var $6666 = self.cses;
                        var $6667 = self.moti;
                        var $6668 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6610 = $6668;
                        break;
                    case 'Fm.Term.ori':
                        var $6669 = self.orig;
                        var $6670 = self.expr;
                        var $6671 = Fm$Term$equal$extra_holes$(_a$1, $6670);
                        var $6610 = $6671;
                        break;
                };
                var $5944 = $6610;
                break;
            case 'Fm.Term.chr':
                var $6672 = self.chrx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6674 = self.name;
                        var $6675 = self.indx;
                        var $6676 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6676;
                        break;
                    case 'Fm.Term.ref':
                        var $6677 = self.name;
                        var $6678 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6678;
                        break;
                    case 'Fm.Term.typ':
                        var $6679 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6679;
                        break;
                    case 'Fm.Term.all':
                        var $6680 = self.eras;
                        var $6681 = self.self;
                        var $6682 = self.name;
                        var $6683 = self.xtyp;
                        var $6684 = self.body;
                        var $6685 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6685;
                        break;
                    case 'Fm.Term.lam':
                        var $6686 = self.name;
                        var $6687 = self.body;
                        var $6688 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6688;
                        break;
                    case 'Fm.Term.app':
                        var $6689 = self.func;
                        var $6690 = self.argm;
                        var $6691 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6691;
                        break;
                    case 'Fm.Term.let':
                        var $6692 = self.name;
                        var $6693 = self.expr;
                        var $6694 = self.body;
                        var $6695 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6695;
                        break;
                    case 'Fm.Term.def':
                        var $6696 = self.name;
                        var $6697 = self.expr;
                        var $6698 = self.body;
                        var $6699 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6699;
                        break;
                    case 'Fm.Term.ann':
                        var $6700 = self.done;
                        var $6701 = self.term;
                        var $6702 = self.type;
                        var $6703 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6703;
                        break;
                    case 'Fm.Term.gol':
                        var $6704 = self.name;
                        var $6705 = self.dref;
                        var $6706 = self.verb;
                        var $6707 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6707;
                        break;
                    case 'Fm.Term.hol':
                        var $6708 = self.path;
                        var self = Fm$Term$equal$hole$($6708, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6710 = self.value;
                                var $6711 = self.errors;
                                var self = $6710;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6713 = Fm$Check$result$(Maybe$none, $6711);
                                        var $6712 = $6713;
                                        break;
                                    case 'Maybe.some':
                                        var $6714 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6716 = self.value;
                                                var $6717 = self.errors;
                                                var $6718 = Fm$Check$result$($6716, List$concat$($6711, $6717));
                                                var $6715 = $6718;
                                                break;
                                        };
                                        var $6712 = $6715;
                                        break;
                                };
                                var $6709 = $6712;
                                break;
                        };
                        var $6673 = $6709;
                        break;
                    case 'Fm.Term.nat':
                        var $6719 = self.natx;
                        var $6720 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6720;
                        break;
                    case 'Fm.Term.chr':
                        var $6721 = self.chrx;
                        var $6722 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6722;
                        break;
                    case 'Fm.Term.str':
                        var $6723 = self.strx;
                        var $6724 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6724;
                        break;
                    case 'Fm.Term.cse':
                        var $6725 = self.path;
                        var $6726 = self.expr;
                        var $6727 = self.name;
                        var $6728 = self.with;
                        var $6729 = self.cses;
                        var $6730 = self.moti;
                        var $6731 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6673 = $6731;
                        break;
                    case 'Fm.Term.ori':
                        var $6732 = self.orig;
                        var $6733 = self.expr;
                        var $6734 = Fm$Term$equal$extra_holes$(_a$1, $6733);
                        var $6673 = $6734;
                        break;
                };
                var $5944 = $6673;
                break;
            case 'Fm.Term.str':
                var $6735 = self.strx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6737 = self.name;
                        var $6738 = self.indx;
                        var $6739 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6739;
                        break;
                    case 'Fm.Term.ref':
                        var $6740 = self.name;
                        var $6741 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6741;
                        break;
                    case 'Fm.Term.typ':
                        var $6742 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6742;
                        break;
                    case 'Fm.Term.all':
                        var $6743 = self.eras;
                        var $6744 = self.self;
                        var $6745 = self.name;
                        var $6746 = self.xtyp;
                        var $6747 = self.body;
                        var $6748 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6748;
                        break;
                    case 'Fm.Term.lam':
                        var $6749 = self.name;
                        var $6750 = self.body;
                        var $6751 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6751;
                        break;
                    case 'Fm.Term.app':
                        var $6752 = self.func;
                        var $6753 = self.argm;
                        var $6754 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6754;
                        break;
                    case 'Fm.Term.let':
                        var $6755 = self.name;
                        var $6756 = self.expr;
                        var $6757 = self.body;
                        var $6758 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6758;
                        break;
                    case 'Fm.Term.def':
                        var $6759 = self.name;
                        var $6760 = self.expr;
                        var $6761 = self.body;
                        var $6762 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6762;
                        break;
                    case 'Fm.Term.ann':
                        var $6763 = self.done;
                        var $6764 = self.term;
                        var $6765 = self.type;
                        var $6766 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6766;
                        break;
                    case 'Fm.Term.gol':
                        var $6767 = self.name;
                        var $6768 = self.dref;
                        var $6769 = self.verb;
                        var $6770 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6770;
                        break;
                    case 'Fm.Term.hol':
                        var $6771 = self.path;
                        var self = Fm$Term$equal$hole$($6771, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6773 = self.value;
                                var $6774 = self.errors;
                                var self = $6773;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6776 = Fm$Check$result$(Maybe$none, $6774);
                                        var $6775 = $6776;
                                        break;
                                    case 'Maybe.some':
                                        var $6777 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6779 = self.value;
                                                var $6780 = self.errors;
                                                var $6781 = Fm$Check$result$($6779, List$concat$($6774, $6780));
                                                var $6778 = $6781;
                                                break;
                                        };
                                        var $6775 = $6778;
                                        break;
                                };
                                var $6772 = $6775;
                                break;
                        };
                        var $6736 = $6772;
                        break;
                    case 'Fm.Term.nat':
                        var $6782 = self.natx;
                        var $6783 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6783;
                        break;
                    case 'Fm.Term.chr':
                        var $6784 = self.chrx;
                        var $6785 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6785;
                        break;
                    case 'Fm.Term.str':
                        var $6786 = self.strx;
                        var $6787 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6787;
                        break;
                    case 'Fm.Term.cse':
                        var $6788 = self.path;
                        var $6789 = self.expr;
                        var $6790 = self.name;
                        var $6791 = self.with;
                        var $6792 = self.cses;
                        var $6793 = self.moti;
                        var $6794 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6736 = $6794;
                        break;
                    case 'Fm.Term.ori':
                        var $6795 = self.orig;
                        var $6796 = self.expr;
                        var $6797 = Fm$Term$equal$extra_holes$(_a$1, $6796);
                        var $6736 = $6797;
                        break;
                };
                var $5944 = $6736;
                break;
            case 'Fm.Term.cse':
                var $6798 = self.path;
                var $6799 = self.expr;
                var $6800 = self.name;
                var $6801 = self.with;
                var $6802 = self.cses;
                var $6803 = self.moti;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6805 = self.name;
                        var $6806 = self.indx;
                        var $6807 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6807;
                        break;
                    case 'Fm.Term.ref':
                        var $6808 = self.name;
                        var $6809 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6809;
                        break;
                    case 'Fm.Term.typ':
                        var $6810 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6810;
                        break;
                    case 'Fm.Term.all':
                        var $6811 = self.eras;
                        var $6812 = self.self;
                        var $6813 = self.name;
                        var $6814 = self.xtyp;
                        var $6815 = self.body;
                        var $6816 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6816;
                        break;
                    case 'Fm.Term.lam':
                        var $6817 = self.name;
                        var $6818 = self.body;
                        var $6819 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6819;
                        break;
                    case 'Fm.Term.app':
                        var $6820 = self.func;
                        var $6821 = self.argm;
                        var $6822 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6822;
                        break;
                    case 'Fm.Term.let':
                        var $6823 = self.name;
                        var $6824 = self.expr;
                        var $6825 = self.body;
                        var $6826 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6826;
                        break;
                    case 'Fm.Term.def':
                        var $6827 = self.name;
                        var $6828 = self.expr;
                        var $6829 = self.body;
                        var $6830 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6830;
                        break;
                    case 'Fm.Term.ann':
                        var $6831 = self.done;
                        var $6832 = self.term;
                        var $6833 = self.type;
                        var $6834 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6834;
                        break;
                    case 'Fm.Term.gol':
                        var $6835 = self.name;
                        var $6836 = self.dref;
                        var $6837 = self.verb;
                        var $6838 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6838;
                        break;
                    case 'Fm.Term.hol':
                        var $6839 = self.path;
                        var self = Fm$Term$equal$hole$($6839, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6841 = self.value;
                                var $6842 = self.errors;
                                var self = $6841;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6844 = Fm$Check$result$(Maybe$none, $6842);
                                        var $6843 = $6844;
                                        break;
                                    case 'Maybe.some':
                                        var $6845 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6847 = self.value;
                                                var $6848 = self.errors;
                                                var $6849 = Fm$Check$result$($6847, List$concat$($6842, $6848));
                                                var $6846 = $6849;
                                                break;
                                        };
                                        var $6843 = $6846;
                                        break;
                                };
                                var $6840 = $6843;
                                break;
                        };
                        var $6804 = $6840;
                        break;
                    case 'Fm.Term.nat':
                        var $6850 = self.natx;
                        var $6851 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6851;
                        break;
                    case 'Fm.Term.chr':
                        var $6852 = self.chrx;
                        var $6853 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6853;
                        break;
                    case 'Fm.Term.str':
                        var $6854 = self.strx;
                        var $6855 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6855;
                        break;
                    case 'Fm.Term.cse':
                        var $6856 = self.path;
                        var $6857 = self.expr;
                        var $6858 = self.name;
                        var $6859 = self.with;
                        var $6860 = self.cses;
                        var $6861 = self.moti;
                        var $6862 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6804 = $6862;
                        break;
                    case 'Fm.Term.ori':
                        var $6863 = self.orig;
                        var $6864 = self.expr;
                        var $6865 = Fm$Term$equal$extra_holes$(_a$1, $6864);
                        var $6804 = $6865;
                        break;
                };
                var $5944 = $6804;
                break;
            case 'Fm.Term.ori':
                var $6866 = self.orig;
                var $6867 = self.expr;
                var $6868 = Fm$Term$equal$extra_holes$($6867, _b$2);
                var $5944 = $6868;
                break;
        };
        return $5944;
    };
    const Fm$Term$equal$extra_holes = x0 => x1 => Fm$Term$equal$extra_holes$(x0, x1);

    function Set$set$(_bits$1, _set$2) {
        var $6869 = Map$set$(_bits$1, Unit$new, _set$2);
        return $6869;
    };
    const Set$set = x0 => x1 => Set$set$(x0, x1);
    const Set$mut$set = a0 => a1 => (((k, s) => ((s[k] = true), s))(a0, a1));

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $6871 = _b$2;
            var $6870 = $6871;
        } else {
            var $6872 = (!_b$2);
            var $6870 = $6872;
        };
        return $6870;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Fm$Term$equal$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Fm$Term$serialize$(Fm$Term$reduce$(_a$1, Map$new), _lv$4, _lv$4, Bits$o, Bits$e);
        var _bh$7 = Fm$Term$serialize$(Fm$Term$reduce$(_b$2, Map$new), _lv$4, _lv$4, Bits$i, Bits$e);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $6874 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $6873 = $6874;
        } else {
            var _a1$8 = Fm$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Fm$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Fm$Term$serialize$(_a1$8, _lv$4, _lv$4, Bits$o, Bits$e);
            var _bh$11 = Fm$Term$serialize$(_b1$9, _lv$4, _lv$4, Bits$i, Bits$e);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $6876 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6875 = $6876;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = (!!(_seen$5[_id$12]));
                if (self) {
                    var self = Fm$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Fm.Check.result':
                            var $6879 = self.value;
                            var $6880 = self.errors;
                            var self = $6879;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6882 = Fm$Check$result$(Maybe$none, $6880);
                                    var $6881 = $6882;
                                    break;
                                case 'Maybe.some':
                                    var $6883 = self.value;
                                    var self = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $6885 = self.value;
                                            var $6886 = self.errors;
                                            var $6887 = Fm$Check$result$($6885, List$concat$($6880, $6886));
                                            var $6884 = $6887;
                                            break;
                                    };
                                    var $6881 = $6884;
                                    break;
                            };
                            var $6878 = $6881;
                            break;
                    };
                    var $6877 = $6878;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Fm.Term.var':
                            var $6889 = self.name;
                            var $6890 = self.indx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6892 = self.name;
                                    var $6893 = self.indx;
                                    var $6894 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6894;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6895 = self.name;
                                    var $6896 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6896;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6897 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6897;
                                    break;
                                case 'Fm.Term.all':
                                    var $6898 = self.eras;
                                    var $6899 = self.self;
                                    var $6900 = self.name;
                                    var $6901 = self.xtyp;
                                    var $6902 = self.body;
                                    var $6903 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6903;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6904 = self.name;
                                    var $6905 = self.body;
                                    var $6906 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6906;
                                    break;
                                case 'Fm.Term.app':
                                    var $6907 = self.func;
                                    var $6908 = self.argm;
                                    var $6909 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6909;
                                    break;
                                case 'Fm.Term.let':
                                    var $6910 = self.name;
                                    var $6911 = self.expr;
                                    var $6912 = self.body;
                                    var $6913 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6913;
                                    break;
                                case 'Fm.Term.def':
                                    var $6914 = self.name;
                                    var $6915 = self.expr;
                                    var $6916 = self.body;
                                    var $6917 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6917;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6918 = self.done;
                                    var $6919 = self.term;
                                    var $6920 = self.type;
                                    var $6921 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6921;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6922 = self.name;
                                    var $6923 = self.dref;
                                    var $6924 = self.verb;
                                    var $6925 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6925;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6926 = self.path;
                                    var $6927 = Fm$Term$equal$hole$($6926, _a$1);
                                    var $6891 = $6927;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6928 = self.natx;
                                    var $6929 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6929;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6930 = self.chrx;
                                    var $6931 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6931;
                                    break;
                                case 'Fm.Term.str':
                                    var $6932 = self.strx;
                                    var $6933 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6933;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6934 = self.path;
                                    var $6935 = self.expr;
                                    var $6936 = self.name;
                                    var $6937 = self.with;
                                    var $6938 = self.cses;
                                    var $6939 = self.moti;
                                    var $6940 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6940;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6941 = self.orig;
                                    var $6942 = self.expr;
                                    var $6943 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6891 = $6943;
                                    break;
                            };
                            var $6888 = $6891;
                            break;
                        case 'Fm.Term.ref':
                            var $6944 = self.name;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6946 = self.name;
                                    var $6947 = self.indx;
                                    var $6948 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6948;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6949 = self.name;
                                    var $6950 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6950;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6951 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6951;
                                    break;
                                case 'Fm.Term.all':
                                    var $6952 = self.eras;
                                    var $6953 = self.self;
                                    var $6954 = self.name;
                                    var $6955 = self.xtyp;
                                    var $6956 = self.body;
                                    var $6957 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6957;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6958 = self.name;
                                    var $6959 = self.body;
                                    var $6960 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6960;
                                    break;
                                case 'Fm.Term.app':
                                    var $6961 = self.func;
                                    var $6962 = self.argm;
                                    var $6963 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6963;
                                    break;
                                case 'Fm.Term.let':
                                    var $6964 = self.name;
                                    var $6965 = self.expr;
                                    var $6966 = self.body;
                                    var $6967 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6967;
                                    break;
                                case 'Fm.Term.def':
                                    var $6968 = self.name;
                                    var $6969 = self.expr;
                                    var $6970 = self.body;
                                    var $6971 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6971;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6972 = self.done;
                                    var $6973 = self.term;
                                    var $6974 = self.type;
                                    var $6975 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6975;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6976 = self.name;
                                    var $6977 = self.dref;
                                    var $6978 = self.verb;
                                    var $6979 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6979;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6980 = self.path;
                                    var $6981 = Fm$Term$equal$hole$($6980, _a$1);
                                    var $6945 = $6981;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6982 = self.natx;
                                    var $6983 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6983;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6984 = self.chrx;
                                    var $6985 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6985;
                                    break;
                                case 'Fm.Term.str':
                                    var $6986 = self.strx;
                                    var $6987 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6987;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6988 = self.path;
                                    var $6989 = self.expr;
                                    var $6990 = self.name;
                                    var $6991 = self.with;
                                    var $6992 = self.cses;
                                    var $6993 = self.moti;
                                    var $6994 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6994;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6995 = self.orig;
                                    var $6996 = self.expr;
                                    var $6997 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6945 = $6997;
                                    break;
                            };
                            var $6888 = $6945;
                            break;
                        case 'Fm.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6999 = self.name;
                                    var $7000 = self.indx;
                                    var $7001 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7001;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7002 = self.name;
                                    var $7003 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7003;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7004 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7004;
                                    break;
                                case 'Fm.Term.all':
                                    var $7005 = self.eras;
                                    var $7006 = self.self;
                                    var $7007 = self.name;
                                    var $7008 = self.xtyp;
                                    var $7009 = self.body;
                                    var $7010 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7010;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7011 = self.name;
                                    var $7012 = self.body;
                                    var $7013 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7013;
                                    break;
                                case 'Fm.Term.app':
                                    var $7014 = self.func;
                                    var $7015 = self.argm;
                                    var $7016 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7016;
                                    break;
                                case 'Fm.Term.let':
                                    var $7017 = self.name;
                                    var $7018 = self.expr;
                                    var $7019 = self.body;
                                    var $7020 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7020;
                                    break;
                                case 'Fm.Term.def':
                                    var $7021 = self.name;
                                    var $7022 = self.expr;
                                    var $7023 = self.body;
                                    var $7024 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7024;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7025 = self.done;
                                    var $7026 = self.term;
                                    var $7027 = self.type;
                                    var $7028 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7028;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7029 = self.name;
                                    var $7030 = self.dref;
                                    var $7031 = self.verb;
                                    var $7032 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7032;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7033 = self.path;
                                    var $7034 = Fm$Term$equal$hole$($7033, _a$1);
                                    var $6998 = $7034;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7035 = self.natx;
                                    var $7036 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7036;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7037 = self.chrx;
                                    var $7038 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7038;
                                    break;
                                case 'Fm.Term.str':
                                    var $7039 = self.strx;
                                    var $7040 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7040;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7041 = self.path;
                                    var $7042 = self.expr;
                                    var $7043 = self.name;
                                    var $7044 = self.with;
                                    var $7045 = self.cses;
                                    var $7046 = self.moti;
                                    var $7047 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7047;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7048 = self.orig;
                                    var $7049 = self.expr;
                                    var $7050 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7050;
                                    break;
                            };
                            var $6888 = $6998;
                            break;
                        case 'Fm.Term.all':
                            var $7051 = self.eras;
                            var $7052 = self.self;
                            var $7053 = self.name;
                            var $7054 = self.xtyp;
                            var $7055 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7057 = self.name;
                                    var $7058 = self.indx;
                                    var $7059 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7059;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7060 = self.name;
                                    var $7061 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7061;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7062 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7062;
                                    break;
                                case 'Fm.Term.all':
                                    var $7063 = self.eras;
                                    var $7064 = self.self;
                                    var $7065 = self.name;
                                    var $7066 = self.xtyp;
                                    var $7067 = self.body;
                                    var _seen$23 = (((k, s) => ((s[k] = true), s))(_id$12, _seen$5));
                                    var _a1_body$24 = $7055(Fm$Term$var$($7052, _lv$4))(Fm$Term$var$($7053, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $7067(Fm$Term$var$($7064, _lv$4))(Fm$Term$var$($7065, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($7052 === $7064);
                                    var _eq_eras$27 = Bool$eql$($7051, $7063);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Fm$Term$equal$($7054, $7066, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $7070 = self.value;
                                                var $7071 = self.errors;
                                                var self = $7070;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7073 = Fm$Check$result$(Maybe$none, $7071);
                                                        var $7072 = $7073;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $7074 = self.value;
                                                        var self = Fm$Term$equal$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7076 = self.value;
                                                                var $7077 = self.errors;
                                                                var self = $7076;
                                                                switch (self._) {
                                                                    case 'Maybe.none':
                                                                        var $7079 = Fm$Check$result$(Maybe$none, $7077);
                                                                        var $7078 = $7079;
                                                                        break;
                                                                    case 'Maybe.some':
                                                                        var $7080 = self.value;
                                                                        var self = Fm$Check$result$(Maybe$some$(($7074 && $7080)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Fm.Check.result':
                                                                                var $7082 = self.value;
                                                                                var $7083 = self.errors;
                                                                                var $7084 = Fm$Check$result$($7082, List$concat$($7077, $7083));
                                                                                var $7081 = $7084;
                                                                                break;
                                                                        };
                                                                        var $7078 = $7081;
                                                                        break;
                                                                };
                                                                var self = $7078;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7085 = self.value;
                                                                var $7086 = self.errors;
                                                                var $7087 = Fm$Check$result$($7085, List$concat$($7071, $7086));
                                                                var $7075 = $7087;
                                                                break;
                                                        };
                                                        var $7072 = $7075;
                                                        break;
                                                };
                                                var $7069 = $7072;
                                                break;
                                        };
                                        var $7068 = $7069;
                                    } else {
                                        var $7088 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7068 = $7088;
                                    };
                                    var $7056 = $7068;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7089 = self.name;
                                    var $7090 = self.body;
                                    var $7091 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7091;
                                    break;
                                case 'Fm.Term.app':
                                    var $7092 = self.func;
                                    var $7093 = self.argm;
                                    var $7094 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7094;
                                    break;
                                case 'Fm.Term.let':
                                    var $7095 = self.name;
                                    var $7096 = self.expr;
                                    var $7097 = self.body;
                                    var $7098 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7098;
                                    break;
                                case 'Fm.Term.def':
                                    var $7099 = self.name;
                                    var $7100 = self.expr;
                                    var $7101 = self.body;
                                    var $7102 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7102;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7103 = self.done;
                                    var $7104 = self.term;
                                    var $7105 = self.type;
                                    var $7106 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7106;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7107 = self.name;
                                    var $7108 = self.dref;
                                    var $7109 = self.verb;
                                    var $7110 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7110;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7111 = self.path;
                                    var $7112 = Fm$Term$equal$hole$($7111, _a$1);
                                    var $7056 = $7112;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7113 = self.natx;
                                    var $7114 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7114;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7115 = self.chrx;
                                    var $7116 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7116;
                                    break;
                                case 'Fm.Term.str':
                                    var $7117 = self.strx;
                                    var $7118 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7118;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7119 = self.path;
                                    var $7120 = self.expr;
                                    var $7121 = self.name;
                                    var $7122 = self.with;
                                    var $7123 = self.cses;
                                    var $7124 = self.moti;
                                    var $7125 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7125;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7126 = self.orig;
                                    var $7127 = self.expr;
                                    var $7128 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7128;
                                    break;
                            };
                            var $6888 = $7056;
                            break;
                        case 'Fm.Term.lam':
                            var $7129 = self.name;
                            var $7130 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7132 = self.name;
                                    var $7133 = self.indx;
                                    var $7134 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7134;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7135 = self.name;
                                    var $7136 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7136;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7137 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7137;
                                    break;
                                case 'Fm.Term.all':
                                    var $7138 = self.eras;
                                    var $7139 = self.self;
                                    var $7140 = self.name;
                                    var $7141 = self.xtyp;
                                    var $7142 = self.body;
                                    var $7143 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7143;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7144 = self.name;
                                    var $7145 = self.body;
                                    var _seen$17 = (((k, s) => ((s[k] = true), s))(_id$12, _seen$5));
                                    var _a1_body$18 = $7130(Fm$Term$var$($7129, _lv$4));
                                    var _b1_body$19 = $7145(Fm$Term$var$($7144, _lv$4));
                                    var self = Fm$Term$equal$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7147 = self.value;
                                            var $7148 = self.errors;
                                            var self = $7147;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7150 = Fm$Check$result$(Maybe$none, $7148);
                                                    var $7149 = $7150;
                                                    break;
                                                case 'Maybe.some':
                                                    var $7151 = self.value;
                                                    var self = Fm$Check$result$(Maybe$some$($7151), List$nil);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7153 = self.value;
                                                            var $7154 = self.errors;
                                                            var $7155 = Fm$Check$result$($7153, List$concat$($7148, $7154));
                                                            var $7152 = $7155;
                                                            break;
                                                    };
                                                    var $7149 = $7152;
                                                    break;
                                            };
                                            var $7146 = $7149;
                                            break;
                                    };
                                    var $7131 = $7146;
                                    break;
                                case 'Fm.Term.app':
                                    var $7156 = self.func;
                                    var $7157 = self.argm;
                                    var $7158 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7158;
                                    break;
                                case 'Fm.Term.let':
                                    var $7159 = self.name;
                                    var $7160 = self.expr;
                                    var $7161 = self.body;
                                    var $7162 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7162;
                                    break;
                                case 'Fm.Term.def':
                                    var $7163 = self.name;
                                    var $7164 = self.expr;
                                    var $7165 = self.body;
                                    var $7166 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7166;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7167 = self.done;
                                    var $7168 = self.term;
                                    var $7169 = self.type;
                                    var $7170 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7170;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7171 = self.name;
                                    var $7172 = self.dref;
                                    var $7173 = self.verb;
                                    var $7174 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7174;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7175 = self.path;
                                    var $7176 = Fm$Term$equal$hole$($7175, _a$1);
                                    var $7131 = $7176;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7177 = self.natx;
                                    var $7178 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7178;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7179 = self.chrx;
                                    var $7180 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7180;
                                    break;
                                case 'Fm.Term.str':
                                    var $7181 = self.strx;
                                    var $7182 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7182;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7183 = self.path;
                                    var $7184 = self.expr;
                                    var $7185 = self.name;
                                    var $7186 = self.with;
                                    var $7187 = self.cses;
                                    var $7188 = self.moti;
                                    var $7189 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7189;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7190 = self.orig;
                                    var $7191 = self.expr;
                                    var $7192 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7131 = $7192;
                                    break;
                            };
                            var $6888 = $7131;
                            break;
                        case 'Fm.Term.app':
                            var $7193 = self.func;
                            var $7194 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7196 = self.name;
                                    var $7197 = self.indx;
                                    var $7198 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7198;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7199 = self.name;
                                    var $7200 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7200;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7201 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7201;
                                    break;
                                case 'Fm.Term.all':
                                    var $7202 = self.eras;
                                    var $7203 = self.self;
                                    var $7204 = self.name;
                                    var $7205 = self.xtyp;
                                    var $7206 = self.body;
                                    var $7207 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7207;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7208 = self.name;
                                    var $7209 = self.body;
                                    var $7210 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7210;
                                    break;
                                case 'Fm.Term.app':
                                    var $7211 = self.func;
                                    var $7212 = self.argm;
                                    var _seen$17 = (((k, s) => ((s[k] = true), s))(_id$12, _seen$5));
                                    var self = Fm$Term$equal$($7193, $7211, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7214 = self.value;
                                            var $7215 = self.errors;
                                            var self = $7214;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7217 = Fm$Check$result$(Maybe$none, $7215);
                                                    var $7216 = $7217;
                                                    break;
                                                case 'Maybe.some':
                                                    var $7218 = self.value;
                                                    var self = Fm$Term$equal$($7194, $7212, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7220 = self.value;
                                                            var $7221 = self.errors;
                                                            var self = $7220;
                                                            switch (self._) {
                                                                case 'Maybe.none':
                                                                    var $7223 = Fm$Check$result$(Maybe$none, $7221);
                                                                    var $7222 = $7223;
                                                                    break;
                                                                case 'Maybe.some':
                                                                    var $7224 = self.value;
                                                                    var self = Fm$Check$result$(Maybe$some$(($7218 && $7224)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Fm.Check.result':
                                                                            var $7226 = self.value;
                                                                            var $7227 = self.errors;
                                                                            var $7228 = Fm$Check$result$($7226, List$concat$($7221, $7227));
                                                                            var $7225 = $7228;
                                                                            break;
                                                                    };
                                                                    var $7222 = $7225;
                                                                    break;
                                                            };
                                                            var self = $7222;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7229 = self.value;
                                                            var $7230 = self.errors;
                                                            var $7231 = Fm$Check$result$($7229, List$concat$($7215, $7230));
                                                            var $7219 = $7231;
                                                            break;
                                                    };
                                                    var $7216 = $7219;
                                                    break;
                                            };
                                            var $7213 = $7216;
                                            break;
                                    };
                                    var $7195 = $7213;
                                    break;
                                case 'Fm.Term.let':
                                    var $7232 = self.name;
                                    var $7233 = self.expr;
                                    var $7234 = self.body;
                                    var $7235 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7235;
                                    break;
                                case 'Fm.Term.def':
                                    var $7236 = self.name;
                                    var $7237 = self.expr;
                                    var $7238 = self.body;
                                    var $7239 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7239;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7240 = self.done;
                                    var $7241 = self.term;
                                    var $7242 = self.type;
                                    var $7243 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7243;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7244 = self.name;
                                    var $7245 = self.dref;
                                    var $7246 = self.verb;
                                    var $7247 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7247;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7248 = self.path;
                                    var $7249 = Fm$Term$equal$hole$($7248, _a$1);
                                    var $7195 = $7249;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7250 = self.natx;
                                    var $7251 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7251;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7252 = self.chrx;
                                    var $7253 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7253;
                                    break;
                                case 'Fm.Term.str':
                                    var $7254 = self.strx;
                                    var $7255 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7255;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7256 = self.path;
                                    var $7257 = self.expr;
                                    var $7258 = self.name;
                                    var $7259 = self.with;
                                    var $7260 = self.cses;
                                    var $7261 = self.moti;
                                    var $7262 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7262;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7263 = self.orig;
                                    var $7264 = self.expr;
                                    var $7265 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7195 = $7265;
                                    break;
                            };
                            var $6888 = $7195;
                            break;
                        case 'Fm.Term.let':
                            var $7266 = self.name;
                            var $7267 = self.expr;
                            var $7268 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7270 = self.name;
                                    var $7271 = self.indx;
                                    var $7272 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7272;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7273 = self.name;
                                    var $7274 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7274;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7275 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7275;
                                    break;
                                case 'Fm.Term.all':
                                    var $7276 = self.eras;
                                    var $7277 = self.self;
                                    var $7278 = self.name;
                                    var $7279 = self.xtyp;
                                    var $7280 = self.body;
                                    var $7281 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7281;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7282 = self.name;
                                    var $7283 = self.body;
                                    var $7284 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7284;
                                    break;
                                case 'Fm.Term.app':
                                    var $7285 = self.func;
                                    var $7286 = self.argm;
                                    var $7287 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7287;
                                    break;
                                case 'Fm.Term.let':
                                    var $7288 = self.name;
                                    var $7289 = self.expr;
                                    var $7290 = self.body;
                                    var _seen$19 = (((k, s) => ((s[k] = true), s))(_id$12, _seen$5));
                                    var _a1_body$20 = $7268(Fm$Term$var$($7266, _lv$4));
                                    var _b1_body$21 = $7290(Fm$Term$var$($7288, _lv$4));
                                    var self = Fm$Term$equal$($7267, $7289, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7292 = self.value;
                                            var $7293 = self.errors;
                                            var self = $7292;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7295 = Fm$Check$result$(Maybe$none, $7293);
                                                    var $7294 = $7295;
                                                    break;
                                                case 'Maybe.some':
                                                    var $7296 = self.value;
                                                    var self = Fm$Term$equal$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7298 = self.value;
                                                            var $7299 = self.errors;
                                                            var self = $7298;
                                                            switch (self._) {
                                                                case 'Maybe.none':
                                                                    var $7301 = Fm$Check$result$(Maybe$none, $7299);
                                                                    var $7300 = $7301;
                                                                    break;
                                                                case 'Maybe.some':
                                                                    var $7302 = self.value;
                                                                    var self = Fm$Check$result$(Maybe$some$(($7296 && $7302)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Fm.Check.result':
                                                                            var $7304 = self.value;
                                                                            var $7305 = self.errors;
                                                                            var $7306 = Fm$Check$result$($7304, List$concat$($7299, $7305));
                                                                            var $7303 = $7306;
                                                                            break;
                                                                    };
                                                                    var $7300 = $7303;
                                                                    break;
                                                            };
                                                            var self = $7300;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7307 = self.value;
                                                            var $7308 = self.errors;
                                                            var $7309 = Fm$Check$result$($7307, List$concat$($7293, $7308));
                                                            var $7297 = $7309;
                                                            break;
                                                    };
                                                    var $7294 = $7297;
                                                    break;
                                            };
                                            var $7291 = $7294;
                                            break;
                                    };
                                    var $7269 = $7291;
                                    break;
                                case 'Fm.Term.def':
                                    var $7310 = self.name;
                                    var $7311 = self.expr;
                                    var $7312 = self.body;
                                    var $7313 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7313;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7314 = self.done;
                                    var $7315 = self.term;
                                    var $7316 = self.type;
                                    var $7317 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7317;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7318 = self.name;
                                    var $7319 = self.dref;
                                    var $7320 = self.verb;
                                    var $7321 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7321;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7322 = self.path;
                                    var $7323 = Fm$Term$equal$hole$($7322, _a$1);
                                    var $7269 = $7323;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7324 = self.natx;
                                    var $7325 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7325;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7326 = self.chrx;
                                    var $7327 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7327;
                                    break;
                                case 'Fm.Term.str':
                                    var $7328 = self.strx;
                                    var $7329 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7329;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7330 = self.path;
                                    var $7331 = self.expr;
                                    var $7332 = self.name;
                                    var $7333 = self.with;
                                    var $7334 = self.cses;
                                    var $7335 = self.moti;
                                    var $7336 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7336;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7337 = self.orig;
                                    var $7338 = self.expr;
                                    var $7339 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7269 = $7339;
                                    break;
                            };
                            var $6888 = $7269;
                            break;
                        case 'Fm.Term.def':
                            var $7340 = self.name;
                            var $7341 = self.expr;
                            var $7342 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7344 = self.name;
                                    var $7345 = self.indx;
                                    var $7346 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7346;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7347 = self.name;
                                    var $7348 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7348;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7349 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7349;
                                    break;
                                case 'Fm.Term.all':
                                    var $7350 = self.eras;
                                    var $7351 = self.self;
                                    var $7352 = self.name;
                                    var $7353 = self.xtyp;
                                    var $7354 = self.body;
                                    var $7355 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7355;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7356 = self.name;
                                    var $7357 = self.body;
                                    var $7358 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7358;
                                    break;
                                case 'Fm.Term.app':
                                    var $7359 = self.func;
                                    var $7360 = self.argm;
                                    var $7361 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7361;
                                    break;
                                case 'Fm.Term.let':
                                    var $7362 = self.name;
                                    var $7363 = self.expr;
                                    var $7364 = self.body;
                                    var $7365 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7365;
                                    break;
                                case 'Fm.Term.def':
                                    var $7366 = self.name;
                                    var $7367 = self.expr;
                                    var $7368 = self.body;
                                    var $7369 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7369;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7370 = self.done;
                                    var $7371 = self.term;
                                    var $7372 = self.type;
                                    var $7373 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7373;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7374 = self.name;
                                    var $7375 = self.dref;
                                    var $7376 = self.verb;
                                    var $7377 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7377;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7378 = self.path;
                                    var $7379 = Fm$Term$equal$hole$($7378, _a$1);
                                    var $7343 = $7379;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7380 = self.natx;
                                    var $7381 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7381;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7382 = self.chrx;
                                    var $7383 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7383;
                                    break;
                                case 'Fm.Term.str':
                                    var $7384 = self.strx;
                                    var $7385 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7385;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7386 = self.path;
                                    var $7387 = self.expr;
                                    var $7388 = self.name;
                                    var $7389 = self.with;
                                    var $7390 = self.cses;
                                    var $7391 = self.moti;
                                    var $7392 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7392;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7393 = self.orig;
                                    var $7394 = self.expr;
                                    var $7395 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7343 = $7395;
                                    break;
                            };
                            var $6888 = $7343;
                            break;
                        case 'Fm.Term.ann':
                            var $7396 = self.done;
                            var $7397 = self.term;
                            var $7398 = self.type;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7400 = self.name;
                                    var $7401 = self.indx;
                                    var $7402 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7402;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7403 = self.name;
                                    var $7404 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7404;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7405 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7405;
                                    break;
                                case 'Fm.Term.all':
                                    var $7406 = self.eras;
                                    var $7407 = self.self;
                                    var $7408 = self.name;
                                    var $7409 = self.xtyp;
                                    var $7410 = self.body;
                                    var $7411 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7411;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7412 = self.name;
                                    var $7413 = self.body;
                                    var $7414 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7414;
                                    break;
                                case 'Fm.Term.app':
                                    var $7415 = self.func;
                                    var $7416 = self.argm;
                                    var $7417 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7417;
                                    break;
                                case 'Fm.Term.let':
                                    var $7418 = self.name;
                                    var $7419 = self.expr;
                                    var $7420 = self.body;
                                    var $7421 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7421;
                                    break;
                                case 'Fm.Term.def':
                                    var $7422 = self.name;
                                    var $7423 = self.expr;
                                    var $7424 = self.body;
                                    var $7425 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7425;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7426 = self.done;
                                    var $7427 = self.term;
                                    var $7428 = self.type;
                                    var $7429 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7429;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7430 = self.name;
                                    var $7431 = self.dref;
                                    var $7432 = self.verb;
                                    var $7433 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7433;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7434 = self.path;
                                    var $7435 = Fm$Term$equal$hole$($7434, _a$1);
                                    var $7399 = $7435;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7436 = self.natx;
                                    var $7437 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7437;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7438 = self.chrx;
                                    var $7439 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7439;
                                    break;
                                case 'Fm.Term.str':
                                    var $7440 = self.strx;
                                    var $7441 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7441;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7442 = self.path;
                                    var $7443 = self.expr;
                                    var $7444 = self.name;
                                    var $7445 = self.with;
                                    var $7446 = self.cses;
                                    var $7447 = self.moti;
                                    var $7448 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7448;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7449 = self.orig;
                                    var $7450 = self.expr;
                                    var $7451 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7399 = $7451;
                                    break;
                            };
                            var $6888 = $7399;
                            break;
                        case 'Fm.Term.gol':
                            var $7452 = self.name;
                            var $7453 = self.dref;
                            var $7454 = self.verb;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7456 = self.name;
                                    var $7457 = self.indx;
                                    var $7458 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7458;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7459 = self.name;
                                    var $7460 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7460;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7461 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7461;
                                    break;
                                case 'Fm.Term.all':
                                    var $7462 = self.eras;
                                    var $7463 = self.self;
                                    var $7464 = self.name;
                                    var $7465 = self.xtyp;
                                    var $7466 = self.body;
                                    var $7467 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7467;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7468 = self.name;
                                    var $7469 = self.body;
                                    var $7470 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7470;
                                    break;
                                case 'Fm.Term.app':
                                    var $7471 = self.func;
                                    var $7472 = self.argm;
                                    var $7473 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7473;
                                    break;
                                case 'Fm.Term.let':
                                    var $7474 = self.name;
                                    var $7475 = self.expr;
                                    var $7476 = self.body;
                                    var $7477 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7477;
                                    break;
                                case 'Fm.Term.def':
                                    var $7478 = self.name;
                                    var $7479 = self.expr;
                                    var $7480 = self.body;
                                    var $7481 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7481;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7482 = self.done;
                                    var $7483 = self.term;
                                    var $7484 = self.type;
                                    var $7485 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7485;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7486 = self.name;
                                    var $7487 = self.dref;
                                    var $7488 = self.verb;
                                    var $7489 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7489;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7490 = self.path;
                                    var $7491 = Fm$Term$equal$hole$($7490, _a$1);
                                    var $7455 = $7491;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7492 = self.natx;
                                    var $7493 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7493;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7494 = self.chrx;
                                    var $7495 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7495;
                                    break;
                                case 'Fm.Term.str':
                                    var $7496 = self.strx;
                                    var $7497 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7497;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7498 = self.path;
                                    var $7499 = self.expr;
                                    var $7500 = self.name;
                                    var $7501 = self.with;
                                    var $7502 = self.cses;
                                    var $7503 = self.moti;
                                    var $7504 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7504;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7505 = self.orig;
                                    var $7506 = self.expr;
                                    var $7507 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7455 = $7507;
                                    break;
                            };
                            var $6888 = $7455;
                            break;
                        case 'Fm.Term.hol':
                            var $7508 = self.path;
                            var $7509 = Fm$Term$equal$hole$($7508, _b$2);
                            var $6888 = $7509;
                            break;
                        case 'Fm.Term.nat':
                            var $7510 = self.natx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7512 = self.name;
                                    var $7513 = self.indx;
                                    var $7514 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7514;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7515 = self.name;
                                    var $7516 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7516;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7517 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7517;
                                    break;
                                case 'Fm.Term.all':
                                    var $7518 = self.eras;
                                    var $7519 = self.self;
                                    var $7520 = self.name;
                                    var $7521 = self.xtyp;
                                    var $7522 = self.body;
                                    var $7523 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7523;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7524 = self.name;
                                    var $7525 = self.body;
                                    var $7526 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7526;
                                    break;
                                case 'Fm.Term.app':
                                    var $7527 = self.func;
                                    var $7528 = self.argm;
                                    var $7529 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7529;
                                    break;
                                case 'Fm.Term.let':
                                    var $7530 = self.name;
                                    var $7531 = self.expr;
                                    var $7532 = self.body;
                                    var $7533 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7533;
                                    break;
                                case 'Fm.Term.def':
                                    var $7534 = self.name;
                                    var $7535 = self.expr;
                                    var $7536 = self.body;
                                    var $7537 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7537;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7538 = self.done;
                                    var $7539 = self.term;
                                    var $7540 = self.type;
                                    var $7541 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7541;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7542 = self.name;
                                    var $7543 = self.dref;
                                    var $7544 = self.verb;
                                    var $7545 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7545;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7546 = self.path;
                                    var $7547 = Fm$Term$equal$hole$($7546, _a$1);
                                    var $7511 = $7547;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7548 = self.natx;
                                    var $7549 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7549;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7550 = self.chrx;
                                    var $7551 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7551;
                                    break;
                                case 'Fm.Term.str':
                                    var $7552 = self.strx;
                                    var $7553 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7553;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7554 = self.path;
                                    var $7555 = self.expr;
                                    var $7556 = self.name;
                                    var $7557 = self.with;
                                    var $7558 = self.cses;
                                    var $7559 = self.moti;
                                    var $7560 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7560;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7561 = self.orig;
                                    var $7562 = self.expr;
                                    var $7563 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7511 = $7563;
                                    break;
                            };
                            var $6888 = $7511;
                            break;
                        case 'Fm.Term.chr':
                            var $7564 = self.chrx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7566 = self.name;
                                    var $7567 = self.indx;
                                    var $7568 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7568;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7569 = self.name;
                                    var $7570 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7570;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7571 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7571;
                                    break;
                                case 'Fm.Term.all':
                                    var $7572 = self.eras;
                                    var $7573 = self.self;
                                    var $7574 = self.name;
                                    var $7575 = self.xtyp;
                                    var $7576 = self.body;
                                    var $7577 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7577;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7578 = self.name;
                                    var $7579 = self.body;
                                    var $7580 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7580;
                                    break;
                                case 'Fm.Term.app':
                                    var $7581 = self.func;
                                    var $7582 = self.argm;
                                    var $7583 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7583;
                                    break;
                                case 'Fm.Term.let':
                                    var $7584 = self.name;
                                    var $7585 = self.expr;
                                    var $7586 = self.body;
                                    var $7587 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7587;
                                    break;
                                case 'Fm.Term.def':
                                    var $7588 = self.name;
                                    var $7589 = self.expr;
                                    var $7590 = self.body;
                                    var $7591 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7591;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7592 = self.done;
                                    var $7593 = self.term;
                                    var $7594 = self.type;
                                    var $7595 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7595;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7596 = self.name;
                                    var $7597 = self.dref;
                                    var $7598 = self.verb;
                                    var $7599 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7599;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7600 = self.path;
                                    var $7601 = Fm$Term$equal$hole$($7600, _a$1);
                                    var $7565 = $7601;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7602 = self.natx;
                                    var $7603 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7603;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7604 = self.chrx;
                                    var $7605 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7605;
                                    break;
                                case 'Fm.Term.str':
                                    var $7606 = self.strx;
                                    var $7607 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7607;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7608 = self.path;
                                    var $7609 = self.expr;
                                    var $7610 = self.name;
                                    var $7611 = self.with;
                                    var $7612 = self.cses;
                                    var $7613 = self.moti;
                                    var $7614 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7614;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7615 = self.orig;
                                    var $7616 = self.expr;
                                    var $7617 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7565 = $7617;
                                    break;
                            };
                            var $6888 = $7565;
                            break;
                        case 'Fm.Term.str':
                            var $7618 = self.strx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7620 = self.name;
                                    var $7621 = self.indx;
                                    var $7622 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7622;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7623 = self.name;
                                    var $7624 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7624;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7625 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7625;
                                    break;
                                case 'Fm.Term.all':
                                    var $7626 = self.eras;
                                    var $7627 = self.self;
                                    var $7628 = self.name;
                                    var $7629 = self.xtyp;
                                    var $7630 = self.body;
                                    var $7631 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7631;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7632 = self.name;
                                    var $7633 = self.body;
                                    var $7634 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7634;
                                    break;
                                case 'Fm.Term.app':
                                    var $7635 = self.func;
                                    var $7636 = self.argm;
                                    var $7637 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7637;
                                    break;
                                case 'Fm.Term.let':
                                    var $7638 = self.name;
                                    var $7639 = self.expr;
                                    var $7640 = self.body;
                                    var $7641 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7641;
                                    break;
                                case 'Fm.Term.def':
                                    var $7642 = self.name;
                                    var $7643 = self.expr;
                                    var $7644 = self.body;
                                    var $7645 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7645;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7646 = self.done;
                                    var $7647 = self.term;
                                    var $7648 = self.type;
                                    var $7649 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7649;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7650 = self.name;
                                    var $7651 = self.dref;
                                    var $7652 = self.verb;
                                    var $7653 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7653;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7654 = self.path;
                                    var $7655 = Fm$Term$equal$hole$($7654, _a$1);
                                    var $7619 = $7655;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7656 = self.natx;
                                    var $7657 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7657;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7658 = self.chrx;
                                    var $7659 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7659;
                                    break;
                                case 'Fm.Term.str':
                                    var $7660 = self.strx;
                                    var $7661 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7661;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7662 = self.path;
                                    var $7663 = self.expr;
                                    var $7664 = self.name;
                                    var $7665 = self.with;
                                    var $7666 = self.cses;
                                    var $7667 = self.moti;
                                    var $7668 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7668;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7669 = self.orig;
                                    var $7670 = self.expr;
                                    var $7671 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7619 = $7671;
                                    break;
                            };
                            var $6888 = $7619;
                            break;
                        case 'Fm.Term.cse':
                            var $7672 = self.path;
                            var $7673 = self.expr;
                            var $7674 = self.name;
                            var $7675 = self.with;
                            var $7676 = self.cses;
                            var $7677 = self.moti;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7679 = self.name;
                                    var $7680 = self.indx;
                                    var $7681 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7681;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7682 = self.name;
                                    var $7683 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7683;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7684 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7684;
                                    break;
                                case 'Fm.Term.all':
                                    var $7685 = self.eras;
                                    var $7686 = self.self;
                                    var $7687 = self.name;
                                    var $7688 = self.xtyp;
                                    var $7689 = self.body;
                                    var $7690 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7690;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7691 = self.name;
                                    var $7692 = self.body;
                                    var $7693 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7693;
                                    break;
                                case 'Fm.Term.app':
                                    var $7694 = self.func;
                                    var $7695 = self.argm;
                                    var $7696 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7696;
                                    break;
                                case 'Fm.Term.let':
                                    var $7697 = self.name;
                                    var $7698 = self.expr;
                                    var $7699 = self.body;
                                    var $7700 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7700;
                                    break;
                                case 'Fm.Term.def':
                                    var $7701 = self.name;
                                    var $7702 = self.expr;
                                    var $7703 = self.body;
                                    var $7704 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7704;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7705 = self.done;
                                    var $7706 = self.term;
                                    var $7707 = self.type;
                                    var $7708 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7708;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7709 = self.name;
                                    var $7710 = self.dref;
                                    var $7711 = self.verb;
                                    var $7712 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7712;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7713 = self.path;
                                    var $7714 = Fm$Term$equal$hole$($7713, _a$1);
                                    var $7678 = $7714;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7715 = self.natx;
                                    var $7716 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7716;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7717 = self.chrx;
                                    var $7718 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7718;
                                    break;
                                case 'Fm.Term.str':
                                    var $7719 = self.strx;
                                    var $7720 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7720;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7721 = self.path;
                                    var $7722 = self.expr;
                                    var $7723 = self.name;
                                    var $7724 = self.with;
                                    var $7725 = self.cses;
                                    var $7726 = self.moti;
                                    var $7727 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7727;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7728 = self.orig;
                                    var $7729 = self.expr;
                                    var $7730 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7678 = $7730;
                                    break;
                            };
                            var $6888 = $7678;
                            break;
                        case 'Fm.Term.ori':
                            var $7731 = self.orig;
                            var $7732 = self.expr;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7734 = self.name;
                                    var $7735 = self.indx;
                                    var $7736 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7736;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7737 = self.name;
                                    var $7738 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7738;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7739 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7739;
                                    break;
                                case 'Fm.Term.all':
                                    var $7740 = self.eras;
                                    var $7741 = self.self;
                                    var $7742 = self.name;
                                    var $7743 = self.xtyp;
                                    var $7744 = self.body;
                                    var $7745 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7745;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7746 = self.name;
                                    var $7747 = self.body;
                                    var $7748 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7748;
                                    break;
                                case 'Fm.Term.app':
                                    var $7749 = self.func;
                                    var $7750 = self.argm;
                                    var $7751 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7751;
                                    break;
                                case 'Fm.Term.let':
                                    var $7752 = self.name;
                                    var $7753 = self.expr;
                                    var $7754 = self.body;
                                    var $7755 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7755;
                                    break;
                                case 'Fm.Term.def':
                                    var $7756 = self.name;
                                    var $7757 = self.expr;
                                    var $7758 = self.body;
                                    var $7759 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7759;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7760 = self.done;
                                    var $7761 = self.term;
                                    var $7762 = self.type;
                                    var $7763 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7763;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7764 = self.name;
                                    var $7765 = self.dref;
                                    var $7766 = self.verb;
                                    var $7767 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7767;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7768 = self.path;
                                    var $7769 = Fm$Term$equal$hole$($7768, _a$1);
                                    var $7733 = $7769;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7770 = self.natx;
                                    var $7771 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7771;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7772 = self.chrx;
                                    var $7773 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7773;
                                    break;
                                case 'Fm.Term.str':
                                    var $7774 = self.strx;
                                    var $7775 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7775;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7776 = self.path;
                                    var $7777 = self.expr;
                                    var $7778 = self.name;
                                    var $7779 = self.with;
                                    var $7780 = self.cses;
                                    var $7781 = self.moti;
                                    var $7782 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7782;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7783 = self.orig;
                                    var $7784 = self.expr;
                                    var $7785 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7733 = $7785;
                                    break;
                            };
                            var $6888 = $7733;
                            break;
                    };
                    var $6877 = $6888;
                };
                var $6875 = $6877;
            };
            var $6873 = $6875;
        };
        return $6873;
    };
    const Fm$Term$equal = x0 => x1 => x2 => x3 => x4 => Fm$Term$equal$(x0, x1, x2, x3, x4);
    const Set$new = Map$new;
    const Set$mut$new = a0 => (({}));

    function Fm$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $7787 = self.name;
                var $7788 = self.indx;
                var self = List$at_last$($7788, _ctx$4);
                switch (self._) {
                    case 'Maybe.none':
                        var $7790 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$undefined_reference$(_orig$6, $7787), List$nil));
                        var $7789 = $7790;
                        break;
                    case 'Maybe.some':
                        var $7791 = self.value;
                        var $7792 = Fm$Check$result$(Maybe$some$((() => {
                            var self = $7791;
                            switch (self._) {
                                case 'Pair.new':
                                    var $7793 = self.fst;
                                    var $7794 = self.snd;
                                    var $7795 = $7794;
                                    return $7795;
                            };
                        })()), List$nil);
                        var $7789 = $7792;
                        break;
                };
                var self = $7789;
                break;
            case 'Fm.Term.ref':
                var $7796 = self.name;
                var self = Fm$get$($7796, _defs$3);
                switch (self._) {
                    case 'Maybe.none':
                        var $7798 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$undefined_reference$(_orig$6, $7796), List$nil));
                        var $7797 = $7798;
                        break;
                    case 'Maybe.some':
                        var $7799 = self.value;
                        var self = $7799;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $7801 = self.file;
                                var $7802 = self.code;
                                var $7803 = self.orig;
                                var $7804 = self.name;
                                var $7805 = self.term;
                                var $7806 = self.type;
                                var $7807 = self.isct;
                                var $7808 = self.arit;
                                var $7809 = self.stat;
                                var _ref_name$18 = $7804;
                                var _ref_type$19 = $7806;
                                var _ref_term$20 = $7805;
                                var _ref_stat$21 = $7809;
                                var self = _ref_stat$21;
                                switch (self._) {
                                    case 'Fm.Status.init':
                                        var $7811 = Fm$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Fm$Error$waiting$(_ref_name$18), List$nil));
                                        var $7810 = $7811;
                                        break;
                                    case 'Fm.Status.wait':
                                        var $7812 = Fm$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $7810 = $7812;
                                        break;
                                    case 'Fm.Status.done':
                                        var $7813 = Fm$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $7810 = $7813;
                                        break;
                                    case 'Fm.Status.fail':
                                        var $7814 = self.errors;
                                        var $7815 = Fm$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Fm$Error$indirect$(_ref_name$18), List$nil));
                                        var $7810 = $7815;
                                        break;
                                };
                                var $7800 = $7810;
                                break;
                        };
                        var $7797 = $7800;
                        break;
                };
                var self = $7797;
                break;
            case 'Fm.Term.typ':
                var $7816 = Fm$Check$result$(Maybe$some$(Fm$Term$typ), List$nil);
                var self = $7816;
                break;
            case 'Fm.Term.all':
                var $7817 = self.eras;
                var $7818 = self.self;
                var $7819 = self.name;
                var $7820 = self.xtyp;
                var $7821 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Fm$Term$var$($7818, _ctx_size$12);
                var _body_var$14 = Fm$Term$var$($7819, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($7819, $7820), List$cons$(Pair$new$($7818, _term$1), _ctx$4));
                var self = Fm$Term$check$($7820, Maybe$some$(Fm$Term$typ), _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7823 = self.value;
                        var $7824 = self.errors;
                        var self = $7823;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7826 = Fm$Check$result$(Maybe$none, $7824);
                                var $7825 = $7826;
                                break;
                            case 'Maybe.some':
                                var $7827 = self.value;
                                var self = Fm$Term$check$($7821(_self_var$13)(_body_var$14), Maybe$some$(Fm$Term$typ), _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7829 = self.value;
                                        var $7830 = self.errors;
                                        var self = $7829;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7832 = Fm$Check$result$(Maybe$none, $7830);
                                                var $7831 = $7832;
                                                break;
                                            case 'Maybe.some':
                                                var $7833 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$(Fm$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7835 = self.value;
                                                        var $7836 = self.errors;
                                                        var $7837 = Fm$Check$result$($7835, List$concat$($7830, $7836));
                                                        var $7834 = $7837;
                                                        break;
                                                };
                                                var $7831 = $7834;
                                                break;
                                        };
                                        var self = $7831;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7838 = self.value;
                                        var $7839 = self.errors;
                                        var $7840 = Fm$Check$result$($7838, List$concat$($7824, $7839));
                                        var $7828 = $7840;
                                        break;
                                };
                                var $7825 = $7828;
                                break;
                        };
                        var $7822 = $7825;
                        break;
                };
                var self = $7822;
                break;
            case 'Fm.Term.lam':
                var $7841 = self.name;
                var $7842 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.none':
                        var _lam_type$9 = Fm$Term$hol$(Bits$e);
                        var _lam_term$10 = Fm$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $7844 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$patch$(Fm$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $7843 = $7844;
                        break;
                    case 'Maybe.some':
                        var $7845 = self.value;
                        var _typv$10 = Fm$Term$reduce$($7845, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Fm.Term.var':
                                var $7847 = self.name;
                                var $7848 = self.indx;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7845);
                                var $7849 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7846 = $7849;
                                break;
                            case 'Fm.Term.ref':
                                var $7850 = self.name;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7845);
                                var $7851 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7846 = $7851;
                                break;
                            case 'Fm.Term.typ':
                                var _expected$11 = Either$left$("(function type)");
                                var _detected$12 = Either$right$($7845);
                                var $7852 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $7846 = $7852;
                                break;
                            case 'Fm.Term.all':
                                var $7853 = self.eras;
                                var $7854 = self.self;
                                var $7855 = self.name;
                                var $7856 = self.xtyp;
                                var $7857 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Fm$Term$var$($7841, _ctx_size$16);
                                var _body_typ$19 = $7857(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($7841, $7856), _ctx$4);
                                var self = Fm$Term$check$($7842(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Fm$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7859 = self.value;
                                        var $7860 = self.errors;
                                        var self = $7859;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7862 = Fm$Check$result$(Maybe$none, $7860);
                                                var $7861 = $7862;
                                                break;
                                            case 'Maybe.some':
                                                var $7863 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7845), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7865 = self.value;
                                                        var $7866 = self.errors;
                                                        var $7867 = Fm$Check$result$($7865, List$concat$($7860, $7866));
                                                        var $7864 = $7867;
                                                        break;
                                                };
                                                var $7861 = $7864;
                                                break;
                                        };
                                        var $7858 = $7861;
                                        break;
                                };
                                var $7846 = $7858;
                                break;
                            case 'Fm.Term.lam':
                                var $7868 = self.name;
                                var $7869 = self.body;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7845);
                                var $7870 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7846 = $7870;
                                break;
                            case 'Fm.Term.app':
                                var $7871 = self.func;
                                var $7872 = self.argm;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7845);
                                var $7873 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7846 = $7873;
                                break;
                            case 'Fm.Term.let':
                                var $7874 = self.name;
                                var $7875 = self.expr;
                                var $7876 = self.body;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7845);
                                var $7877 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7846 = $7877;
                                break;
                            case 'Fm.Term.def':
                                var $7878 = self.name;
                                var $7879 = self.expr;
                                var $7880 = self.body;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7845);
                                var $7881 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7846 = $7881;
                                break;
                            case 'Fm.Term.ann':
                                var $7882 = self.done;
                                var $7883 = self.term;
                                var $7884 = self.type;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7845);
                                var $7885 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7846 = $7885;
                                break;
                            case 'Fm.Term.gol':
                                var $7886 = self.name;
                                var $7887 = self.dref;
                                var $7888 = self.verb;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7845);
                                var $7889 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7846 = $7889;
                                break;
                            case 'Fm.Term.hol':
                                var $7890 = self.path;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7845);
                                var $7891 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7846 = $7891;
                                break;
                            case 'Fm.Term.nat':
                                var $7892 = self.natx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7845);
                                var $7893 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7846 = $7893;
                                break;
                            case 'Fm.Term.chr':
                                var $7894 = self.chrx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7845);
                                var $7895 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7846 = $7895;
                                break;
                            case 'Fm.Term.str':
                                var $7896 = self.strx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7845);
                                var $7897 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7846 = $7897;
                                break;
                            case 'Fm.Term.cse':
                                var $7898 = self.path;
                                var $7899 = self.expr;
                                var $7900 = self.name;
                                var $7901 = self.with;
                                var $7902 = self.cses;
                                var $7903 = self.moti;
                                var _expected$17 = Either$left$("(function type)");
                                var _detected$18 = Either$right$($7845);
                                var $7904 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $7846 = $7904;
                                break;
                            case 'Fm.Term.ori':
                                var $7905 = self.orig;
                                var $7906 = self.expr;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7845);
                                var $7907 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7846 = $7907;
                                break;
                        };
                        var $7843 = $7846;
                        break;
                };
                var self = $7843;
                break;
            case 'Fm.Term.app':
                var $7908 = self.func;
                var $7909 = self.argm;
                var self = Fm$Term$check$($7908, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7911 = self.value;
                        var $7912 = self.errors;
                        var self = $7911;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7914 = Fm$Check$result$(Maybe$none, $7912);
                                var $7913 = $7914;
                                break;
                            case 'Maybe.some':
                                var $7915 = self.value;
                                var _func_typ$12 = Fm$Term$reduce$($7915, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7917 = self.name;
                                        var $7918 = self.indx;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7919 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7919;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7920 = self.name;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7921 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7921;
                                        break;
                                    case 'Fm.Term.typ':
                                        var _expected$13 = Either$left$("(function type)");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var $7922 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $7922;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7923 = self.eras;
                                        var $7924 = self.self;
                                        var $7925 = self.name;
                                        var $7926 = self.xtyp;
                                        var $7927 = self.body;
                                        var self = Fm$Term$check$($7909, Maybe$some$($7926), _defs$3, _ctx$4, Fm$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $7929 = self.value;
                                                var $7930 = self.errors;
                                                var self = $7929;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7932 = Fm$Check$result$(Maybe$none, $7930);
                                                        var $7931 = $7932;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $7933 = self.value;
                                                        var self = Fm$Check$result$(Maybe$some$($7927($7908)($7909)), List$nil);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7935 = self.value;
                                                                var $7936 = self.errors;
                                                                var $7937 = Fm$Check$result$($7935, List$concat$($7930, $7936));
                                                                var $7934 = $7937;
                                                                break;
                                                        };
                                                        var $7931 = $7934;
                                                        break;
                                                };
                                                var $7928 = $7931;
                                                break;
                                        };
                                        var self = $7928;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7938 = self.name;
                                        var $7939 = self.body;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7940 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7940;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7941 = self.func;
                                        var $7942 = self.argm;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7943 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7943;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7944 = self.name;
                                        var $7945 = self.expr;
                                        var $7946 = self.body;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7947 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7947;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7948 = self.name;
                                        var $7949 = self.expr;
                                        var $7950 = self.body;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7951 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7951;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7952 = self.done;
                                        var $7953 = self.term;
                                        var $7954 = self.type;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7955 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7955;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7956 = self.name;
                                        var $7957 = self.dref;
                                        var $7958 = self.verb;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7959 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7959;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7960 = self.path;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7961 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7961;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7962 = self.natx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7963 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7963;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7964 = self.chrx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7965 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7965;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7966 = self.strx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7967 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7967;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7968 = self.path;
                                        var $7969 = self.expr;
                                        var $7970 = self.name;
                                        var $7971 = self.with;
                                        var $7972 = self.cses;
                                        var $7973 = self.moti;
                                        var _expected$19 = Either$left$("(function type)");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var $7974 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $7974;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7975 = self.orig;
                                        var $7976 = self.expr;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7977 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7977;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7978 = self.value;
                                        var $7979 = self.errors;
                                        var $7980 = Fm$Check$result$($7978, List$concat$($7912, $7979));
                                        var $7916 = $7980;
                                        break;
                                };
                                var $7913 = $7916;
                                break;
                        };
                        var $7910 = $7913;
                        break;
                };
                var self = $7910;
                break;
            case 'Fm.Term.let':
                var $7981 = self.name;
                var $7982 = self.expr;
                var $7983 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Fm$Term$check$($7982, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7985 = self.value;
                        var $7986 = self.errors;
                        var self = $7985;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7988 = Fm$Check$result$(Maybe$none, $7986);
                                var $7987 = $7988;
                                break;
                            case 'Maybe.some':
                                var $7989 = self.value;
                                var _body_val$14 = $7983(Fm$Term$var$($7981, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($7981, $7989), _ctx$4);
                                var self = Fm$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7991 = self.value;
                                        var $7992 = self.errors;
                                        var self = $7991;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7994 = Fm$Check$result$(Maybe$none, $7992);
                                                var $7993 = $7994;
                                                break;
                                            case 'Maybe.some':
                                                var $7995 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7995), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7997 = self.value;
                                                        var $7998 = self.errors;
                                                        var $7999 = Fm$Check$result$($7997, List$concat$($7992, $7998));
                                                        var $7996 = $7999;
                                                        break;
                                                };
                                                var $7993 = $7996;
                                                break;
                                        };
                                        var self = $7993;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8000 = self.value;
                                        var $8001 = self.errors;
                                        var $8002 = Fm$Check$result$($8000, List$concat$($7986, $8001));
                                        var $7990 = $8002;
                                        break;
                                };
                                var $7987 = $7990;
                                break;
                        };
                        var $7984 = $7987;
                        break;
                };
                var self = $7984;
                break;
            case 'Fm.Term.def':
                var $8003 = self.name;
                var $8004 = self.expr;
                var $8005 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Fm$Term$check$($8004, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $8007 = self.value;
                        var $8008 = self.errors;
                        var self = $8007;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8010 = Fm$Check$result$(Maybe$none, $8008);
                                var $8009 = $8010;
                                break;
                            case 'Maybe.some':
                                var $8011 = self.value;
                                var _body_val$14 = $8005(Fm$Term$ann$(Bool$true, $8004, $8011));
                                var _body_ctx$15 = List$cons$(Pair$new$($8003, $8011), _ctx$4);
                                var self = Fm$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8013 = self.value;
                                        var $8014 = self.errors;
                                        var self = $8013;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $8016 = Fm$Check$result$(Maybe$none, $8014);
                                                var $8015 = $8016;
                                                break;
                                            case 'Maybe.some':
                                                var $8017 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($8017), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8019 = self.value;
                                                        var $8020 = self.errors;
                                                        var $8021 = Fm$Check$result$($8019, List$concat$($8014, $8020));
                                                        var $8018 = $8021;
                                                        break;
                                                };
                                                var $8015 = $8018;
                                                break;
                                        };
                                        var self = $8015;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8022 = self.value;
                                        var $8023 = self.errors;
                                        var $8024 = Fm$Check$result$($8022, List$concat$($8008, $8023));
                                        var $8012 = $8024;
                                        break;
                                };
                                var $8009 = $8012;
                                break;
                        };
                        var $8006 = $8009;
                        break;
                };
                var self = $8006;
                break;
            case 'Fm.Term.ann':
                var $8025 = self.done;
                var $8026 = self.term;
                var $8027 = self.type;
                var self = $8025;
                if (self) {
                    var $8029 = Fm$Check$result$(Maybe$some$($8027), List$nil);
                    var $8028 = $8029;
                } else {
                    var self = Fm$Term$check$($8026, Maybe$some$($8027), _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Fm.Check.result':
                            var $8031 = self.value;
                            var $8032 = self.errors;
                            var self = $8031;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $8034 = Fm$Check$result$(Maybe$none, $8032);
                                    var $8033 = $8034;
                                    break;
                                case 'Maybe.some':
                                    var $8035 = self.value;
                                    var self = Fm$Term$check$($8027, Maybe$some$(Fm$Term$typ), _defs$3, _ctx$4, Fm$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $8037 = self.value;
                                            var $8038 = self.errors;
                                            var self = $8037;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $8040 = Fm$Check$result$(Maybe$none, $8038);
                                                    var $8039 = $8040;
                                                    break;
                                                case 'Maybe.some':
                                                    var $8041 = self.value;
                                                    var self = Fm$Check$result$(Maybe$some$($8027), List$nil);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $8043 = self.value;
                                                            var $8044 = self.errors;
                                                            var $8045 = Fm$Check$result$($8043, List$concat$($8038, $8044));
                                                            var $8042 = $8045;
                                                            break;
                                                    };
                                                    var $8039 = $8042;
                                                    break;
                                            };
                                            var self = $8039;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $8046 = self.value;
                                            var $8047 = self.errors;
                                            var $8048 = Fm$Check$result$($8046, List$concat$($8032, $8047));
                                            var $8036 = $8048;
                                            break;
                                    };
                                    var $8033 = $8036;
                                    break;
                            };
                            var $8030 = $8033;
                            break;
                    };
                    var $8028 = $8030;
                };
                var self = $8028;
                break;
            case 'Fm.Term.gol':
                var $8049 = self.name;
                var $8050 = self.dref;
                var $8051 = self.verb;
                var $8052 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$show_goal$($8049, $8050, $8051, _type$2, _ctx$4), List$nil));
                var self = $8052;
                break;
            case 'Fm.Term.hol':
                var $8053 = self.path;
                var $8054 = Fm$Check$result$(_type$2, List$nil);
                var self = $8054;
                break;
            case 'Fm.Term.nat':
                var $8055 = self.natx;
                var $8056 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("Nat")), List$nil);
                var self = $8056;
                break;
            case 'Fm.Term.chr':
                var $8057 = self.chrx;
                var $8058 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("Char")), List$nil);
                var self = $8058;
                break;
            case 'Fm.Term.str':
                var $8059 = self.strx;
                var $8060 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("String")), List$nil);
                var self = $8060;
                break;
            case 'Fm.Term.cse':
                var $8061 = self.path;
                var $8062 = self.expr;
                var $8063 = self.name;
                var $8064 = self.with;
                var $8065 = self.cses;
                var $8066 = self.moti;
                var _expr$13 = $8062;
                var self = Fm$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $8068 = self.value;
                        var $8069 = self.errors;
                        var self = $8068;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8071 = Fm$Check$result$(Maybe$none, $8069);
                                var $8070 = $8071;
                                break;
                            case 'Maybe.some':
                                var $8072 = self.value;
                                var self = $8066;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var self = _type$2;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $8075 = Fm$Term$hol$(Bits$e);
                                                var _moti$17 = $8075;
                                                break;
                                            case 'Maybe.some':
                                                var $8076 = self.value;
                                                var _size$18 = (list_length(_ctx$4));
                                                var _typv$19 = Fm$Term$normalize$($8076, Map$new);
                                                var _moti$20 = Fm$SmartMotive$make$($8063, $8062, $8072, _typv$19, _size$18, _defs$3);
                                                var $8077 = _moti$20;
                                                var _moti$17 = $8077;
                                                break;
                                        };
                                        var $8074 = Maybe$some$(Fm$Term$cse$($8061, $8062, $8063, $8064, $8065, Maybe$some$(_moti$17)));
                                        var _dsug$17 = $8074;
                                        break;
                                    case 'Maybe.some':
                                        var $8078 = self.value;
                                        var $8079 = Fm$Term$desugar_cse$($8062, $8063, $8064, $8065, $8078, $8072, _defs$3, _ctx$4);
                                        var _dsug$17 = $8079;
                                        break;
                                };
                                var self = _dsug$17;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $8080 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                        var self = $8080;
                                        break;
                                    case 'Maybe.some':
                                        var $8081 = self.value;
                                        var $8082 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$patch$(Fm$MPath$to_bits$(_path$5), $8081), List$nil));
                                        var self = $8082;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8083 = self.value;
                                        var $8084 = self.errors;
                                        var $8085 = Fm$Check$result$($8083, List$concat$($8069, $8084));
                                        var $8073 = $8085;
                                        break;
                                };
                                var $8070 = $8073;
                                break;
                        };
                        var $8067 = $8070;
                        break;
                };
                var self = $8067;
                break;
            case 'Fm.Term.ori':
                var $8086 = self.orig;
                var $8087 = self.expr;
                var $8088 = Fm$Term$check$($8087, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($8086));
                var self = $8088;
                break;
        };
        switch (self._) {
            case 'Fm.Check.result':
                var $8089 = self.value;
                var $8090 = self.errors;
                var self = $8089;
                switch (self._) {
                    case 'Maybe.none':
                        var $8092 = Fm$Check$result$(Maybe$none, $8090);
                        var $8091 = $8092;
                        break;
                    case 'Maybe.some':
                        var $8093 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8095 = Fm$Check$result$(Maybe$some$($8093), List$nil);
                                var self = $8095;
                                break;
                            case 'Maybe.some':
                                var $8096 = self.value;
                                var self = Fm$Term$equal$($8096, $8093, _defs$3, (list_length(_ctx$4)), (({})));
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8098 = self.value;
                                        var $8099 = self.errors;
                                        var self = $8098;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $8101 = Fm$Check$result$(Maybe$none, $8099);
                                                var $8100 = $8101;
                                                break;
                                            case 'Maybe.some':
                                                var $8102 = self.value;
                                                var self = $8102;
                                                if (self) {
                                                    var $8104 = Fm$Check$result$(Maybe$some$($8096), List$nil);
                                                    var self = $8104;
                                                } else {
                                                    var $8105 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, Either$right$($8096), Either$right$($8093), _ctx$4), List$nil));
                                                    var self = $8105;
                                                };
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8106 = self.value;
                                                        var $8107 = self.errors;
                                                        var $8108 = Fm$Check$result$($8106, List$concat$($8099, $8107));
                                                        var $8103 = $8108;
                                                        break;
                                                };
                                                var $8100 = $8103;
                                                break;
                                        };
                                        var $8097 = $8100;
                                        break;
                                };
                                var self = $8097;
                                break;
                        };
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $8109 = self.value;
                                var $8110 = self.errors;
                                var $8111 = Fm$Check$result$($8109, List$concat$($8090, $8110));
                                var $8094 = $8111;
                                break;
                        };
                        var $8091 = $8094;
                        break;
                };
                var $7786 = $8091;
                break;
        };
        return $7786;
    };
    const Fm$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Term$check$(x0, x1, x2, x3, x4, x5);

    function Fm$Path$nil$(_x$1) {
        var $8112 = _x$1;
        return $8112;
    };
    const Fm$Path$nil = x0 => Fm$Path$nil$(x0);
    const Fm$MPath$nil = Maybe$some$(Fm$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $8114 = Bool$true;
                var $8113 = $8114;
                break;
            case 'List.cons':
                var $8115 = self.head;
                var $8116 = self.tail;
                var $8117 = Bool$false;
                var $8113 = $8117;
                break;
        };
        return $8113;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Fm$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Fm.Term.var':
                var $8119 = self.name;
                var $8120 = self.indx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8122 = _fn$3(_term$2);
                        var $8121 = $8122;
                        break;
                    case 'o':
                        var $8123 = self.slice(0, -1);
                        var $8124 = _term$2;
                        var $8121 = $8124;
                        break;
                    case 'i':
                        var $8125 = self.slice(0, -1);
                        var $8126 = _term$2;
                        var $8121 = $8126;
                        break;
                };
                var $8118 = $8121;
                break;
            case 'Fm.Term.ref':
                var $8127 = self.name;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8129 = _fn$3(_term$2);
                        var $8128 = $8129;
                        break;
                    case 'o':
                        var $8130 = self.slice(0, -1);
                        var $8131 = _term$2;
                        var $8128 = $8131;
                        break;
                    case 'i':
                        var $8132 = self.slice(0, -1);
                        var $8133 = _term$2;
                        var $8128 = $8133;
                        break;
                };
                var $8118 = $8128;
                break;
            case 'Fm.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8135 = _fn$3(_term$2);
                        var $8134 = $8135;
                        break;
                    case 'o':
                        var $8136 = self.slice(0, -1);
                        var $8137 = _term$2;
                        var $8134 = $8137;
                        break;
                    case 'i':
                        var $8138 = self.slice(0, -1);
                        var $8139 = _term$2;
                        var $8134 = $8139;
                        break;
                };
                var $8118 = $8134;
                break;
            case 'Fm.Term.all':
                var $8140 = self.eras;
                var $8141 = self.self;
                var $8142 = self.name;
                var $8143 = self.xtyp;
                var $8144 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8146 = _fn$3(_term$2);
                        var $8145 = $8146;
                        break;
                    case 'o':
                        var $8147 = self.slice(0, -1);
                        var $8148 = Fm$Term$all$($8140, $8141, $8142, Fm$Term$patch_at$($8147, $8143, _fn$3), $8144);
                        var $8145 = $8148;
                        break;
                    case 'i':
                        var $8149 = self.slice(0, -1);
                        var $8150 = Fm$Term$all$($8140, $8141, $8142, $8143, (_s$10 => _x$11 => {
                            var $8151 = Fm$Term$patch_at$($8149, $8144(_s$10)(_x$11), _fn$3);
                            return $8151;
                        }));
                        var $8145 = $8150;
                        break;
                };
                var $8118 = $8145;
                break;
            case 'Fm.Term.lam':
                var $8152 = self.name;
                var $8153 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8155 = _fn$3(_term$2);
                        var $8154 = $8155;
                        break;
                    case 'o':
                        var $8156 = self.slice(0, -1);
                        var $8157 = Fm$Term$lam$($8152, (_x$7 => {
                            var $8158 = Fm$Term$patch_at$(Bits$tail$(_path$1), $8153(_x$7), _fn$3);
                            return $8158;
                        }));
                        var $8154 = $8157;
                        break;
                    case 'i':
                        var $8159 = self.slice(0, -1);
                        var $8160 = Fm$Term$lam$($8152, (_x$7 => {
                            var $8161 = Fm$Term$patch_at$(Bits$tail$(_path$1), $8153(_x$7), _fn$3);
                            return $8161;
                        }));
                        var $8154 = $8160;
                        break;
                };
                var $8118 = $8154;
                break;
            case 'Fm.Term.app':
                var $8162 = self.func;
                var $8163 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8165 = _fn$3(_term$2);
                        var $8164 = $8165;
                        break;
                    case 'o':
                        var $8166 = self.slice(0, -1);
                        var $8167 = Fm$Term$app$(Fm$Term$patch_at$($8166, $8162, _fn$3), $8163);
                        var $8164 = $8167;
                        break;
                    case 'i':
                        var $8168 = self.slice(0, -1);
                        var $8169 = Fm$Term$app$($8162, Fm$Term$patch_at$($8168, $8163, _fn$3));
                        var $8164 = $8169;
                        break;
                };
                var $8118 = $8164;
                break;
            case 'Fm.Term.let':
                var $8170 = self.name;
                var $8171 = self.expr;
                var $8172 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8174 = _fn$3(_term$2);
                        var $8173 = $8174;
                        break;
                    case 'o':
                        var $8175 = self.slice(0, -1);
                        var $8176 = Fm$Term$let$($8170, Fm$Term$patch_at$($8175, $8171, _fn$3), $8172);
                        var $8173 = $8176;
                        break;
                    case 'i':
                        var $8177 = self.slice(0, -1);
                        var $8178 = Fm$Term$let$($8170, $8171, (_x$8 => {
                            var $8179 = Fm$Term$patch_at$($8177, $8172(_x$8), _fn$3);
                            return $8179;
                        }));
                        var $8173 = $8178;
                        break;
                };
                var $8118 = $8173;
                break;
            case 'Fm.Term.def':
                var $8180 = self.name;
                var $8181 = self.expr;
                var $8182 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8184 = _fn$3(_term$2);
                        var $8183 = $8184;
                        break;
                    case 'o':
                        var $8185 = self.slice(0, -1);
                        var $8186 = Fm$Term$def$($8180, Fm$Term$patch_at$($8185, $8181, _fn$3), $8182);
                        var $8183 = $8186;
                        break;
                    case 'i':
                        var $8187 = self.slice(0, -1);
                        var $8188 = Fm$Term$def$($8180, $8181, (_x$8 => {
                            var $8189 = Fm$Term$patch_at$($8187, $8182(_x$8), _fn$3);
                            return $8189;
                        }));
                        var $8183 = $8188;
                        break;
                };
                var $8118 = $8183;
                break;
            case 'Fm.Term.ann':
                var $8190 = self.done;
                var $8191 = self.term;
                var $8192 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8194 = _fn$3(_term$2);
                        var $8193 = $8194;
                        break;
                    case 'o':
                        var $8195 = self.slice(0, -1);
                        var $8196 = Fm$Term$ann$($8190, Fm$Term$patch_at$($8195, $8191, _fn$3), $8192);
                        var $8193 = $8196;
                        break;
                    case 'i':
                        var $8197 = self.slice(0, -1);
                        var $8198 = Fm$Term$ann$($8190, $8191, Fm$Term$patch_at$($8197, $8192, _fn$3));
                        var $8193 = $8198;
                        break;
                };
                var $8118 = $8193;
                break;
            case 'Fm.Term.gol':
                var $8199 = self.name;
                var $8200 = self.dref;
                var $8201 = self.verb;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8203 = _fn$3(_term$2);
                        var $8202 = $8203;
                        break;
                    case 'o':
                        var $8204 = self.slice(0, -1);
                        var $8205 = _term$2;
                        var $8202 = $8205;
                        break;
                    case 'i':
                        var $8206 = self.slice(0, -1);
                        var $8207 = _term$2;
                        var $8202 = $8207;
                        break;
                };
                var $8118 = $8202;
                break;
            case 'Fm.Term.hol':
                var $8208 = self.path;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8210 = _fn$3(_term$2);
                        var $8209 = $8210;
                        break;
                    case 'o':
                        var $8211 = self.slice(0, -1);
                        var $8212 = _term$2;
                        var $8209 = $8212;
                        break;
                    case 'i':
                        var $8213 = self.slice(0, -1);
                        var $8214 = _term$2;
                        var $8209 = $8214;
                        break;
                };
                var $8118 = $8209;
                break;
            case 'Fm.Term.nat':
                var $8215 = self.natx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8217 = _fn$3(_term$2);
                        var $8216 = $8217;
                        break;
                    case 'o':
                        var $8218 = self.slice(0, -1);
                        var $8219 = _term$2;
                        var $8216 = $8219;
                        break;
                    case 'i':
                        var $8220 = self.slice(0, -1);
                        var $8221 = _term$2;
                        var $8216 = $8221;
                        break;
                };
                var $8118 = $8216;
                break;
            case 'Fm.Term.chr':
                var $8222 = self.chrx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8224 = _fn$3(_term$2);
                        var $8223 = $8224;
                        break;
                    case 'o':
                        var $8225 = self.slice(0, -1);
                        var $8226 = _term$2;
                        var $8223 = $8226;
                        break;
                    case 'i':
                        var $8227 = self.slice(0, -1);
                        var $8228 = _term$2;
                        var $8223 = $8228;
                        break;
                };
                var $8118 = $8223;
                break;
            case 'Fm.Term.str':
                var $8229 = self.strx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8231 = _fn$3(_term$2);
                        var $8230 = $8231;
                        break;
                    case 'o':
                        var $8232 = self.slice(0, -1);
                        var $8233 = _term$2;
                        var $8230 = $8233;
                        break;
                    case 'i':
                        var $8234 = self.slice(0, -1);
                        var $8235 = _term$2;
                        var $8230 = $8235;
                        break;
                };
                var $8118 = $8230;
                break;
            case 'Fm.Term.cse':
                var $8236 = self.path;
                var $8237 = self.expr;
                var $8238 = self.name;
                var $8239 = self.with;
                var $8240 = self.cses;
                var $8241 = self.moti;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8243 = _fn$3(_term$2);
                        var $8242 = $8243;
                        break;
                    case 'o':
                        var $8244 = self.slice(0, -1);
                        var $8245 = _term$2;
                        var $8242 = $8245;
                        break;
                    case 'i':
                        var $8246 = self.slice(0, -1);
                        var $8247 = _term$2;
                        var $8242 = $8247;
                        break;
                };
                var $8118 = $8242;
                break;
            case 'Fm.Term.ori':
                var $8248 = self.orig;
                var $8249 = self.expr;
                var $8250 = Fm$Term$ori$($8248, Fm$Term$patch_at$(_path$1, $8249, _fn$3));
                var $8118 = $8250;
                break;
        };
        return $8118;
    };
    const Fm$Term$patch_at = x0 => x1 => x2 => Fm$Term$patch_at$(x0, x1, x2);

    function Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {
        var self = _errs$10;
        switch (self._) {
            case 'List.nil':
                var self = _fixd$11;
                if (self) {
                    var _type$12 = Fm$Term$bind$(List$nil, (_x$12 => {
                        var $8254 = (_x$12 + '1');
                        return $8254;
                    }), _type$6);
                    var _term$13 = Fm$Term$bind$(List$nil, (_x$13 => {
                        var $8255 = (_x$13 + '0');
                        return $8255;
                    }), _term$5);
                    var _defs$14 = Fm$set$(_name$4, Fm$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Fm$Status$init), _defs$9);
                    var $8253 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                        var $8256 = _m$pure$16;
                        return $8256;
                    }))(Maybe$some$(_defs$14));
                    var $8252 = $8253;
                } else {
                    var $8257 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $8258 = _m$pure$13;
                        return $8258;
                    }))(Maybe$none);
                    var $8252 = $8257;
                };
                var $8251 = $8252;
                break;
            case 'List.cons':
                var $8259 = self.head;
                var $8260 = self.tail;
                var self = $8259;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $8262 = self.origin;
                        var $8263 = self.expected;
                        var $8264 = self.detected;
                        var $8265 = self.context;
                        var $8266 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8260, _fixd$11);
                        var $8261 = $8266;
                        break;
                    case 'Fm.Error.show_goal':
                        var $8267 = self.name;
                        var $8268 = self.dref;
                        var $8269 = self.verb;
                        var $8270 = self.goal;
                        var $8271 = self.context;
                        var $8272 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8260, _fixd$11);
                        var $8261 = $8272;
                        break;
                    case 'Fm.Error.waiting':
                        var $8273 = self.name;
                        var $8274 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                            var $8275 = _m$bind$15;
                            return $8275;
                        }))(Fm$Synth$one$($8273, _defs$9))((_new_defs$15 => {
                            var self = _new_defs$15;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $8277 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8260, _fixd$11);
                                    var $8276 = $8277;
                                    break;
                                case 'Maybe.some':
                                    var $8278 = self.value;
                                    var $8279 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $8278, $8260, Bool$true);
                                    var $8276 = $8279;
                                    break;
                            };
                            return $8276;
                        }));
                        var $8261 = $8274;
                        break;
                    case 'Fm.Error.indirect':
                        var $8280 = self.name;
                        var $8281 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8260, _fixd$11);
                        var $8261 = $8281;
                        break;
                    case 'Fm.Error.patch':
                        var $8282 = self.path;
                        var $8283 = self.term;
                        var self = $8282;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'e':
                                var $8285 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $8286 = _m$pure$17;
                                    return $8286;
                                }))(Maybe$none);
                                var $8284 = $8285;
                                break;
                            case 'o':
                                var $8287 = self.slice(0, -1);
                                var _term$17 = Fm$Term$patch_at$($8287, _term$5, (_x$17 => {
                                    var $8289 = $8283;
                                    return $8289;
                                }));
                                var $8288 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $8260, Bool$true);
                                var $8284 = $8288;
                                break;
                            case 'i':
                                var $8290 = self.slice(0, -1);
                                var _type$17 = Fm$Term$patch_at$($8290, _type$6, (_x$17 => {
                                    var $8292 = $8283;
                                    return $8292;
                                }));
                                var $8291 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $8260, Bool$true);
                                var $8284 = $8291;
                                break;
                        };
                        var $8261 = $8284;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $8293 = self.origin;
                        var $8294 = self.name;
                        var $8295 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                            var $8296 = _m$bind$16;
                            return $8296;
                        }))(Fm$Synth$one$($8294, _defs$9))((_new_defs$16 => {
                            var self = _new_defs$16;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $8298 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8260, _fixd$11);
                                    var $8297 = $8298;
                                    break;
                                case 'Maybe.some':
                                    var $8299 = self.value;
                                    var $8300 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $8299, $8260, Bool$true);
                                    var $8297 = $8300;
                                    break;
                            };
                            return $8297;
                        }));
                        var $8261 = $8295;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $8301 = self.origin;
                        var $8302 = self.term;
                        var $8303 = self.context;
                        var $8304 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8260, _fixd$11);
                        var $8261 = $8304;
                        break;
                };
                var $8251 = $8261;
                break;
        };
        return $8251;
    };
    const Fm$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Fm$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);

    function Fm$Status$fail$(_errors$1) {
        var $8305 = ({
            _: 'Fm.Status.fail',
            'errors': _errors$1
        });
        return $8305;
    };
    const Fm$Status$fail = x0 => Fm$Status$fail$(x0);

    function Fm$Synth$one$(_name$1, _defs$2) {
        var self = Fm$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.none':
                var $8307 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $8308 = _m$bind$3;
                    return $8308;
                }))(Fm$Synth$load$(_name$1, _defs$2))((_loaded$3 => {
                    var self = _loaded$3;
                    switch (self._) {
                        case 'Maybe.none':
                            var $8310 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                                var $8311 = _m$pure$5;
                                return $8311;
                            }))(Maybe$none);
                            var $8309 = $8310;
                            break;
                        case 'Maybe.some':
                            var $8312 = self.value;
                            var $8313 = Fm$Synth$one$(_name$1, $8312);
                            var $8309 = $8313;
                            break;
                    };
                    return $8309;
                }));
                var $8306 = $8307;
                break;
            case 'Maybe.some':
                var $8314 = self.value;
                var self = $8314;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8316 = self.file;
                        var $8317 = self.code;
                        var $8318 = self.orig;
                        var $8319 = self.name;
                        var $8320 = self.term;
                        var $8321 = self.type;
                        var $8322 = self.isct;
                        var $8323 = self.arit;
                        var $8324 = self.stat;
                        var _file$13 = $8316;
                        var _code$14 = $8317;
                        var _orig$15 = $8318;
                        var _name$16 = $8319;
                        var _term$17 = $8320;
                        var _type$18 = $8321;
                        var _isct$19 = $8322;
                        var _arit$20 = $8323;
                        var _stat$21 = $8324;
                        var self = _stat$21;
                        switch (self._) {
                            case 'Fm.Status.init':
                                var _defs$22 = Fm$set$(_name$16, Fm$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Fm$Status$wait), _defs$2);
                                var self = Fm$Term$check$(_type$18, Maybe$some$(Fm$Term$typ), _defs$22, List$nil, Fm$MPath$i$(Fm$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8327 = self.value;
                                        var $8328 = self.errors;
                                        var self = $8327;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $8330 = Fm$Check$result$(Maybe$none, $8328);
                                                var $8329 = $8330;
                                                break;
                                            case 'Maybe.some':
                                                var $8331 = self.value;
                                                var self = Fm$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Fm$MPath$o$(Fm$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8333 = self.value;
                                                        var $8334 = self.errors;
                                                        var self = $8333;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $8336 = Fm$Check$result$(Maybe$none, $8334);
                                                                var $8335 = $8336;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $8337 = self.value;
                                                                var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Fm.Check.result':
                                                                        var $8339 = self.value;
                                                                        var $8340 = self.errors;
                                                                        var $8341 = Fm$Check$result$($8339, List$concat$($8334, $8340));
                                                                        var $8338 = $8341;
                                                                        break;
                                                                };
                                                                var $8335 = $8338;
                                                                break;
                                                        };
                                                        var self = $8335;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8342 = self.value;
                                                        var $8343 = self.errors;
                                                        var $8344 = Fm$Check$result$($8342, List$concat$($8328, $8343));
                                                        var $8332 = $8344;
                                                        break;
                                                };
                                                var $8329 = $8332;
                                                break;
                                        };
                                        var _checked$23 = $8329;
                                        break;
                                };
                                var self = _checked$23;
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8345 = self.value;
                                        var $8346 = self.errors;
                                        var self = List$is_empty$($8346);
                                        if (self) {
                                            var _defs$26 = Fm$define$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);
                                            var $8348 = IO$monad$((_m$bind$27 => _m$pure$28 => {
                                                var $8349 = _m$pure$28;
                                                return $8349;
                                            }))(Maybe$some$(_defs$26));
                                            var $8347 = $8348;
                                        } else {
                                            var $8350 = IO$monad$((_m$bind$26 => _m$pure$27 => {
                                                var $8351 = _m$bind$26;
                                                return $8351;
                                            }))(Fm$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $8346, Bool$false))((_fixed$26 => {
                                                var self = _fixed$26;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var _stat$27 = Fm$Status$fail$($8346);
                                                        var _defs$28 = Fm$set$(_name$16, Fm$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);
                                                        var $8353 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                            var $8354 = _m$pure$30;
                                                            return $8354;
                                                        }))(Maybe$some$(_defs$28));
                                                        var $8352 = $8353;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $8355 = self.value;
                                                        var $8356 = Fm$Synth$one$(_name$16, $8355);
                                                        var $8352 = $8356;
                                                        break;
                                                };
                                                return $8352;
                                            }));
                                            var $8347 = $8350;
                                        };
                                        var $8326 = $8347;
                                        break;
                                };
                                var $8325 = $8326;
                                break;
                            case 'Fm.Status.wait':
                                var $8357 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $8358 = _m$pure$23;
                                    return $8358;
                                }))(Maybe$some$(_defs$2));
                                var $8325 = $8357;
                                break;
                            case 'Fm.Status.done':
                                var $8359 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $8360 = _m$pure$23;
                                    return $8360;
                                }))(Maybe$some$(_defs$2));
                                var $8325 = $8359;
                                break;
                            case 'Fm.Status.fail':
                                var $8361 = self.errors;
                                var $8362 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                    var $8363 = _m$pure$24;
                                    return $8363;
                                }))(Maybe$some$(_defs$2));
                                var $8325 = $8362;
                                break;
                        };
                        var $8315 = $8325;
                        break;
                };
                var $8306 = $8315;
                break;
        };
        return $8306;
    };
    const Fm$Synth$one = x0 => x1 => Fm$Synth$one$(x0, x1);

    function Map$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'Map.new':
                var $8365 = Map$new;
                var $8364 = $8365;
                break;
            case 'Map.tie':
                var $8366 = self.val;
                var $8367 = self.lft;
                var $8368 = self.rgt;
                var self = $8366;
                switch (self._) {
                    case 'Maybe.none':
                        var $8370 = Maybe$none;
                        var _val$8 = $8370;
                        break;
                    case 'Maybe.some':
                        var $8371 = self.value;
                        var $8372 = Maybe$some$(_fn$3($8371));
                        var _val$8 = $8372;
                        break;
                };
                var _lft$9 = Map$map$(_fn$3, $8367);
                var _rgt$10 = Map$map$(_fn$3, $8368);
                var $8369 = Map$tie$(_val$8, _lft$9, _rgt$10);
                var $8364 = $8369;
                break;
        };
        return $8364;
    };
    const Map$map = x0 => x1 => Map$map$(x0, x1);
    const Fm$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Fm.Check.pure", List$cons$("Fm.Check.bind", List$cons$("Fm.Check.monad", List$cons$("Fm.Check.value", List$cons$("Fm.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $8374 = Pair$new$((fm_name_to_bits(_x$2)), Unit$new);
            return $8374;
        }));
        var $8373 = Map$from_list$(_kvs$2);
        return $8373;
    })();

    function Fm$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8376 = self.name;
                var $8377 = self.indx;
                var $8378 = _term$1;
                var $8375 = $8378;
                break;
            case 'Fm.Term.ref':
                var $8379 = self.name;
                var _inli$4 = Set$has$((fm_name_to_bits($8379)), Fm$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Fm$get$($8379, _defs$2);
                    switch (self._) {
                        case 'Maybe.none':
                            var $8382 = Fm$Term$ref$($8379);
                            var $8381 = $8382;
                            break;
                        case 'Maybe.some':
                            var $8383 = self.value;
                            var self = $8383;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $8385 = self.file;
                                    var $8386 = self.code;
                                    var $8387 = self.orig;
                                    var $8388 = self.name;
                                    var $8389 = self.term;
                                    var $8390 = self.type;
                                    var $8391 = self.isct;
                                    var $8392 = self.arit;
                                    var $8393 = self.stat;
                                    var $8394 = Fm$Term$inline$reduce$($8389, _defs$2);
                                    var $8384 = $8394;
                                    break;
                            };
                            var $8381 = $8384;
                            break;
                    };
                    var $8380 = $8381;
                } else {
                    var $8395 = _term$1;
                    var $8380 = $8395;
                };
                var $8375 = $8380;
                break;
            case 'Fm.Term.typ':
                var $8396 = _term$1;
                var $8375 = $8396;
                break;
            case 'Fm.Term.all':
                var $8397 = self.eras;
                var $8398 = self.self;
                var $8399 = self.name;
                var $8400 = self.xtyp;
                var $8401 = self.body;
                var $8402 = _term$1;
                var $8375 = $8402;
                break;
            case 'Fm.Term.lam':
                var $8403 = self.name;
                var $8404 = self.body;
                var $8405 = _term$1;
                var $8375 = $8405;
                break;
            case 'Fm.Term.app':
                var $8406 = self.func;
                var $8407 = self.argm;
                var _func$5 = Fm$Term$inline$reduce$($8406, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8409 = self.name;
                        var $8410 = self.indx;
                        var $8411 = _term$1;
                        var $8408 = $8411;
                        break;
                    case 'Fm.Term.ref':
                        var $8412 = self.name;
                        var $8413 = _term$1;
                        var $8408 = $8413;
                        break;
                    case 'Fm.Term.typ':
                        var $8414 = _term$1;
                        var $8408 = $8414;
                        break;
                    case 'Fm.Term.all':
                        var $8415 = self.eras;
                        var $8416 = self.self;
                        var $8417 = self.name;
                        var $8418 = self.xtyp;
                        var $8419 = self.body;
                        var $8420 = _term$1;
                        var $8408 = $8420;
                        break;
                    case 'Fm.Term.lam':
                        var $8421 = self.name;
                        var $8422 = self.body;
                        var $8423 = Fm$Term$inline$reduce$($8422($8407), _defs$2);
                        var $8408 = $8423;
                        break;
                    case 'Fm.Term.app':
                        var $8424 = self.func;
                        var $8425 = self.argm;
                        var $8426 = _term$1;
                        var $8408 = $8426;
                        break;
                    case 'Fm.Term.let':
                        var $8427 = self.name;
                        var $8428 = self.expr;
                        var $8429 = self.body;
                        var $8430 = Fm$Term$let$($8427, $8428, (_x$9 => {
                            var $8431 = Fm$Term$inline$reduce$(Fm$Term$app$($8429(_x$9), $8407), _defs$2);
                            return $8431;
                        }));
                        var $8408 = $8430;
                        break;
                    case 'Fm.Term.def':
                        var $8432 = self.name;
                        var $8433 = self.expr;
                        var $8434 = self.body;
                        var $8435 = _term$1;
                        var $8408 = $8435;
                        break;
                    case 'Fm.Term.ann':
                        var $8436 = self.done;
                        var $8437 = self.term;
                        var $8438 = self.type;
                        var $8439 = _term$1;
                        var $8408 = $8439;
                        break;
                    case 'Fm.Term.gol':
                        var $8440 = self.name;
                        var $8441 = self.dref;
                        var $8442 = self.verb;
                        var $8443 = _term$1;
                        var $8408 = $8443;
                        break;
                    case 'Fm.Term.hol':
                        var $8444 = self.path;
                        var $8445 = _term$1;
                        var $8408 = $8445;
                        break;
                    case 'Fm.Term.nat':
                        var $8446 = self.natx;
                        var $8447 = _term$1;
                        var $8408 = $8447;
                        break;
                    case 'Fm.Term.chr':
                        var $8448 = self.chrx;
                        var $8449 = _term$1;
                        var $8408 = $8449;
                        break;
                    case 'Fm.Term.str':
                        var $8450 = self.strx;
                        var $8451 = _term$1;
                        var $8408 = $8451;
                        break;
                    case 'Fm.Term.cse':
                        var $8452 = self.path;
                        var $8453 = self.expr;
                        var $8454 = self.name;
                        var $8455 = self.with;
                        var $8456 = self.cses;
                        var $8457 = self.moti;
                        var $8458 = _term$1;
                        var $8408 = $8458;
                        break;
                    case 'Fm.Term.ori':
                        var $8459 = self.orig;
                        var $8460 = self.expr;
                        var $8461 = _term$1;
                        var $8408 = $8461;
                        break;
                };
                var $8375 = $8408;
                break;
            case 'Fm.Term.let':
                var $8462 = self.name;
                var $8463 = self.expr;
                var $8464 = self.body;
                var $8465 = _term$1;
                var $8375 = $8465;
                break;
            case 'Fm.Term.def':
                var $8466 = self.name;
                var $8467 = self.expr;
                var $8468 = self.body;
                var $8469 = _term$1;
                var $8375 = $8469;
                break;
            case 'Fm.Term.ann':
                var $8470 = self.done;
                var $8471 = self.term;
                var $8472 = self.type;
                var $8473 = _term$1;
                var $8375 = $8473;
                break;
            case 'Fm.Term.gol':
                var $8474 = self.name;
                var $8475 = self.dref;
                var $8476 = self.verb;
                var $8477 = _term$1;
                var $8375 = $8477;
                break;
            case 'Fm.Term.hol':
                var $8478 = self.path;
                var $8479 = _term$1;
                var $8375 = $8479;
                break;
            case 'Fm.Term.nat':
                var $8480 = self.natx;
                var $8481 = _term$1;
                var $8375 = $8481;
                break;
            case 'Fm.Term.chr':
                var $8482 = self.chrx;
                var $8483 = _term$1;
                var $8375 = $8483;
                break;
            case 'Fm.Term.str':
                var $8484 = self.strx;
                var $8485 = _term$1;
                var $8375 = $8485;
                break;
            case 'Fm.Term.cse':
                var $8486 = self.path;
                var $8487 = self.expr;
                var $8488 = self.name;
                var $8489 = self.with;
                var $8490 = self.cses;
                var $8491 = self.moti;
                var $8492 = _term$1;
                var $8375 = $8492;
                break;
            case 'Fm.Term.ori':
                var $8493 = self.orig;
                var $8494 = self.expr;
                var $8495 = Fm$Term$inline$reduce$($8494, _defs$2);
                var $8375 = $8495;
                break;
        };
        return $8375;
    };
    const Fm$Term$inline$reduce = x0 => x1 => Fm$Term$inline$reduce$(x0, x1);

    function Fm$Term$inline$(_term$1, _defs$2) {
        var self = Fm$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Fm.Term.var':
                var $8497 = self.name;
                var $8498 = self.indx;
                var $8499 = Fm$Term$var$($8497, $8498);
                var $8496 = $8499;
                break;
            case 'Fm.Term.ref':
                var $8500 = self.name;
                var $8501 = Fm$Term$ref$($8500);
                var $8496 = $8501;
                break;
            case 'Fm.Term.typ':
                var $8502 = Fm$Term$typ;
                var $8496 = $8502;
                break;
            case 'Fm.Term.all':
                var $8503 = self.eras;
                var $8504 = self.self;
                var $8505 = self.name;
                var $8506 = self.xtyp;
                var $8507 = self.body;
                var $8508 = Fm$Term$all$($8503, $8504, $8505, Fm$Term$inline$($8506, _defs$2), (_s$8 => _x$9 => {
                    var $8509 = Fm$Term$inline$($8507(_s$8)(_x$9), _defs$2);
                    return $8509;
                }));
                var $8496 = $8508;
                break;
            case 'Fm.Term.lam':
                var $8510 = self.name;
                var $8511 = self.body;
                var $8512 = Fm$Term$lam$($8510, (_x$5 => {
                    var $8513 = Fm$Term$inline$($8511(_x$5), _defs$2);
                    return $8513;
                }));
                var $8496 = $8512;
                break;
            case 'Fm.Term.app':
                var $8514 = self.func;
                var $8515 = self.argm;
                var $8516 = Fm$Term$app$(Fm$Term$inline$($8514, _defs$2), Fm$Term$inline$($8515, _defs$2));
                var $8496 = $8516;
                break;
            case 'Fm.Term.let':
                var $8517 = self.name;
                var $8518 = self.expr;
                var $8519 = self.body;
                var $8520 = Fm$Term$let$($8517, Fm$Term$inline$($8518, _defs$2), (_x$6 => {
                    var $8521 = Fm$Term$inline$($8519(_x$6), _defs$2);
                    return $8521;
                }));
                var $8496 = $8520;
                break;
            case 'Fm.Term.def':
                var $8522 = self.name;
                var $8523 = self.expr;
                var $8524 = self.body;
                var $8525 = Fm$Term$def$($8522, Fm$Term$inline$($8523, _defs$2), (_x$6 => {
                    var $8526 = Fm$Term$inline$($8524(_x$6), _defs$2);
                    return $8526;
                }));
                var $8496 = $8525;
                break;
            case 'Fm.Term.ann':
                var $8527 = self.done;
                var $8528 = self.term;
                var $8529 = self.type;
                var $8530 = Fm$Term$ann$($8527, Fm$Term$inline$($8528, _defs$2), Fm$Term$inline$($8529, _defs$2));
                var $8496 = $8530;
                break;
            case 'Fm.Term.gol':
                var $8531 = self.name;
                var $8532 = self.dref;
                var $8533 = self.verb;
                var $8534 = Fm$Term$gol$($8531, $8532, $8533);
                var $8496 = $8534;
                break;
            case 'Fm.Term.hol':
                var $8535 = self.path;
                var $8536 = Fm$Term$hol$($8535);
                var $8496 = $8536;
                break;
            case 'Fm.Term.nat':
                var $8537 = self.natx;
                var $8538 = Fm$Term$nat$($8537);
                var $8496 = $8538;
                break;
            case 'Fm.Term.chr':
                var $8539 = self.chrx;
                var $8540 = Fm$Term$chr$($8539);
                var $8496 = $8540;
                break;
            case 'Fm.Term.str':
                var $8541 = self.strx;
                var $8542 = Fm$Term$str$($8541);
                var $8496 = $8542;
                break;
            case 'Fm.Term.cse':
                var $8543 = self.path;
                var $8544 = self.expr;
                var $8545 = self.name;
                var $8546 = self.with;
                var $8547 = self.cses;
                var $8548 = self.moti;
                var $8549 = _term$1;
                var $8496 = $8549;
                break;
            case 'Fm.Term.ori':
                var $8550 = self.orig;
                var $8551 = self.expr;
                var $8552 = Fm$Term$inline$($8551, _defs$2);
                var $8496 = $8552;
                break;
        };
        return $8496;
    };
    const Fm$Term$inline = x0 => x1 => Fm$Term$inline$(x0, x1);

    function Map$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $8554 = _list$3;
                var $8553 = $8554;
                break;
            case 'Map.tie':
                var $8555 = self.val;
                var $8556 = self.lft;
                var $8557 = self.rgt;
                var self = $8555;
                switch (self._) {
                    case 'Maybe.none':
                        var $8559 = _list$3;
                        var _list0$7 = $8559;
                        break;
                    case 'Maybe.some':
                        var $8560 = self.value;
                        var $8561 = List$cons$($8560, _list$3);
                        var _list0$7 = $8561;
                        break;
                };
                var _list1$8 = Map$values$go$($8556, _list0$7);
                var _list2$9 = Map$values$go$($8557, _list1$8);
                var $8558 = _list2$9;
                var $8553 = $8558;
                break;
        };
        return $8553;
    };
    const Map$values$go = x0 => x1 => Map$values$go$(x0, x1);

    function Map$values$(_xs$2) {
        var $8562 = Map$values$go$(_xs$2, List$nil);
        return $8562;
    };
    const Map$values = x0 => Map$values$(x0);

    function Fm$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Fm$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Fm$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Fm$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $8564 = _name$2;
                        var $8563 = $8564;
                    } else {
                        var $8565 = (self - 1n);
                        var $8566 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $8563 = $8566;
                    };
                    return $8563;
                } else {
                    var $8567 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.nil':
                            var $8569 = "unbound";
                            var $8568 = $8569;
                            break;
                        case 'List.cons':
                            var $8570 = self.head;
                            var $8571 = self.tail;
                            var self = (_name$2 === $8570);
                            if (self) {
                                var $8573 = Nat$succ$(_brui$3);
                                var _brui$8 = $8573;
                            } else {
                                var $8574 = _brui$3;
                                var _brui$8 = $8574;
                            };
                            var $8572 = Fm$Core$var_name$($8567, _name$2, _brui$8, $8571);
                            var $8568 = $8572;
                            break;
                    };
                    return $8568;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Core$var_name = x0 => x1 => x2 => x3 => Fm$Core$var_name$(x0, x1, x2, x3);

    function Fm$Name$show$(_name$1) {
        var $8575 = _name$1;
        return $8575;
    };
    const Fm$Name$show = x0 => Fm$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $8577 = 0n;
                var $8576 = $8577;
                break;
            case 'o':
                var $8578 = self.slice(0, -1);
                var $8579 = (2n * Bits$to_nat$($8578));
                var $8576 = $8579;
                break;
            case 'i':
                var $8580 = self.slice(0, -1);
                var $8581 = Nat$succ$((2n * Bits$to_nat$($8580)));
                var $8576 = $8581;
                break;
        };
        return $8576;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $8583 = u16_to_word(self);
                var $8584 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($8583)));
                var $8582 = $8584;
                break;
        };
        return $8582;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Fm$escape$char$(_chr$1) {
        var self = (_chr$1 === Fm$backslash);
        if (self) {
            var $8586 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
            var $8585 = $8586;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $8588 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
                var $8587 = $8588;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $8590 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
                    var $8589 = $8590;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $8592 = String$cons$(_chr$1, String$nil);
                        var $8591 = $8592;
                    } else {
                        var $8593 = String$flatten$(List$cons$(String$cons$(Fm$backslash, String$nil), List$cons$("u{", List$cons$(U16$show_hex$(_chr$1), List$cons$("}", List$cons$(String$nil, List$nil))))));
                        var $8591 = $8593;
                    };
                    var $8589 = $8591;
                };
                var $8587 = $8589;
            };
            var $8585 = $8587;
        };
        return $8585;
    };
    const Fm$escape$char = x0 => Fm$escape$char$(x0);

    function Fm$escape$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $8595 = String$nil;
            var $8594 = $8595;
        } else {
            var $8596 = self.charCodeAt(0);
            var $8597 = self.slice(1);
            var _head$4 = Fm$escape$char$($8596);
            var _tail$5 = Fm$escape$($8597);
            var $8598 = (_head$4 + _tail$5);
            var $8594 = $8598;
        };
        return $8594;
    };
    const Fm$escape = x0 => Fm$escape$(x0);

    function Fm$Core$show$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8600 = self.name;
                var $8601 = self.indx;
                var $8602 = Fm$Core$var_name$(Nat$pred$((_indx$2 - $8601 <= 0n ? 0n : _indx$2 - $8601)), $8600, 0n, _vars$3);
                var $8599 = $8602;
                break;
            case 'Fm.Term.ref':
                var $8603 = self.name;
                var $8604 = Fm$Name$show$($8603);
                var $8599 = $8604;
                break;
            case 'Fm.Term.typ':
                var $8605 = "*";
                var $8599 = $8605;
                break;
            case 'Fm.Term.all':
                var $8606 = self.eras;
                var $8607 = self.self;
                var $8608 = self.name;
                var $8609 = self.xtyp;
                var $8610 = self.body;
                var _eras$9 = $8606;
                var self = _eras$9;
                if (self) {
                    var $8612 = "%";
                    var _init$10 = $8612;
                } else {
                    var $8613 = "@";
                    var _init$10 = $8613;
                };
                var _self$11 = Fm$Name$show$($8607);
                var _name$12 = Fm$Name$show$($8608);
                var _xtyp$13 = Fm$Core$show$($8609, _indx$2, _vars$3);
                var _body$14 = Fm$Core$show$($8610(Fm$Term$var$($8607, _indx$2))(Fm$Term$var$($8608, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($8608, List$cons$($8607, _vars$3)));
                var $8611 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $8599 = $8611;
                break;
            case 'Fm.Term.lam':
                var $8614 = self.name;
                var $8615 = self.body;
                var _name$6 = Fm$Name$show$($8614);
                var _body$7 = Fm$Core$show$($8615(Fm$Term$var$($8614, _indx$2)), Nat$succ$(_indx$2), List$cons$($8614, _vars$3));
                var $8616 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $8599 = $8616;
                break;
            case 'Fm.Term.app':
                var $8617 = self.func;
                var $8618 = self.argm;
                var _func$6 = Fm$Core$show$($8617, _indx$2, _vars$3);
                var _argm$7 = Fm$Core$show$($8618, _indx$2, _vars$3);
                var $8619 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $8599 = $8619;
                break;
            case 'Fm.Term.let':
                var $8620 = self.name;
                var $8621 = self.expr;
                var $8622 = self.body;
                var _name$7 = Fm$Name$show$($8620);
                var _expr$8 = Fm$Core$show$($8621, _indx$2, _vars$3);
                var _body$9 = Fm$Core$show$($8622(Fm$Term$var$($8620, _indx$2)), Nat$succ$(_indx$2), List$cons$($8620, _vars$3));
                var $8623 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $8599 = $8623;
                break;
            case 'Fm.Term.def':
                var $8624 = self.name;
                var $8625 = self.expr;
                var $8626 = self.body;
                var _name$7 = Fm$Name$show$($8624);
                var _expr$8 = Fm$Core$show$($8625, _indx$2, _vars$3);
                var _body$9 = Fm$Core$show$($8626(Fm$Term$var$($8624, _indx$2)), Nat$succ$(_indx$2), List$cons$($8624, _vars$3));
                var $8627 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $8599 = $8627;
                break;
            case 'Fm.Term.ann':
                var $8628 = self.done;
                var $8629 = self.term;
                var $8630 = self.type;
                var _term$7 = Fm$Core$show$($8629, _indx$2, _vars$3);
                var _type$8 = Fm$Core$show$($8630, _indx$2, _vars$3);
                var $8631 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $8599 = $8631;
                break;
            case 'Fm.Term.gol':
                var $8632 = self.name;
                var $8633 = self.dref;
                var $8634 = self.verb;
                var $8635 = "<GOL>";
                var $8599 = $8635;
                break;
            case 'Fm.Term.hol':
                var $8636 = self.path;
                var $8637 = "<HOL>";
                var $8599 = $8637;
                break;
            case 'Fm.Term.nat':
                var $8638 = self.natx;
                var $8639 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($8638), List$nil)));
                var $8599 = $8639;
                break;
            case 'Fm.Term.chr':
                var $8640 = self.chrx;
                var $8641 = String$flatten$(List$cons$("\'", List$cons$(Fm$escape$char$($8640), List$cons$("\'", List$nil))));
                var $8599 = $8641;
                break;
            case 'Fm.Term.str':
                var $8642 = self.strx;
                var $8643 = String$flatten$(List$cons$("\"", List$cons$(Fm$escape$($8642), List$cons$("\"", List$nil))));
                var $8599 = $8643;
                break;
            case 'Fm.Term.cse':
                var $8644 = self.path;
                var $8645 = self.expr;
                var $8646 = self.name;
                var $8647 = self.with;
                var $8648 = self.cses;
                var $8649 = self.moti;
                var $8650 = "<CSE>";
                var $8599 = $8650;
                break;
            case 'Fm.Term.ori':
                var $8651 = self.orig;
                var $8652 = self.expr;
                var $8653 = Fm$Core$show$($8652, _indx$2, _vars$3);
                var $8599 = $8653;
                break;
        };
        return $8599;
    };
    const Fm$Core$show = x0 => x1 => x2 => Fm$Core$show$(x0, x1, x2);

    function Fm$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $8656 = _result$2;
            var $8657 = Map$values$(_defs$1);
            let _result$4 = $8656;
            let _defn$3;
            while ($8657._ === 'List.cons') {
                _defn$3 = $8657.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8658 = self.file;
                        var $8659 = self.code;
                        var $8660 = self.orig;
                        var $8661 = self.name;
                        var $8662 = self.term;
                        var $8663 = self.type;
                        var $8664 = self.isct;
                        var $8665 = self.arit;
                        var $8666 = self.stat;
                        var self = $8666;
                        switch (self._) {
                            case 'Fm.Status.init':
                                var $8668 = _result$4;
                                var $8667 = $8668;
                                break;
                            case 'Fm.Status.wait':
                                var $8669 = _result$4;
                                var $8667 = $8669;
                                break;
                            case 'Fm.Status.done':
                                var _name$14 = $8661;
                                var _term$15 = Fm$Core$show$($8662, 0n, List$nil);
                                var _type$16 = Fm$Core$show$($8663, 0n, List$nil);
                                var $8670 = String$flatten$(List$cons$(_result$4, List$cons$(_name$14, List$cons$(" : ", List$cons$(_type$16, List$cons$(" = ", List$cons$(_term$15, List$cons$(";\u{a}", List$nil))))))));
                                var $8667 = $8670;
                                break;
                            case 'Fm.Status.fail':
                                var $8671 = self.errors;
                                var $8672 = _result$4;
                                var $8667 = $8672;
                                break;
                        };
                        var $8656 = $8667;
                        break;
                };
                _result$4 = $8656;
                $8657 = $8657.tail;
            }
            return _result$4;
        })();
        var $8654 = _result$3;
        return $8654;
    };
    const Fm$Defs$core = x0 => Fm$Defs$core$(x0);

    function Fm$to_core$io$one$(_name$1) {
        var $8673 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8674 = _m$bind$2;
            return $8674;
        }))(Fm$Synth$one$(_name$1, Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.none':
                    var $8676 = Map$new;
                    var _defs$3 = $8676;
                    break;
                case 'Maybe.some':
                    var $8677 = self.value;
                    var $8678 = $8677;
                    var _defs$3 = $8678;
                    break;
            };
            var _defs$4 = Map$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8680 = self.file;
                        var $8681 = self.code;
                        var $8682 = self.orig;
                        var $8683 = self.name;
                        var $8684 = self.term;
                        var $8685 = self.type;
                        var $8686 = self.isct;
                        var $8687 = self.arit;
                        var $8688 = self.stat;
                        var _term$14 = Fm$Term$inline$($8684, _defs$3);
                        var _type$15 = Fm$Term$inline$($8685, _defs$3);
                        var $8689 = Fm$Def$new$($8680, $8681, $8682, $8683, _term$14, _type$15, $8686, $8687, $8688);
                        var $8679 = $8689;
                        break;
                };
                return $8679;
            }), _defs$3);
            var $8675 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $8690 = _m$pure$6;
                return $8690;
            }))(Fm$Defs$core$(_defs$4));
            return $8675;
        }));
        return $8673;
    };
    const Fm$to_core$io$one = x0 => Fm$to_core$io$one$(x0);

    function IO$put_string$(_text$1) {
        var $8691 = IO$ask$("put_string", _text$1, (_skip$2 => {
            var $8692 = IO$end$(Unit$new);
            return $8692;
        }));
        return $8691;
    };
    const IO$put_string = x0 => IO$put_string$(x0);

    function IO$print$(_text$1) {
        var $8693 = IO$put_string$((_text$1 + "\u{a}"));
        return $8693;
    };
    const IO$print = x0 => IO$print$(x0);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.none':
                var $8695 = Maybe$none;
                var $8694 = $8695;
                break;
            case 'Maybe.some':
                var $8696 = self.value;
                var $8697 = _f$4($8696);
                var $8694 = $8697;
                break;
        };
        return $8694;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $8698 = _new$2(Maybe$bind)(Maybe$some);
        return $8698;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Fm$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8700 = self.name;
                var $8701 = self.indx;
                var $8702 = Maybe$none;
                var $8699 = $8702;
                break;
            case 'Fm.Term.ref':
                var $8703 = self.name;
                var self = ($8703 === "Nat.zero");
                if (self) {
                    var $8705 = Maybe$some$(0n);
                    var $8704 = $8705;
                } else {
                    var $8706 = Maybe$none;
                    var $8704 = $8706;
                };
                var $8699 = $8704;
                break;
            case 'Fm.Term.typ':
                var $8707 = Maybe$none;
                var $8699 = $8707;
                break;
            case 'Fm.Term.all':
                var $8708 = self.eras;
                var $8709 = self.self;
                var $8710 = self.name;
                var $8711 = self.xtyp;
                var $8712 = self.body;
                var $8713 = Maybe$none;
                var $8699 = $8713;
                break;
            case 'Fm.Term.lam':
                var $8714 = self.name;
                var $8715 = self.body;
                var $8716 = Maybe$none;
                var $8699 = $8716;
                break;
            case 'Fm.Term.app':
                var $8717 = self.func;
                var $8718 = self.argm;
                var self = $8717;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8720 = self.name;
                        var $8721 = self.indx;
                        var $8722 = Maybe$none;
                        var $8719 = $8722;
                        break;
                    case 'Fm.Term.ref':
                        var $8723 = self.name;
                        var self = ($8723 === "Nat.succ");
                        if (self) {
                            var $8725 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $8726 = _m$bind$5;
                                return $8726;
                            }))(Fm$Term$show$as_nat$go$($8718))((_pred$5 => {
                                var $8727 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $8728 = _m$pure$7;
                                    return $8728;
                                }))(Nat$succ$(_pred$5));
                                return $8727;
                            }));
                            var $8724 = $8725;
                        } else {
                            var $8729 = Maybe$none;
                            var $8724 = $8729;
                        };
                        var $8719 = $8724;
                        break;
                    case 'Fm.Term.typ':
                        var $8730 = Maybe$none;
                        var $8719 = $8730;
                        break;
                    case 'Fm.Term.all':
                        var $8731 = self.eras;
                        var $8732 = self.self;
                        var $8733 = self.name;
                        var $8734 = self.xtyp;
                        var $8735 = self.body;
                        var $8736 = Maybe$none;
                        var $8719 = $8736;
                        break;
                    case 'Fm.Term.lam':
                        var $8737 = self.name;
                        var $8738 = self.body;
                        var $8739 = Maybe$none;
                        var $8719 = $8739;
                        break;
                    case 'Fm.Term.app':
                        var $8740 = self.func;
                        var $8741 = self.argm;
                        var $8742 = Maybe$none;
                        var $8719 = $8742;
                        break;
                    case 'Fm.Term.let':
                        var $8743 = self.name;
                        var $8744 = self.expr;
                        var $8745 = self.body;
                        var $8746 = Maybe$none;
                        var $8719 = $8746;
                        break;
                    case 'Fm.Term.def':
                        var $8747 = self.name;
                        var $8748 = self.expr;
                        var $8749 = self.body;
                        var $8750 = Maybe$none;
                        var $8719 = $8750;
                        break;
                    case 'Fm.Term.ann':
                        var $8751 = self.done;
                        var $8752 = self.term;
                        var $8753 = self.type;
                        var $8754 = Maybe$none;
                        var $8719 = $8754;
                        break;
                    case 'Fm.Term.gol':
                        var $8755 = self.name;
                        var $8756 = self.dref;
                        var $8757 = self.verb;
                        var $8758 = Maybe$none;
                        var $8719 = $8758;
                        break;
                    case 'Fm.Term.hol':
                        var $8759 = self.path;
                        var $8760 = Maybe$none;
                        var $8719 = $8760;
                        break;
                    case 'Fm.Term.nat':
                        var $8761 = self.natx;
                        var $8762 = Maybe$none;
                        var $8719 = $8762;
                        break;
                    case 'Fm.Term.chr':
                        var $8763 = self.chrx;
                        var $8764 = Maybe$none;
                        var $8719 = $8764;
                        break;
                    case 'Fm.Term.str':
                        var $8765 = self.strx;
                        var $8766 = Maybe$none;
                        var $8719 = $8766;
                        break;
                    case 'Fm.Term.cse':
                        var $8767 = self.path;
                        var $8768 = self.expr;
                        var $8769 = self.name;
                        var $8770 = self.with;
                        var $8771 = self.cses;
                        var $8772 = self.moti;
                        var $8773 = Maybe$none;
                        var $8719 = $8773;
                        break;
                    case 'Fm.Term.ori':
                        var $8774 = self.orig;
                        var $8775 = self.expr;
                        var $8776 = Maybe$none;
                        var $8719 = $8776;
                        break;
                };
                var $8699 = $8719;
                break;
            case 'Fm.Term.let':
                var $8777 = self.name;
                var $8778 = self.expr;
                var $8779 = self.body;
                var $8780 = Maybe$none;
                var $8699 = $8780;
                break;
            case 'Fm.Term.def':
                var $8781 = self.name;
                var $8782 = self.expr;
                var $8783 = self.body;
                var $8784 = Maybe$none;
                var $8699 = $8784;
                break;
            case 'Fm.Term.ann':
                var $8785 = self.done;
                var $8786 = self.term;
                var $8787 = self.type;
                var $8788 = Maybe$none;
                var $8699 = $8788;
                break;
            case 'Fm.Term.gol':
                var $8789 = self.name;
                var $8790 = self.dref;
                var $8791 = self.verb;
                var $8792 = Maybe$none;
                var $8699 = $8792;
                break;
            case 'Fm.Term.hol':
                var $8793 = self.path;
                var $8794 = Maybe$none;
                var $8699 = $8794;
                break;
            case 'Fm.Term.nat':
                var $8795 = self.natx;
                var $8796 = Maybe$none;
                var $8699 = $8796;
                break;
            case 'Fm.Term.chr':
                var $8797 = self.chrx;
                var $8798 = Maybe$none;
                var $8699 = $8798;
                break;
            case 'Fm.Term.str':
                var $8799 = self.strx;
                var $8800 = Maybe$none;
                var $8699 = $8800;
                break;
            case 'Fm.Term.cse':
                var $8801 = self.path;
                var $8802 = self.expr;
                var $8803 = self.name;
                var $8804 = self.with;
                var $8805 = self.cses;
                var $8806 = self.moti;
                var $8807 = Maybe$none;
                var $8699 = $8807;
                break;
            case 'Fm.Term.ori':
                var $8808 = self.orig;
                var $8809 = self.expr;
                var $8810 = Maybe$none;
                var $8699 = $8810;
                break;
        };
        return $8699;
    };
    const Fm$Term$show$as_nat$go = x0 => Fm$Term$show$as_nat$go$(x0);

    function Fm$Term$show$as_nat$(_term$1) {
        var $8811 = Maybe$mapped$(Fm$Term$show$as_nat$go$(_term$1), Nat$show);
        return $8811;
    };
    const Fm$Term$show$as_nat = x0 => Fm$Term$show$as_nat$(x0);

    function Fm$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8813 = self.name;
                var $8814 = self.indx;
                var $8815 = Bool$false;
                var $8812 = $8815;
                break;
            case 'Fm.Term.ref':
                var $8816 = self.name;
                var $8817 = (_name$2 === $8816);
                var $8812 = $8817;
                break;
            case 'Fm.Term.typ':
                var $8818 = Bool$false;
                var $8812 = $8818;
                break;
            case 'Fm.Term.all':
                var $8819 = self.eras;
                var $8820 = self.self;
                var $8821 = self.name;
                var $8822 = self.xtyp;
                var $8823 = self.body;
                var $8824 = Bool$false;
                var $8812 = $8824;
                break;
            case 'Fm.Term.lam':
                var $8825 = self.name;
                var $8826 = self.body;
                var $8827 = Bool$false;
                var $8812 = $8827;
                break;
            case 'Fm.Term.app':
                var $8828 = self.func;
                var $8829 = self.argm;
                var $8830 = Bool$false;
                var $8812 = $8830;
                break;
            case 'Fm.Term.let':
                var $8831 = self.name;
                var $8832 = self.expr;
                var $8833 = self.body;
                var $8834 = Bool$false;
                var $8812 = $8834;
                break;
            case 'Fm.Term.def':
                var $8835 = self.name;
                var $8836 = self.expr;
                var $8837 = self.body;
                var $8838 = Bool$false;
                var $8812 = $8838;
                break;
            case 'Fm.Term.ann':
                var $8839 = self.done;
                var $8840 = self.term;
                var $8841 = self.type;
                var $8842 = Bool$false;
                var $8812 = $8842;
                break;
            case 'Fm.Term.gol':
                var $8843 = self.name;
                var $8844 = self.dref;
                var $8845 = self.verb;
                var $8846 = Bool$false;
                var $8812 = $8846;
                break;
            case 'Fm.Term.hol':
                var $8847 = self.path;
                var $8848 = Bool$false;
                var $8812 = $8848;
                break;
            case 'Fm.Term.nat':
                var $8849 = self.natx;
                var $8850 = Bool$false;
                var $8812 = $8850;
                break;
            case 'Fm.Term.chr':
                var $8851 = self.chrx;
                var $8852 = Bool$false;
                var $8812 = $8852;
                break;
            case 'Fm.Term.str':
                var $8853 = self.strx;
                var $8854 = Bool$false;
                var $8812 = $8854;
                break;
            case 'Fm.Term.cse':
                var $8855 = self.path;
                var $8856 = self.expr;
                var $8857 = self.name;
                var $8858 = self.with;
                var $8859 = self.cses;
                var $8860 = self.moti;
                var $8861 = Bool$false;
                var $8812 = $8861;
                break;
            case 'Fm.Term.ori':
                var $8862 = self.orig;
                var $8863 = self.expr;
                var $8864 = Bool$false;
                var $8812 = $8864;
                break;
        };
        return $8812;
    };
    const Fm$Term$show$is_ref = x0 => x1 => Fm$Term$show$is_ref$(x0, x1);

    function Fm$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Fm$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$("?", List$at$(1n, _args$3));
            var _eq_rgt$7 = Maybe$default$("?", List$at$(2n, _args$3));
            var $8866 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $8865 = $8866;
        } else {
            var _func$5 = Fm$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $8868 = Bool$false;
                var _wrap$6 = $8868;
            } else {
                var $8869 = self.charCodeAt(0);
                var $8870 = self.slice(1);
                var $8871 = ($8869 === 40);
                var _wrap$6 = $8871;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $8872 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $8872;
            } else {
                var $8873 = _func$5;
                var _func$8 = $8873;
            };
            var $8867 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $8865 = $8867;
        };
        return $8865;
    };
    const Fm$Term$show$app$done = x0 => x1 => x2 => Fm$Term$show$app$done$(x0, x1, x2);

    function Fm$Term$show$app$(_term$1, _path$2, _args$3) {
        var Fm$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Fm$Term$show$app = _term$1 => _path$2 => _args$3 => Fm$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8874 = self.name;
                        var $8875 = self.indx;
                        var $8876 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8876;
                    case 'Fm.Term.ref':
                        var $8877 = self.name;
                        var $8878 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8878;
                    case 'Fm.Term.typ':
                        var $8879 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8879;
                    case 'Fm.Term.all':
                        var $8880 = self.eras;
                        var $8881 = self.self;
                        var $8882 = self.name;
                        var $8883 = self.xtyp;
                        var $8884 = self.body;
                        var $8885 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8885;
                    case 'Fm.Term.lam':
                        var $8886 = self.name;
                        var $8887 = self.body;
                        var $8888 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8888;
                    case 'Fm.Term.app':
                        var $8889 = self.func;
                        var $8890 = self.argm;
                        var $8891 = Fm$Term$show$app$($8889, Fm$MPath$o$(_path$2), List$cons$(Fm$Term$show$go$($8890, Fm$MPath$i$(_path$2)), _args$3));
                        return $8891;
                    case 'Fm.Term.let':
                        var $8892 = self.name;
                        var $8893 = self.expr;
                        var $8894 = self.body;
                        var $8895 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8895;
                    case 'Fm.Term.def':
                        var $8896 = self.name;
                        var $8897 = self.expr;
                        var $8898 = self.body;
                        var $8899 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8899;
                    case 'Fm.Term.ann':
                        var $8900 = self.done;
                        var $8901 = self.term;
                        var $8902 = self.type;
                        var $8903 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8903;
                    case 'Fm.Term.gol':
                        var $8904 = self.name;
                        var $8905 = self.dref;
                        var $8906 = self.verb;
                        var $8907 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8907;
                    case 'Fm.Term.hol':
                        var $8908 = self.path;
                        var $8909 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8909;
                    case 'Fm.Term.nat':
                        var $8910 = self.natx;
                        var $8911 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8911;
                    case 'Fm.Term.chr':
                        var $8912 = self.chrx;
                        var $8913 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8913;
                    case 'Fm.Term.str':
                        var $8914 = self.strx;
                        var $8915 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8915;
                    case 'Fm.Term.cse':
                        var $8916 = self.path;
                        var $8917 = self.expr;
                        var $8918 = self.name;
                        var $8919 = self.with;
                        var $8920 = self.cses;
                        var $8921 = self.moti;
                        var $8922 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8922;
                    case 'Fm.Term.ori':
                        var $8923 = self.orig;
                        var $8924 = self.expr;
                        var $8925 = Fm$Term$show$app$($8924, _path$2, _args$3);
                        return $8925;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Term$show$app = x0 => x1 => x2 => Fm$Term$show$app$(x0, x1, x2);

    function Map$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $8927 = _list$4;
                var $8926 = $8927;
                break;
            case 'Map.tie':
                var $8928 = self.val;
                var $8929 = self.lft;
                var $8930 = self.rgt;
                var self = $8928;
                switch (self._) {
                    case 'Maybe.none':
                        var $8932 = _list$4;
                        var _list0$8 = $8932;
                        break;
                    case 'Maybe.some':
                        var $8933 = self.value;
                        var $8934 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $8933), _list$4);
                        var _list0$8 = $8934;
                        break;
                };
                var _list1$9 = Map$to_list$go$($8929, (_key$3 + '0'), _list0$8);
                var _list2$10 = Map$to_list$go$($8930, (_key$3 + '1'), _list1$9);
                var $8931 = _list2$10;
                var $8926 = $8931;
                break;
        };
        return $8926;
    };
    const Map$to_list$go = x0 => x1 => x2 => Map$to_list$go$(x0, x1, x2);

    function Map$to_list$(_xs$2) {
        var $8935 = List$reverse$(Map$to_list$go$(_xs$2, Bits$e, List$nil));
        return $8935;
    };
    const Map$to_list = x0 => Map$to_list$(x0);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $8937 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $8936 = $8937;
                break;
            case 'o':
                var $8938 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $8940 = List$cons$(_head$6, _tail$7);
                    var $8939 = $8940;
                } else {
                    var $8941 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $8942 = Bits$chunks_of$go$(_len$1, $8938, $8941, _chunk$7);
                    var $8939 = $8942;
                };
                var $8936 = $8939;
                break;
            case 'i':
                var $8943 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $8945 = List$cons$(_head$6, _tail$7);
                    var $8944 = $8945;
                } else {
                    var $8946 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $8947 = Bits$chunks_of$go$(_len$1, $8943, $8946, _chunk$7);
                    var $8944 = $8947;
                };
                var $8936 = $8944;
                break;
        };
        return $8936;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $8948 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $8948;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $8950 = Word$e;
            var $8949 = $8950;
        } else {
            var $8951 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'e':
                    var $8953 = Word$o$(Word$from_bits$($8951, Bits$e));
                    var $8952 = $8953;
                    break;
                case 'o':
                    var $8954 = self.slice(0, -1);
                    var $8955 = Word$o$(Word$from_bits$($8951, $8954));
                    var $8952 = $8955;
                    break;
                case 'i':
                    var $8956 = self.slice(0, -1);
                    var $8957 = Word$i$(Word$from_bits$($8951, $8956));
                    var $8952 = $8957;
                    break;
            };
            var $8949 = $8952;
        };
        return $8949;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Fm$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $8960 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $8960;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $8962 = ((_u16$5 + 71) & 0xFFFF);
                    var $8961 = $8962;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $8964 = (Math.max(_u16$5 - 4, 0));
                        var $8963 = $8964;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $8966 = 46;
                            var $8965 = $8966;
                        } else {
                            var $8967 = 95;
                            var $8965 = $8967;
                        };
                        var $8963 = $8965;
                    };
                    var $8961 = $8963;
                };
                var _chr$6 = $8961;
            };
            var $8959 = String$cons$(_chr$6, _name$4);
            return $8959;
        }));
        var $8958 = _name$3;
        return $8958;
    };
    const Fm$Name$from_bits = x0 => Fm$Name$from_bits$(x0);

    function Fm$Term$show$go$(_term$1, _path$2) {
        var self = Fm$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8970 = self.name;
                        var $8971 = self.indx;
                        var $8972 = Fm$Name$show$($8970);
                        var $8969 = $8972;
                        break;
                    case 'Fm.Term.ref':
                        var $8973 = self.name;
                        var _name$4 = Fm$Name$show$($8973);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8975 = _name$4;
                                var $8974 = $8975;
                                break;
                            case 'Maybe.some':
                                var $8976 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Fm$Path$to_bits$($8976));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $8977 = String$flatten$(List$cons$(_name$4, List$cons$(Fm$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $8974 = $8977;
                                break;
                        };
                        var $8969 = $8974;
                        break;
                    case 'Fm.Term.typ':
                        var $8978 = "Type";
                        var $8969 = $8978;
                        break;
                    case 'Fm.Term.all':
                        var $8979 = self.eras;
                        var $8980 = self.self;
                        var $8981 = self.name;
                        var $8982 = self.xtyp;
                        var $8983 = self.body;
                        var _eras$8 = $8979;
                        var _self$9 = Fm$Name$show$($8980);
                        var _name$10 = Fm$Name$show$($8981);
                        var _type$11 = Fm$Term$show$go$($8982, Fm$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $8985 = "<";
                            var _open$12 = $8985;
                        } else {
                            var $8986 = "(";
                            var _open$12 = $8986;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $8987 = ">";
                            var _clos$13 = $8987;
                        } else {
                            var $8988 = ")";
                            var _clos$13 = $8988;
                        };
                        var _body$14 = Fm$Term$show$go$($8983(Fm$Term$var$($8980, 0n))(Fm$Term$var$($8981, 0n)), Fm$MPath$i$(_path$2));
                        var $8984 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $8969 = $8984;
                        break;
                    case 'Fm.Term.lam':
                        var $8989 = self.name;
                        var $8990 = self.body;
                        var _name$5 = Fm$Name$show$($8989);
                        var _body$6 = Fm$Term$show$go$($8990(Fm$Term$var$($8989, 0n)), Fm$MPath$o$(_path$2));
                        var $8991 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $8969 = $8991;
                        break;
                    case 'Fm.Term.app':
                        var $8992 = self.func;
                        var $8993 = self.argm;
                        var $8994 = Fm$Term$show$app$(_term$1, _path$2, List$nil);
                        var $8969 = $8994;
                        break;
                    case 'Fm.Term.let':
                        var $8995 = self.name;
                        var $8996 = self.expr;
                        var $8997 = self.body;
                        var _name$6 = Fm$Name$show$($8995);
                        var _expr$7 = Fm$Term$show$go$($8996, Fm$MPath$o$(_path$2));
                        var _body$8 = Fm$Term$show$go$($8997(Fm$Term$var$($8995, 0n)), Fm$MPath$i$(_path$2));
                        var $8998 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8969 = $8998;
                        break;
                    case 'Fm.Term.def':
                        var $8999 = self.name;
                        var $9000 = self.expr;
                        var $9001 = self.body;
                        var _name$6 = Fm$Name$show$($8999);
                        var _expr$7 = Fm$Term$show$go$($9000, Fm$MPath$o$(_path$2));
                        var _body$8 = Fm$Term$show$go$($9001(Fm$Term$var$($8999, 0n)), Fm$MPath$i$(_path$2));
                        var $9002 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8969 = $9002;
                        break;
                    case 'Fm.Term.ann':
                        var $9003 = self.done;
                        var $9004 = self.term;
                        var $9005 = self.type;
                        var _term$6 = Fm$Term$show$go$($9004, Fm$MPath$o$(_path$2));
                        var _type$7 = Fm$Term$show$go$($9005, Fm$MPath$i$(_path$2));
                        var $9006 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $8969 = $9006;
                        break;
                    case 'Fm.Term.gol':
                        var $9007 = self.name;
                        var $9008 = self.dref;
                        var $9009 = self.verb;
                        var _name$6 = Fm$Name$show$($9007);
                        var $9010 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $8969 = $9010;
                        break;
                    case 'Fm.Term.hol':
                        var $9011 = self.path;
                        var $9012 = "_";
                        var $8969 = $9012;
                        break;
                    case 'Fm.Term.nat':
                        var $9013 = self.natx;
                        var $9014 = String$flatten$(List$cons$(Nat$show$($9013), List$nil));
                        var $8969 = $9014;
                        break;
                    case 'Fm.Term.chr':
                        var $9015 = self.chrx;
                        var $9016 = String$flatten$(List$cons$("\'", List$cons$(Fm$escape$char$($9015), List$cons$("\'", List$nil))));
                        var $8969 = $9016;
                        break;
                    case 'Fm.Term.str':
                        var $9017 = self.strx;
                        var $9018 = String$flatten$(List$cons$("\"", List$cons$(Fm$escape$($9017), List$cons$("\"", List$nil))));
                        var $8969 = $9018;
                        break;
                    case 'Fm.Term.cse':
                        var $9019 = self.path;
                        var $9020 = self.expr;
                        var $9021 = self.name;
                        var $9022 = self.with;
                        var $9023 = self.cses;
                        var $9024 = self.moti;
                        var _expr$9 = Fm$Term$show$go$($9020, Fm$MPath$o$(_path$2));
                        var _name$10 = Fm$Name$show$($9021);
                        var _wyth$11 = String$join$("", List$mapped$($9022, (_defn$11 => {
                            var self = _defn$11;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $9027 = self.file;
                                    var $9028 = self.code;
                                    var $9029 = self.orig;
                                    var $9030 = self.name;
                                    var $9031 = self.term;
                                    var $9032 = self.type;
                                    var $9033 = self.isct;
                                    var $9034 = self.arit;
                                    var $9035 = self.stat;
                                    var _name$21 = Fm$Name$show$($9030);
                                    var _type$22 = Fm$Term$show$go$($9032, Maybe$none);
                                    var _term$23 = Fm$Term$show$go$($9031, Maybe$none);
                                    var $9036 = String$flatten$(List$cons$(_name$21, List$cons$(": ", List$cons$(_type$22, List$cons$(" = ", List$cons$(_term$23, List$cons$(";", List$nil)))))));
                                    var $9026 = $9036;
                                    break;
                            };
                            return $9026;
                        })));
                        var _cses$12 = Map$to_list$($9023);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Fm$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Fm$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $9037 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $9037;
                        })));
                        var self = $9024;
                        switch (self._) {
                            case 'Maybe.none':
                                var $9038 = "";
                                var _moti$14 = $9038;
                                break;
                            case 'Maybe.some':
                                var $9039 = self.value;
                                var $9040 = String$flatten$(List$cons$(": ", List$cons$(Fm$Term$show$go$($9039, Maybe$none), List$nil)));
                                var _moti$14 = $9040;
                                break;
                        };
                        var $9025 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $8969 = $9025;
                        break;
                    case 'Fm.Term.ori':
                        var $9041 = self.orig;
                        var $9042 = self.expr;
                        var $9043 = Fm$Term$show$go$($9042, _path$2);
                        var $8969 = $9043;
                        break;
                };
                var $8968 = $8969;
                break;
            case 'Maybe.some':
                var $9044 = self.value;
                var $9045 = $9044;
                var $8968 = $9045;
                break;
        };
        return $8968;
    };
    const Fm$Term$show$go = x0 => x1 => Fm$Term$show$go$(x0, x1);

    function Fm$Term$show$(_term$1) {
        var $9046 = Fm$Term$show$go$(_term$1, Maybe$none);
        return $9046;
    };
    const Fm$Term$show = x0 => Fm$Term$show$(x0);

    function Fm$Defs$report$types$(_defs$1, _names$2) {
        var _types$3 = "";
        var _types$4 = (() => {
            var $9049 = _types$3;
            var $9050 = _names$2;
            let _types$5 = $9049;
            let _name$4;
            while ($9050._ === 'List.cons') {
                _name$4 = $9050.head;
                var self = Fm$get$(_name$4, _defs$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $9051 = _types$5;
                        var $9049 = $9051;
                        break;
                    case 'Maybe.some':
                        var $9052 = self.value;
                        var self = $9052;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $9054 = self.file;
                                var $9055 = self.code;
                                var $9056 = self.orig;
                                var $9057 = self.name;
                                var $9058 = self.term;
                                var $9059 = self.type;
                                var $9060 = self.isct;
                                var $9061 = self.arit;
                                var $9062 = self.stat;
                                var $9063 = (_types$5 + (_name$4 + (": " + (Fm$Term$show$($9059) + "\u{a}"))));
                                var $9053 = $9063;
                                break;
                        };
                        var $9049 = $9053;
                        break;
                };
                _types$5 = $9049;
                $9050 = $9050.tail;
            }
            return _types$5;
        })();
        var $9047 = _types$4;
        return $9047;
    };
    const Fm$Defs$report$types = x0 => x1 => Fm$Defs$report$types$(x0, x1);

    function Map$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $9065 = _list$4;
                var $9064 = $9065;
                break;
            case 'Map.tie':
                var $9066 = self.val;
                var $9067 = self.lft;
                var $9068 = self.rgt;
                var self = $9066;
                switch (self._) {
                    case 'Maybe.none':
                        var $9070 = _list$4;
                        var _list0$8 = $9070;
                        break;
                    case 'Maybe.some':
                        var $9071 = self.value;
                        var $9072 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $9072;
                        break;
                };
                var _list1$9 = Map$keys$go$($9067, (_key$3 + '0'), _list0$8);
                var _list2$10 = Map$keys$go$($9068, (_key$3 + '1'), _list1$9);
                var $9069 = _list2$10;
                var $9064 = $9069;
                break;
        };
        return $9064;
    };
    const Map$keys$go = x0 => x1 => x2 => Map$keys$go$(x0, x1, x2);

    function Map$keys$(_xs$2) {
        var $9073 = List$reverse$(Map$keys$go$(_xs$2, Bits$e, List$nil));
        return $9073;
    };
    const Map$keys = x0 => Map$keys$(x0);

    function Fm$Error$relevant$(_errors$1, _got$2) {
        var self = _errors$1;
        switch (self._) {
            case 'List.nil':
                var $9075 = List$nil;
                var $9074 = $9075;
                break;
            case 'List.cons':
                var $9076 = self.head;
                var $9077 = self.tail;
                var self = $9076;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $9079 = self.origin;
                        var $9080 = self.expected;
                        var $9081 = self.detected;
                        var $9082 = self.context;
                        var $9083 = (!_got$2);
                        var _keep$5 = $9083;
                        break;
                    case 'Fm.Error.show_goal':
                        var $9084 = self.name;
                        var $9085 = self.dref;
                        var $9086 = self.verb;
                        var $9087 = self.goal;
                        var $9088 = self.context;
                        var $9089 = Bool$true;
                        var _keep$5 = $9089;
                        break;
                    case 'Fm.Error.waiting':
                        var $9090 = self.name;
                        var $9091 = Bool$false;
                        var _keep$5 = $9091;
                        break;
                    case 'Fm.Error.indirect':
                        var $9092 = self.name;
                        var $9093 = Bool$false;
                        var _keep$5 = $9093;
                        break;
                    case 'Fm.Error.patch':
                        var $9094 = self.path;
                        var $9095 = self.term;
                        var $9096 = Bool$false;
                        var _keep$5 = $9096;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $9097 = self.origin;
                        var $9098 = self.name;
                        var $9099 = (!_got$2);
                        var _keep$5 = $9099;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $9100 = self.origin;
                        var $9101 = self.term;
                        var $9102 = self.context;
                        var $9103 = (!_got$2);
                        var _keep$5 = $9103;
                        break;
                };
                var self = $9076;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $9104 = self.origin;
                        var $9105 = self.expected;
                        var $9106 = self.detected;
                        var $9107 = self.context;
                        var $9108 = Bool$true;
                        var _got$6 = $9108;
                        break;
                    case 'Fm.Error.show_goal':
                        var $9109 = self.name;
                        var $9110 = self.dref;
                        var $9111 = self.verb;
                        var $9112 = self.goal;
                        var $9113 = self.context;
                        var $9114 = _got$2;
                        var _got$6 = $9114;
                        break;
                    case 'Fm.Error.waiting':
                        var $9115 = self.name;
                        var $9116 = _got$2;
                        var _got$6 = $9116;
                        break;
                    case 'Fm.Error.indirect':
                        var $9117 = self.name;
                        var $9118 = _got$2;
                        var _got$6 = $9118;
                        break;
                    case 'Fm.Error.patch':
                        var $9119 = self.path;
                        var $9120 = self.term;
                        var $9121 = _got$2;
                        var _got$6 = $9121;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $9122 = self.origin;
                        var $9123 = self.name;
                        var $9124 = Bool$true;
                        var _got$6 = $9124;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $9125 = self.origin;
                        var $9126 = self.term;
                        var $9127 = self.context;
                        var $9128 = _got$2;
                        var _got$6 = $9128;
                        break;
                };
                var _tail$7 = Fm$Error$relevant$($9077, _got$6);
                var self = _keep$5;
                if (self) {
                    var $9129 = List$cons$($9076, _tail$7);
                    var $9078 = $9129;
                } else {
                    var $9130 = _tail$7;
                    var $9078 = $9130;
                };
                var $9074 = $9078;
                break;
        };
        return $9074;
    };
    const Fm$Error$relevant = x0 => x1 => Fm$Error$relevant$(x0, x1);

    function Fm$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.nil':
                var $9132 = "";
                var $9131 = $9132;
                break;
            case 'List.cons':
                var $9133 = self.head;
                var $9134 = self.tail;
                var self = $9133;
                switch (self._) {
                    case 'Pair.new':
                        var $9136 = self.fst;
                        var $9137 = self.snd;
                        var _name$6 = Fm$Name$show$($9136);
                        var _type$7 = Fm$Term$show$(Fm$Term$normalize$($9137, Map$new));
                        var _rest$8 = Fm$Context$show$($9134);
                        var $9138 = String$flatten$(List$cons$(_rest$8, List$cons$("- ", List$cons$(_name$6, List$cons$(": ", List$cons$(_type$7, List$cons$("\u{a}", List$nil)))))));
                        var $9135 = $9138;
                        break;
                };
                var $9131 = $9135;
                break;
        };
        return $9131;
    };
    const Fm$Context$show = x0 => Fm$Context$show$(x0);

    function Fm$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $9139 = Fm$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Fm.Term.var':
                    var $9141 = self.name;
                    var $9142 = self.indx;
                    var $9143 = _term$4;
                    var $9140 = $9143;
                    break;
                case 'Fm.Term.ref':
                    var $9144 = self.name;
                    var self = Fm$get$($9144, _defs$3);
                    switch (self._) {
                        case 'Maybe.none':
                            var $9146 = Fm$Term$ref$($9144);
                            var $9145 = $9146;
                            break;
                        case 'Maybe.some':
                            var $9147 = self.value;
                            var self = $9147;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $9149 = self.file;
                                    var $9150 = self.code;
                                    var $9151 = self.orig;
                                    var $9152 = self.name;
                                    var $9153 = self.term;
                                    var $9154 = self.type;
                                    var $9155 = self.isct;
                                    var $9156 = self.arit;
                                    var $9157 = self.stat;
                                    var $9158 = $9153;
                                    var $9148 = $9158;
                                    break;
                            };
                            var $9145 = $9148;
                            break;
                    };
                    var $9140 = $9145;
                    break;
                case 'Fm.Term.typ':
                    var $9159 = _term$4;
                    var $9140 = $9159;
                    break;
                case 'Fm.Term.all':
                    var $9160 = self.eras;
                    var $9161 = self.self;
                    var $9162 = self.name;
                    var $9163 = self.xtyp;
                    var $9164 = self.body;
                    var $9165 = _term$4;
                    var $9140 = $9165;
                    break;
                case 'Fm.Term.lam':
                    var $9166 = self.name;
                    var $9167 = self.body;
                    var $9168 = _term$4;
                    var $9140 = $9168;
                    break;
                case 'Fm.Term.app':
                    var $9169 = self.func;
                    var $9170 = self.argm;
                    var $9171 = _term$4;
                    var $9140 = $9171;
                    break;
                case 'Fm.Term.let':
                    var $9172 = self.name;
                    var $9173 = self.expr;
                    var $9174 = self.body;
                    var $9175 = _term$4;
                    var $9140 = $9175;
                    break;
                case 'Fm.Term.def':
                    var $9176 = self.name;
                    var $9177 = self.expr;
                    var $9178 = self.body;
                    var $9179 = _term$4;
                    var $9140 = $9179;
                    break;
                case 'Fm.Term.ann':
                    var $9180 = self.done;
                    var $9181 = self.term;
                    var $9182 = self.type;
                    var $9183 = _term$4;
                    var $9140 = $9183;
                    break;
                case 'Fm.Term.gol':
                    var $9184 = self.name;
                    var $9185 = self.dref;
                    var $9186 = self.verb;
                    var $9187 = _term$4;
                    var $9140 = $9187;
                    break;
                case 'Fm.Term.hol':
                    var $9188 = self.path;
                    var $9189 = _term$4;
                    var $9140 = $9189;
                    break;
                case 'Fm.Term.nat':
                    var $9190 = self.natx;
                    var $9191 = _term$4;
                    var $9140 = $9191;
                    break;
                case 'Fm.Term.chr':
                    var $9192 = self.chrx;
                    var $9193 = _term$4;
                    var $9140 = $9193;
                    break;
                case 'Fm.Term.str':
                    var $9194 = self.strx;
                    var $9195 = _term$4;
                    var $9140 = $9195;
                    break;
                case 'Fm.Term.cse':
                    var $9196 = self.path;
                    var $9197 = self.expr;
                    var $9198 = self.name;
                    var $9199 = self.with;
                    var $9200 = self.cses;
                    var $9201 = self.moti;
                    var $9202 = _term$4;
                    var $9140 = $9202;
                    break;
                case 'Fm.Term.ori':
                    var $9203 = self.orig;
                    var $9204 = self.expr;
                    var $9205 = _term$4;
                    var $9140 = $9205;
                    break;
            };
            return $9140;
        }));
        return $9139;
    };
    const Fm$Term$expand_at = x0 => x1 => x2 => Fm$Term$expand_at$(x0, x1, x2);

    function Fm$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $9207 = self.name;
                var $9208 = self.indx;
                var $9209 = Fm$Term$var$($9207, $9208);
                var $9206 = $9209;
                break;
            case 'Fm.Term.ref':
                var $9210 = self.name;
                var self = Fm$get$($9210, _defs$2);
                switch (self._) {
                    case 'Maybe.none':
                        var $9212 = Fm$Term$ref$($9210);
                        var $9211 = $9212;
                        break;
                    case 'Maybe.some':
                        var $9213 = self.value;
                        var self = $9213;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $9215 = self.file;
                                var $9216 = self.code;
                                var $9217 = self.orig;
                                var $9218 = self.name;
                                var $9219 = self.term;
                                var $9220 = self.type;
                                var $9221 = self.isct;
                                var $9222 = self.arit;
                                var $9223 = self.stat;
                                var self = ($9221 && (_arity$3 > $9222));
                                if (self) {
                                    var $9225 = $9219;
                                    var $9224 = $9225;
                                } else {
                                    var $9226 = Fm$Term$ref$($9210);
                                    var $9224 = $9226;
                                };
                                var $9214 = $9224;
                                break;
                        };
                        var $9211 = $9214;
                        break;
                };
                var $9206 = $9211;
                break;
            case 'Fm.Term.typ':
                var $9227 = Fm$Term$typ;
                var $9206 = $9227;
                break;
            case 'Fm.Term.all':
                var $9228 = self.eras;
                var $9229 = self.self;
                var $9230 = self.name;
                var $9231 = self.xtyp;
                var $9232 = self.body;
                var $9233 = Fm$Term$all$($9228, $9229, $9230, Fm$Term$expand_ct$($9231, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $9234 = Fm$Term$expand_ct$($9232(_s$9)(_x$10), _defs$2, 0n);
                    return $9234;
                }));
                var $9206 = $9233;
                break;
            case 'Fm.Term.lam':
                var $9235 = self.name;
                var $9236 = self.body;
                var $9237 = Fm$Term$lam$($9235, (_x$6 => {
                    var $9238 = Fm$Term$expand_ct$($9236(_x$6), _defs$2, 0n);
                    return $9238;
                }));
                var $9206 = $9237;
                break;
            case 'Fm.Term.app':
                var $9239 = self.func;
                var $9240 = self.argm;
                var $9241 = Fm$Term$app$(Fm$Term$expand_ct$($9239, _defs$2, Nat$succ$(_arity$3)), Fm$Term$expand_ct$($9240, _defs$2, 0n));
                var $9206 = $9241;
                break;
            case 'Fm.Term.let':
                var $9242 = self.name;
                var $9243 = self.expr;
                var $9244 = self.body;
                var $9245 = Fm$Term$let$($9242, Fm$Term$expand_ct$($9243, _defs$2, 0n), (_x$7 => {
                    var $9246 = Fm$Term$expand_ct$($9244(_x$7), _defs$2, 0n);
                    return $9246;
                }));
                var $9206 = $9245;
                break;
            case 'Fm.Term.def':
                var $9247 = self.name;
                var $9248 = self.expr;
                var $9249 = self.body;
                var $9250 = Fm$Term$def$($9247, Fm$Term$expand_ct$($9248, _defs$2, 0n), (_x$7 => {
                    var $9251 = Fm$Term$expand_ct$($9249(_x$7), _defs$2, 0n);
                    return $9251;
                }));
                var $9206 = $9250;
                break;
            case 'Fm.Term.ann':
                var $9252 = self.done;
                var $9253 = self.term;
                var $9254 = self.type;
                var $9255 = Fm$Term$ann$($9252, Fm$Term$expand_ct$($9253, _defs$2, 0n), Fm$Term$expand_ct$($9254, _defs$2, 0n));
                var $9206 = $9255;
                break;
            case 'Fm.Term.gol':
                var $9256 = self.name;
                var $9257 = self.dref;
                var $9258 = self.verb;
                var $9259 = Fm$Term$gol$($9256, $9257, $9258);
                var $9206 = $9259;
                break;
            case 'Fm.Term.hol':
                var $9260 = self.path;
                var $9261 = Fm$Term$hol$($9260);
                var $9206 = $9261;
                break;
            case 'Fm.Term.nat':
                var $9262 = self.natx;
                var $9263 = Fm$Term$nat$($9262);
                var $9206 = $9263;
                break;
            case 'Fm.Term.chr':
                var $9264 = self.chrx;
                var $9265 = Fm$Term$chr$($9264);
                var $9206 = $9265;
                break;
            case 'Fm.Term.str':
                var $9266 = self.strx;
                var $9267 = Fm$Term$str$($9266);
                var $9206 = $9267;
                break;
            case 'Fm.Term.cse':
                var $9268 = self.path;
                var $9269 = self.expr;
                var $9270 = self.name;
                var $9271 = self.with;
                var $9272 = self.cses;
                var $9273 = self.moti;
                var $9274 = _term$1;
                var $9206 = $9274;
                break;
            case 'Fm.Term.ori':
                var $9275 = self.orig;
                var $9276 = self.expr;
                var $9277 = Fm$Term$ori$($9275, $9276);
                var $9206 = $9277;
                break;
        };
        return $9206;
    };
    const Fm$Term$expand_ct = x0 => x1 => x2 => Fm$Term$expand_ct$(x0, x1, x2);

    function Fm$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Fm$Term$normalize$(_term$2, Map$new);
        var _term$5 = (() => {
            var $9280 = _term$4;
            var $9281 = _dref$1;
            let _term$6 = $9280;
            let _path$5;
            while ($9281._ === 'List.cons') {
                _path$5 = $9281.head;
                var _term$7 = Fm$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Fm$Term$normalize$(_term$7, Map$new);
                var _term$9 = Fm$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Fm$Term$normalize$(_term$9, Map$new);
                var $9280 = _term$10;
                _term$6 = $9280;
                $9281 = $9281.tail;
            }
            return _term$6;
        })();
        var $9278 = _term$5;
        return $9278;
    };
    const Fm$Term$expand = x0 => x1 => x2 => Fm$Term$expand$(x0, x1, x2);

    function Fm$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Fm.Error.type_mismatch':
                var $9283 = self.origin;
                var $9284 = self.expected;
                var $9285 = self.detected;
                var $9286 = self.context;
                var self = $9284;
                switch (self._) {
                    case 'Either.left':
                        var $9288 = self.value;
                        var $9289 = $9288;
                        var _expected$7 = $9289;
                        break;
                    case 'Either.right':
                        var $9290 = self.value;
                        var $9291 = Fm$Term$show$(Fm$Term$normalize$($9290, Map$new));
                        var _expected$7 = $9291;
                        break;
                };
                var self = $9285;
                switch (self._) {
                    case 'Either.left':
                        var $9292 = self.value;
                        var $9293 = $9292;
                        var _detected$8 = $9293;
                        break;
                    case 'Either.right':
                        var $9294 = self.value;
                        var $9295 = Fm$Term$show$(Fm$Term$normalize$($9294, Map$new));
                        var _detected$8 = $9295;
                        break;
                };
                var $9287 = String$flatten$(List$cons$("Type mismatch.\u{a}", List$cons$("- Expected: ", List$cons$(_expected$7, List$cons$("\u{a}", List$cons$("- Detected: ", List$cons$(_detected$8, List$cons$("\u{a}", List$cons$((() => {
                    var self = $9286;
                    switch (self._) {
                        case 'List.nil':
                            var $9296 = "";
                            return $9296;
                        case 'List.cons':
                            var $9297 = self.head;
                            var $9298 = self.tail;
                            var $9299 = String$flatten$(List$cons$("With context:\u{a}", List$cons$(Fm$Context$show$($9286), List$nil)));
                            return $9299;
                    };
                })(), List$nil)))))))));
                var $9282 = $9287;
                break;
            case 'Fm.Error.show_goal':
                var $9300 = self.name;
                var $9301 = self.dref;
                var $9302 = self.verb;
                var $9303 = self.goal;
                var $9304 = self.context;
                var _goal_name$8 = String$flatten$(List$cons$("Goal ?", List$cons$(Fm$Name$show$($9300), List$cons$(":\u{a}", List$nil))));
                var self = $9303;
                switch (self._) {
                    case 'Maybe.none':
                        var $9306 = "";
                        var _with_type$9 = $9306;
                        break;
                    case 'Maybe.some':
                        var $9307 = self.value;
                        var _goal$10 = Fm$Term$expand$($9301, $9307, _defs$2);
                        var $9308 = String$flatten$(List$cons$("With type: ", List$cons$((() => {
                            var self = $9302;
                            if (self) {
                                var $9309 = Fm$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $9310 = _x$11;
                                    return $9310;
                                })));
                                return $9309;
                            } else {
                                var $9311 = Fm$Term$show$(_goal$10);
                                return $9311;
                            };
                        })(), List$cons$("\u{a}", List$nil))));
                        var _with_type$9 = $9308;
                        break;
                };
                var self = $9304;
                switch (self._) {
                    case 'List.nil':
                        var $9312 = "";
                        var _with_ctxt$10 = $9312;
                        break;
                    case 'List.cons':
                        var $9313 = self.head;
                        var $9314 = self.tail;
                        var $9315 = String$flatten$(List$cons$("With ctxt:\u{a}", List$cons$(Fm$Context$show$($9304), List$nil)));
                        var _with_ctxt$10 = $9315;
                        break;
                };
                var $9305 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $9282 = $9305;
                break;
            case 'Fm.Error.waiting':
                var $9316 = self.name;
                var $9317 = String$flatten$(List$cons$("Waiting for \'", List$cons$($9316, List$cons$("\'.", List$nil))));
                var $9282 = $9317;
                break;
            case 'Fm.Error.indirect':
                var $9318 = self.name;
                var $9319 = String$flatten$(List$cons$("Error on dependency \'", List$cons$($9318, List$cons$("\'.", List$nil))));
                var $9282 = $9319;
                break;
            case 'Fm.Error.patch':
                var $9320 = self.path;
                var $9321 = self.term;
                var $9322 = String$flatten$(List$cons$("Patching: ", List$cons$(Fm$Term$show$($9321), List$nil)));
                var $9282 = $9322;
                break;
            case 'Fm.Error.undefined_reference':
                var $9323 = self.origin;
                var $9324 = self.name;
                var $9325 = String$flatten$(List$cons$("Undefined reference: ", List$cons$(Fm$Name$show$($9324), List$cons$("\u{a}", List$nil))));
                var $9282 = $9325;
                break;
            case 'Fm.Error.cant_infer':
                var $9326 = self.origin;
                var $9327 = self.term;
                var $9328 = self.context;
                var _term$6 = Fm$Term$show$($9327);
                var _context$7 = Fm$Context$show$($9328);
                var $9329 = String$flatten$(List$cons$("Can\'t infer type of: ", List$cons$(_term$6, List$cons$("\u{a}", List$cons$("With ctxt:\u{a}", List$cons$(_context$7, List$nil))))));
                var $9282 = $9329;
                break;
        };
        return $9282;
    };
    const Fm$Error$show = x0 => x1 => Fm$Error$show$(x0, x1);

    function Fm$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Fm.Error.type_mismatch':
                var $9331 = self.origin;
                var $9332 = self.expected;
                var $9333 = self.detected;
                var $9334 = self.context;
                var $9335 = $9331;
                var $9330 = $9335;
                break;
            case 'Fm.Error.show_goal':
                var $9336 = self.name;
                var $9337 = self.dref;
                var $9338 = self.verb;
                var $9339 = self.goal;
                var $9340 = self.context;
                var $9341 = Maybe$none;
                var $9330 = $9341;
                break;
            case 'Fm.Error.waiting':
                var $9342 = self.name;
                var $9343 = Maybe$none;
                var $9330 = $9343;
                break;
            case 'Fm.Error.indirect':
                var $9344 = self.name;
                var $9345 = Maybe$none;
                var $9330 = $9345;
                break;
            case 'Fm.Error.patch':
                var $9346 = self.path;
                var $9347 = self.term;
                var $9348 = Maybe$none;
                var $9330 = $9348;
                break;
            case 'Fm.Error.undefined_reference':
                var $9349 = self.origin;
                var $9350 = self.name;
                var $9351 = $9349;
                var $9330 = $9351;
                break;
            case 'Fm.Error.cant_infer':
                var $9352 = self.origin;
                var $9353 = self.term;
                var $9354 = self.context;
                var $9355 = $9352;
                var $9330 = $9355;
                break;
        };
        return $9330;
    };
    const Fm$Error$origin = x0 => Fm$Error$origin$(x0);

    function Fm$Defs$report$errors$(_defs$1) {
        var _errors$2 = "";
        var _errors$3 = (() => {
            var $9358 = _errors$2;
            var $9359 = Map$keys$(_defs$1);
            let _errors$4 = $9358;
            let _key$3;
            while ($9359._ === 'List.cons') {
                _key$3 = $9359.head;
                var _name$5 = Fm$Name$from_bits$(_key$3);
                var self = Fm$get$(_name$5, _defs$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $9360 = _errors$4;
                        var $9358 = $9360;
                        break;
                    case 'Maybe.some':
                        var $9361 = self.value;
                        var self = $9361;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $9363 = self.file;
                                var $9364 = self.code;
                                var $9365 = self.orig;
                                var $9366 = self.name;
                                var $9367 = self.term;
                                var $9368 = self.type;
                                var $9369 = self.isct;
                                var $9370 = self.arit;
                                var $9371 = self.stat;
                                var self = $9371;
                                switch (self._) {
                                    case 'Fm.Status.init':
                                        var $9373 = _errors$4;
                                        var $9372 = $9373;
                                        break;
                                    case 'Fm.Status.wait':
                                        var $9374 = _errors$4;
                                        var $9372 = $9374;
                                        break;
                                    case 'Fm.Status.done':
                                        var $9375 = _errors$4;
                                        var $9372 = $9375;
                                        break;
                                    case 'Fm.Status.fail':
                                        var $9376 = self.errors;
                                        var self = $9376;
                                        switch (self._) {
                                            case 'List.nil':
                                                var $9378 = _errors$4;
                                                var $9377 = $9378;
                                                break;
                                            case 'List.cons':
                                                var $9379 = self.head;
                                                var $9380 = self.tail;
                                                var _name_str$19 = $9366;
                                                var _rel_errs$20 = Fm$Error$relevant$($9376, Bool$false);
                                                var _errors$21 = (() => {
                                                    var $9383 = _errors$4;
                                                    var $9384 = _rel_errs$20;
                                                    let _errors$22 = $9383;
                                                    let _err$21;
                                                    while ($9384._ === 'List.cons') {
                                                        _err$21 = $9384.head;
                                                        var _err_msg$23 = Fm$Error$show$(_err$21, _defs$1);
                                                        var self = Fm$Error$origin$(_err$21);
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $9385 = "";
                                                                var _ori_msg$24 = $9385;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $9386 = self.value;
                                                                var self = $9386;
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $9388 = self.fst;
                                                                        var $9389 = self.snd;
                                                                        var _inside$27 = ("Inside \'" + ($9363 + "\':\u{a}"));
                                                                        var _source$28 = Fm$highlight$($9364, $9388, $9389);
                                                                        var $9390 = (_inside$27 + (_source$28 + "\u{a}"));
                                                                        var $9387 = $9390;
                                                                        break;
                                                                };
                                                                var _ori_msg$24 = $9387;
                                                                break;
                                                        };
                                                        var $9383 = (_errors$22 + (_err_msg$23 + (_ori_msg$24 + "\u{a}")));
                                                        _errors$22 = $9383;
                                                        $9384 = $9384.tail;
                                                    }
                                                    return _errors$22;
                                                })();
                                                var $9381 = _errors$21;
                                                var $9377 = $9381;
                                                break;
                                        };
                                        var $9372 = $9377;
                                        break;
                                };
                                var $9362 = $9372;
                                break;
                        };
                        var $9358 = $9362;
                        break;
                };
                _errors$4 = $9358;
                $9359 = $9359.tail;
            }
            return _errors$4;
        })();
        var $9356 = _errors$3;
        return $9356;
    };
    const Fm$Defs$report$errors = x0 => Fm$Defs$report$errors$(x0);

    function Fm$Defs$report$(_defs$1, _names$2) {
        var _types$3 = Fm$Defs$report$types$(_defs$1, _names$2);
        var _errors$4 = Fm$Defs$report$errors$(_defs$1);
        var self = _errors$4;
        if (self.length === 0) {
            var $9392 = "All terms check.";
            var _errors$5 = $9392;
        } else {
            var $9393 = self.charCodeAt(0);
            var $9394 = self.slice(1);
            var $9395 = _errors$4;
            var _errors$5 = $9395;
        };
        var $9391 = (_types$3 + ("\u{a}" + _errors$5));
        return $9391;
    };
    const Fm$Defs$report = x0 => x1 => Fm$Defs$report$(x0, x1);

    function Fm$checker$io$one$(_name$1) {
        var $9396 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $9397 = _m$bind$2;
            return $9397;
        }))(Fm$Synth$one$(_name$1, Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.none':
                    var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                    var _filelist$4 = List$mapped$(Fm$Synth$files_of$(_name$1), (_x$4 => {
                        var $9400 = ("\'" + (_x$4 + "\'"));
                        return $9400;
                    }));
                    var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                    var $9399 = IO$print$((_notfound$3 + ("\u{a}" + _searched$5)));
                    var $9398 = $9399;
                    break;
                case 'Maybe.some':
                    var $9401 = self.value;
                    var $9402 = IO$print$(Fm$Defs$report$($9401, List$cons$(_name$1, List$nil)));
                    var $9398 = $9402;
                    break;
            };
            return $9398;
        }));
        return $9396;
    };
    const Fm$checker$io$one = x0 => Fm$checker$io$one$(x0);

    function Fm$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $9404 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $9405 = _m$pure$4;
                    return $9405;
                }))(_defs$2);
                var $9403 = $9404;
                break;
            case 'List.cons':
                var $9406 = self.head;
                var $9407 = self.tail;
                var $9408 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $9409 = _m$bind$5;
                    return $9409;
                }))(Fm$Synth$one$($9406, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.none':
                            var $9411 = Fm$Synth$many$($9407, _defs$2);
                            var $9410 = $9411;
                            break;
                        case 'Maybe.some':
                            var $9412 = self.value;
                            var $9413 = Fm$Synth$many$($9407, $9412);
                            var $9410 = $9413;
                            break;
                    };
                    return $9410;
                }));
                var $9403 = $9408;
                break;
        };
        return $9403;
    };
    const Fm$Synth$many = x0 => x1 => Fm$Synth$many$(x0, x1);

    function Fm$Synth$file$(_file$1, _defs$2) {
        var $9414 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $9415 = _m$bind$3;
            return $9415;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Fm$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $9417 = self.value;
                    var $9418 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $9419 = _m$pure$7;
                        return $9419;
                    }))(Either$left$($9417));
                    var $9416 = $9418;
                    break;
                case 'Either.right':
                    var $9420 = self.value;
                    var _file_defs$6 = $9420;
                    var _file_keys$7 = Map$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Fm$Name$from_bits);
                    var $9421 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $9422 = _m$bind$9;
                        return $9422;
                    }))(Fm$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $9423 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $9424 = _m$pure$11;
                            return $9424;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $9423;
                    }));
                    var $9416 = $9421;
                    break;
            };
            return $9416;
        }));
        return $9414;
    };
    const Fm$Synth$file = x0 => x1 => Fm$Synth$file$(x0, x1);

    function Fm$checker$io$file$(_file$1) {
        var $9425 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $9426 = _m$bind$2;
            return $9426;
        }))(Fm$Synth$file$(_file$1, Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $9428 = self.value;
                    var $9429 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $9430 = _m$bind$4;
                        return $9430;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $9431 = IO$print$($9428);
                        return $9431;
                    }));
                    var $9427 = $9429;
                    break;
                case 'Either.right':
                    var $9432 = self.value;
                    var self = $9432;
                    switch (self._) {
                        case 'Pair.new':
                            var $9434 = self.fst;
                            var $9435 = self.snd;
                            var _nams$6 = $9434;
                            var _defs$7 = $9435;
                            var self = _nams$6;
                            switch (self._) {
                                case 'List.nil':
                                    var $9437 = IO$print$(("File not found or empty: \'" + (_file$1 + "\'.")));
                                    var $9436 = $9437;
                                    break;
                                case 'List.cons':
                                    var $9438 = self.head;
                                    var $9439 = self.tail;
                                    var $9440 = IO$print$(Fm$Defs$report$(_defs$7, _nams$6));
                                    var $9436 = $9440;
                                    break;
                            };
                            var $9433 = $9436;
                            break;
                    };
                    var $9427 = $9433;
                    break;
            };
            return $9427;
        }));
        return $9425;
    };
    const Fm$checker$io$file = x0 => Fm$checker$io$file$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $9441 = self.value;
                        var $9442 = $9441;
                        return $9442;
                    case 'IO.ask':
                        var $9443 = self.query;
                        var $9444 = self.param;
                        var $9445 = self.then;
                        var $9446 = IO$purify$($9445(""));
                        return $9446;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Fm$checker$code$(_code$1) {
        var self = Fm$Defs$read$("Main.fm", _code$1, Map$new);
        switch (self._) {
            case 'Either.left':
                var $9448 = self.value;
                var $9449 = $9448;
                var $9447 = $9449;
                break;
            case 'Either.right':
                var $9450 = self.value;
                var $9451 = IO$purify$((() => {
                    var _defs$3 = $9450;
                    var _nams$4 = List$mapped$(Map$keys$(_defs$3), Fm$Name$from_bits);
                    var $9452 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $9453 = _m$bind$5;
                        return $9453;
                    }))(Fm$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $9454 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $9455 = _m$pure$7;
                            return $9455;
                        }))(Fm$Defs$report$(_defs$5, _nams$4));
                        return $9454;
                    }));
                    return $9452;
                })());
                var $9447 = $9451;
                break;
        };
        return $9447;
    };
    const Fm$checker$code = x0 => Fm$checker$code$(x0);

    function Fm$Term$read$(_code$1) {
        var self = Fm$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.error':
                var $9457 = self.idx;
                var $9458 = self.code;
                var $9459 = self.err;
                var $9460 = Maybe$none;
                var $9456 = $9460;
                break;
            case 'Parser.Reply.value':
                var $9461 = self.idx;
                var $9462 = self.code;
                var $9463 = self.val;
                var $9464 = Maybe$some$($9463);
                var $9456 = $9464;
                break;
        };
        return $9456;
    };
    const Fm$Term$read = x0 => Fm$Term$read$(x0);
    const Fm = (() => {
        var __$1 = Fm$to_core$io$one;
        var __$2 = Fm$checker$io$one;
        var __$3 = Fm$checker$io$file;
        var __$4 = Fm$checker$code;
        var __$5 = Fm$Term$read;
        var $9465 = IO$monad$((_m$bind$6 => _m$pure$7 => {
            var $9466 = _m$pure$7;
            return $9466;
        }))(Unit$new);
        return $9465;
    })();
    return {
        '$main$': () => run(Fm),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'Map': Map,
        'Maybe.none': Maybe$none,
        'Map.get': Map$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.lte': Word$lte,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'U16.inc': U16$inc,
        'Word.zero': Word$zero,
        'U16.zero': U16$zero,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Fm.Name.to_bits': Fm$Name$to_bits,
        'Fm.get': Fm$get,
        'IO.get_file': IO$get_file,
        'Parser.Reply': Parser$Reply,
        'Parser.Reply.value': Parser$Reply$value,
        'Parser.is_eof': Parser$is_eof,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser': Parser,
        'Maybe.some': Maybe$some,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'List.cons': List$cons,
        'List': List,
        'List.nil': List$nil,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Unit.new': Unit$new,
        'String.cons': String$cons,
        'String.concat': String$concat,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'String.nil': String$nil,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Fm.Parser.spaces': Fm$Parser$spaces,
        'Parser.get_index': Parser$get_index,
        'Fm.Parser.init': Fm$Parser$init,
        'Parser.many1': Parser$many1,
        'Fm.Name.is_letter': Fm$Name$is_letter,
        'Fm.Parser.letter': Fm$Parser$letter,
        'List.fold': List$fold,
        'Fm.Parser.name1': Fm$Parser$name1,
        'Fm.Parser.text': Fm$Parser$text,
        'Parser.until1': Parser$until1,
        'Pair': Pair,
        'Parser.maybe': Parser$maybe,
        'Fm.Parser.item': Fm$Parser$item,
        'Fm.Parser.name': Fm$Parser$name,
        'Pair.new': Pair$new,
        'Fm.Parser.stop': Fm$Parser$stop,
        'Fm.Term.ori': Fm$Term$ori,
        'Fm.Term.typ': Fm$Term$typ,
        'Fm.Parser.type': Fm$Parser$type,
        'Fm.Term.all': Fm$Term$all,
        'Fm.Parser.forall': Fm$Parser$forall,
        'Fm.Term.lam': Fm$Term$lam,
        'Fm.Parser.make_lambda': Fm$Parser$make_lambda,
        'Fm.Parser.lambda': Fm$Parser$lambda,
        'Fm.Parser.lambda.erased': Fm$Parser$lambda$erased,
        'Fm.Parser.lambda.nameless': Fm$Parser$lambda$nameless,
        'Fm.Parser.parenthesis': Fm$Parser$parenthesis,
        'Fm.Term.ref': Fm$Term$ref,
        'Fm.Term.app': Fm$Term$app,
        'Fm.Term.hol': Fm$Term$hol,
        'Fm.Term.let': Fm$Term$let,
        'Fm.Parser.letforrange.u32': Fm$Parser$letforrange$u32,
        'Fm.Parser.letforin': Fm$Parser$letforin,
        'Fm.Parser.let': Fm$Parser$let,
        'Fm.Parser.get': Fm$Parser$get,
        'Fm.Term.def': Fm$Term$def,
        'Fm.Parser.def': Fm$Parser$def,
        'Fm.Parser.if': Fm$Parser$if,
        'List.mapped': List$mapped,
        'Fm.backslash': Fm$backslash,
        'Fm.escapes': Fm$escapes,
        'Fm.Parser.char.single': Fm$Parser$char$single,
        'Fm.Term.chr': Fm$Term$chr,
        'Fm.Parser.char': Fm$Parser$char,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'Fm.Parser.string.go': Fm$Parser$string$go,
        'Fm.Term.str': Fm$Term$str,
        'Fm.Parser.string': Fm$Parser$string,
        'Fm.Parser.pair': Fm$Parser$pair,
        'Fm.Parser.sigma.type': Fm$Parser$sigma$type,
        'Fm.Parser.some': Fm$Parser$some,
        'Fm.Parser.apply': Fm$Parser$apply,
        'Fm.Parser.mirror': Fm$Parser$mirror,
        'Fm.Name.read': Fm$Name$read,
        'Fm.Parser.list': Fm$Parser$list,
        'Fm.Parser.log': Fm$Parser$log,
        'Fm.Parser.forrange.u32': Fm$Parser$forrange$u32,
        'Fm.Parser.forrange.u32.2': Fm$Parser$forrange$u32$2,
        'Fm.Parser.forin': Fm$Parser$forin,
        'Fm.Parser.forin.2': Fm$Parser$forin$2,
        'Fm.Parser.do.statements': Fm$Parser$do$statements,
        'Fm.Parser.do': Fm$Parser$do,
        'Fm.Term.nat': Fm$Term$nat,
        'Fm.Term.unroll_nat': Fm$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Fm.Term.unroll_chr.bits': Fm$Term$unroll_chr$bits,
        'Fm.Term.unroll_chr': Fm$Term$unroll_chr,
        'Fm.Term.unroll_str': Fm$Term$unroll_str,
        'Fm.Term.reduce': Fm$Term$reduce,
        'Map.new': Map$new,
        'Fm.Def.new': Fm$Def$new,
        'Fm.Status.init': Fm$Status$init,
        'Fm.Parser.case.with': Fm$Parser$case$with,
        'Fm.Parser.case.case': Fm$Parser$case$case,
        'Map.tie': Map$tie,
        'Map.set': Map$set,
        'Map.from_list': Map$from_list,
        'Pair.fst': Pair$fst,
        'Pair.snd': Pair$snd,
        'Fm.Term.cse': Fm$Term$cse,
        'Fm.Parser.case': Fm$Parser$case,
        'Fm.set': Fm$set,
        'Fm.Parser.open': Fm$Parser$open,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.to_bool': Maybe$to_bool,
        'Fm.Term.gol': Fm$Term$gol,
        'Fm.Parser.goal': Fm$Parser$goal,
        'Fm.Parser.hole': Fm$Parser$hole,
        'Fm.Parser.u8': Fm$Parser$u8,
        'Fm.Parser.u16': Fm$Parser$u16,
        'Fm.Parser.u32': Fm$Parser$u32,
        'Fm.Parser.u64': Fm$Parser$u64,
        'Fm.Parser.nat': Fm$Parser$nat,
        'String.eql': String$eql,
        'Parser.fail': Parser$fail,
        'Fm.Parser.reference': Fm$Parser$reference,
        'List.for': List$for,
        'Fm.Parser.application': Fm$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Fm.Parser.application.erased': Fm$Parser$application$erased,
        'Fm.Parser.arrow': Fm$Parser$arrow,
        'Fm.Parser.op': Fm$Parser$op,
        'Fm.Parser.add': Fm$Parser$add,
        'Fm.Parser.sub': Fm$Parser$sub,
        'Fm.Parser.mul': Fm$Parser$mul,
        'Fm.Parser.div': Fm$Parser$div,
        'Fm.Parser.mod': Fm$Parser$mod,
        'Fm.Parser.cons': Fm$Parser$cons,
        'Fm.Parser.concat': Fm$Parser$concat,
        'Fm.Parser.string_concat': Fm$Parser$string_concat,
        'Fm.Parser.sigma': Fm$Parser$sigma,
        'Fm.Parser.equality': Fm$Parser$equality,
        'Fm.Parser.inequality': Fm$Parser$inequality,
        'Fm.Parser.rewrite': Fm$Parser$rewrite,
        'Fm.Term.ann': Fm$Term$ann,
        'Fm.Parser.annotation': Fm$Parser$annotation,
        'Fm.Parser.application.hole': Fm$Parser$application$hole,
        'Fm.Parser.suffix': Fm$Parser$suffix,
        'Fm.Parser.term': Fm$Parser$term,
        'Fm.Parser.name_term': Fm$Parser$name_term,
        'Fm.Binder.new': Fm$Binder$new,
        'Fm.Parser.binder.homo': Fm$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Fm.Parser.binder': Fm$Parser$binder,
        'List.length': List$length,
        'Fm.Parser.make_forall': Fm$Parser$make_forall,
        'List.at': List$at,
        'List.at_last': List$at_last,
        'Fm.Term.var': Fm$Term$var,
        'Fm.Context.get_name_skips': Fm$Context$get_name_skips,
        'Fm.Name.eql': Fm$Name$eql,
        'Fm.Context.find.go': Fm$Context$find$go,
        'Fm.Context.find': Fm$Context$find,
        'Fm.Path.o': Fm$Path$o,
        'Fm.Path.i': Fm$Path$i,
        'Fm.Path.to_bits': Fm$Path$to_bits,
        'Fm.Term.bind': Fm$Term$bind,
        'Fm.Status.done': Fm$Status$done,
        'Fm.define': Fm$define,
        'Fm.Parser.file.def': Fm$Parser$file$def,
        'Maybe.default': Maybe$default,
        'Fm.Constructor.new': Fm$Constructor$new,
        'Fm.Parser.constructor': Fm$Parser$constructor,
        'Fm.Datatype.new': Fm$Datatype$new,
        'Fm.Parser.datatype': Fm$Parser$datatype,
        'Fm.Datatype.build_term.motive.go': Fm$Datatype$build_term$motive$go,
        'Fm.Datatype.build_term.motive': Fm$Datatype$build_term$motive,
        'Fm.Datatype.build_term.constructor.go': Fm$Datatype$build_term$constructor$go,
        'Fm.Datatype.build_term.constructor': Fm$Datatype$build_term$constructor,
        'Fm.Datatype.build_term.constructors.go': Fm$Datatype$build_term$constructors$go,
        'Fm.Datatype.build_term.constructors': Fm$Datatype$build_term$constructors,
        'Fm.Datatype.build_term.go': Fm$Datatype$build_term$go,
        'Fm.Datatype.build_term': Fm$Datatype$build_term,
        'Fm.Datatype.build_type.go': Fm$Datatype$build_type$go,
        'Fm.Datatype.build_type': Fm$Datatype$build_type,
        'Fm.Constructor.build_term.opt.go': Fm$Constructor$build_term$opt$go,
        'Fm.Constructor.build_term.opt': Fm$Constructor$build_term$opt,
        'Fm.Constructor.build_term.go': Fm$Constructor$build_term$go,
        'Fm.Constructor.build_term': Fm$Constructor$build_term,
        'Fm.Constructor.build_type.go': Fm$Constructor$build_type$go,
        'Fm.Constructor.build_type': Fm$Constructor$build_type,
        'Fm.Parser.file.adt': Fm$Parser$file$adt,
        'Parser.eof': Parser$eof,
        'Fm.Parser.file.end': Fm$Parser$file$end,
        'Fm.Parser.file': Fm$Parser$file,
        'Either': Either,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Fm.highlight.end': Fm$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'Nat.pred': Nat$pred,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Bool.not': Bool$not,
        'Fm.color': Fm$color,
        'Nat.eql': Nat$eql,
        'List.take': List$take,
        'Fm.highlight.tc': Fm$highlight$tc,
        'Fm.highlight': Fm$highlight,
        'Fm.Defs.read': Fm$Defs$read,
        'Fm.Synth.load.go': Fm$Synth$load$go,
        'Fm.Synth.files_of.make': Fm$Synth$files_of$make,
        'Char.eql': Char$eql,
        'String.starts_with': String$starts_with,
        'String.drop': String$drop,
        'String.length.go': String$length$go,
        'String.length': String$length,
        'String.split.go': String$split$go,
        'String.split': String$split,
        'Fm.Synth.files_of': Fm$Synth$files_of,
        'Fm.Synth.load': Fm$Synth$load,
        'Fm.Status.wait': Fm$Status$wait,
        'Fm.Check': Fm$Check,
        'Fm.Check.result': Fm$Check$result,
        'Fm.Error.undefined_reference': Fm$Error$undefined_reference,
        'Fm.Error.waiting': Fm$Error$waiting,
        'Fm.Error.indirect': Fm$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Fm.MPath.o': Fm$MPath$o,
        'Fm.MPath.i': Fm$MPath$i,
        'Fm.Error.patch': Fm$Error$patch,
        'Fm.MPath.to_bits': Fm$MPath$to_bits,
        'Fm.Error.type_mismatch': Fm$Error$type_mismatch,
        'Fm.Error.show_goal': Fm$Error$show_goal,
        'Fm.Term.normalize': Fm$Term$normalize,
        'List.tail': List$tail,
        'Fm.SmartMotive.vals.cont': Fm$SmartMotive$vals$cont,
        'Fm.SmartMotive.vals': Fm$SmartMotive$vals,
        'Fm.SmartMotive.nams.cont': Fm$SmartMotive$nams$cont,
        'Fm.SmartMotive.nams': Fm$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Fm.Term.serialize.name': Fm$Term$serialize$name,
        'Fm.Term.serialize': Fm$Term$serialize,
        'Bits.eql': Bits$eql,
        'Fm.Term.identical': Fm$Term$identical,
        'Fm.SmartMotive.replace': Fm$SmartMotive$replace,
        'Fm.SmartMotive.make': Fm$SmartMotive$make,
        'Fm.Term.desugar_cse.motive': Fm$Term$desugar_cse$motive,
        'String.is_empty': String$is_empty,
        'Fm.Term.desugar_cse.argument': Fm$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Fm.Term.desugar_cse.cases': Fm$Term$desugar_cse$cases,
        'Fm.Term.desugar_cse': Fm$Term$desugar_cse,
        'Fm.Error.cant_infer': Fm$Error$cant_infer,
        'Set.has': Set$has,
        'Set.mut.has': Set$mut$has,
        'Bool.or': Bool$or,
        'Fm.Term.has_holes': Fm$Term$has_holes,
        'Fm.Term.equal.hole': Fm$Term$equal$hole,
        'Fm.Term.equal.extra_holes': Fm$Term$equal$extra_holes,
        'Set.set': Set$set,
        'Set.mut.set': Set$mut$set,
        'Bool.eql': Bool$eql,
        'Fm.Term.equal': Fm$Term$equal,
        'Set.new': Set$new,
        'Set.mut.new': Set$mut$new,
        'Fm.Term.check': Fm$Term$check,
        'Fm.Path.nil': Fm$Path$nil,
        'Fm.MPath.nil': Fm$MPath$nil,
        'List.is_empty': List$is_empty,
        'Fm.Term.patch_at': Fm$Term$patch_at,
        'Fm.Synth.fix': Fm$Synth$fix,
        'Fm.Status.fail': Fm$Status$fail,
        'Fm.Synth.one': Fm$Synth$one,
        'Map.map': Map$map,
        'Fm.Term.inline.names': Fm$Term$inline$names,
        'Fm.Term.inline.reduce': Fm$Term$inline$reduce,
        'Fm.Term.inline': Fm$Term$inline,
        'Map.values.go': Map$values$go,
        'Map.values': Map$values,
        'Fm.Core.var_name': Fm$Core$var_name,
        'Fm.Name.show': Fm$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Fm.escape.char': Fm$escape$char,
        'Fm.escape': Fm$escape,
        'Fm.Core.show': Fm$Core$show,
        'Fm.Defs.core': Fm$Defs$core,
        'Fm.to_core.io.one': Fm$to_core$io$one,
        'IO.put_string': IO$put_string,
        'IO.print': IO$print,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Fm.Term.show.as_nat.go': Fm$Term$show$as_nat$go,
        'Fm.Term.show.as_nat': Fm$Term$show$as_nat,
        'Fm.Term.show.is_ref': Fm$Term$show$is_ref,
        'Fm.Term.show.app.done': Fm$Term$show$app$done,
        'Fm.Term.show.app': Fm$Term$show$app,
        'Map.to_list.go': Map$to_list$go,
        'Map.to_list': Map$to_list,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'Word.from_bits': Word$from_bits,
        'Fm.Name.from_bits': Fm$Name$from_bits,
        'Fm.Term.show.go': Fm$Term$show$go,
        'Fm.Term.show': Fm$Term$show,
        'Fm.Defs.report.types': Fm$Defs$report$types,
        'Map.keys.go': Map$keys$go,
        'Map.keys': Map$keys,
        'Fm.Error.relevant': Fm$Error$relevant,
        'Fm.Context.show': Fm$Context$show,
        'Fm.Term.expand_at': Fm$Term$expand_at,
        'Fm.Term.expand_ct': Fm$Term$expand_ct,
        'Fm.Term.expand': Fm$Term$expand,
        'Fm.Error.show': Fm$Error$show,
        'Fm.Error.origin': Fm$Error$origin,
        'Fm.Defs.report.errors': Fm$Defs$report$errors,
        'Fm.Defs.report': Fm$Defs$report,
        'Fm.checker.io.one': Fm$checker$io$one,
        'Fm.Synth.many': Fm$Synth$many,
        'Fm.Synth.file': Fm$Synth$file,
        'Fm.checker.io.file': Fm$checker$io$file,
        'IO.purify': IO$purify,
        'Fm.checker.code': Fm$checker$code,
        'Fm.Term.read': Fm$Term$read,
        'Fm': Fm,
    };
})();